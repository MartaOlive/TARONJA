<!-- https://citiobs.demo.secure-dimensions.de/staplus/v1.1/Observations?$select=result&$orderby=phenomenonTime%20desc&$filter=phenomenonTime%20ge%202023-09-04T00:00:00.000Z%20and%20phenomenonTime%20le%202023-09-04T00:59:59.999Z%20and%20Datastream/Party/displayName%20eq%20%27Joan%20Mas%C3%B3%27&$count=true -->
<!-- https://citiobs.demo.secure-dimensions.de/staplus/v1.1/Datastreams(17)/Observations?$orderby=phenomenonTime%20desc&$filter=phenomenonTime%20ge%202023-09-04T00:00:00.000Z%20and%20phenomenonTime%20le%202023-09-04T23:59:59.999Z
(recorda que un %20 Ã©s un espai). -->


<!DOCTYPE html>
<html lang="en">

<head>
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
	<title>TAPIS: Tables from APIs for Sensors (Sensor Things API plus Explorer)</title>
	<link rel="icon" type="image/x-icon" href="favicon.ico">
	<script type="text/javascript" src="vis.min.js"></script>
	<script type="text/javascript" src="papaparse.min.js"></script>
	<script type="text/javascript" src="hello.all.min.js"></script>
	<script type="text/javascript" src="authenix.js"></script>
	<script type="text/javascript" src="mmn_postmessage.js"></script>

	<link rel="stylesheet" href="tapis.css">
	<link rel="stylesheet" href="vis.min.css">

</head>

<body onLoad="StartSTAPage();" onkeydown="KeySTAPage(event);">
	<table border="0" style="width:100%">
		<tr>
			<td>
				<table>
					<tr>
						<td><img src="logo.png" height="70"></td>
						<td>
							<div style="font-size: 30px; font-weight: bold;">TAPIS</div>
							<div style="font-size: 20px; font-weight: bold;">Tables from OGC APIs for Sensors</div>
							<div style="font-size: 10px; font-weight: normal;"> or a Sensor Things API plus Explorer
							</div>
						</td>
					</tr>
				</table>
			</td>
			<td align="right" valign="top">
				<span id="UserInfoText"></span>
				<button id="buttonReloadSTA" onclick='reloadSTA(event);'><img src="reload.png" height="20"
						valign="middle"> Refresh</button>
				<label class=labelbotton><img src="OpenNetwork.png" height="20" valign="middle"> Open
					<input type="file" id="openNetworkFileName" hidden onchange='openNetwork(event);' />
				</label>
				<!-- https://dev.to/faddalibrahim/how-to-create-a-custom-file-upload-button-using-html-css-and-javascript-1c03 -->
				<button onclick='saveNetwork(event);'><img src="SaveNetwork.png" height="20" valign="middle">
					Save</button>
				<button id="buttonOpenLogin" onclick='OpenLogin(event);'><img src="login.png" height="20"
						valign="middle"> Login</button>
				<button id="buttonOpenLogout" onclick='OpenLogout(event);' style="display: none" );'><img
						src="login.png" height="20" valign="middle"> Logout</button>
				<button onclick='OpenConfiguration(event);'><img src="config.png" height="20"
						valign="middle">Configuration</button><br>
				<span style="font-size: 10px;"><a href="TermsOfUse.htm">Terms of Use</a><br>
					<a href="PrivacyStatement.htm">Privacy Statement</a><br>
					<a href="AccessPolicy.htm">Access Policy</a><br></span>
			</td>
		</tr>
	</table>

	<button onclick='addCircularImage(null, null, "STAplus", "ogc.png");'><img src="ogc.png" height="20"
			valign="middle"> Add STA service</button><br>
	<span id="ButtonsSTAEntities"></span>
	<button onclick="addEdge();">Connect two nodes</button><br>

	<div>
		<div id="mynetwork" style="float: left; width: 59.4%; height: 400px;"></div>
		<div id="clarification"
			style="float: left; width: 39.5%; margin-left: 0.2%; height: 400px; border: 1px solid gray; overflow-y: auto; overflow-x: scroll;">
		</div>
	</div>

	<dialog id="DialogConfiguration">
		<form>
			<p>
				<label>Table font size ratio:
					<input type="text" id="DialogConfigurationFontSize" size="3" value="50"></input>%
				</label>
				<br>
				<span style="display: flex;align-items: center;">Window disposition:
					<label style="display: flex;align-items: center;"><input type="radio" name="DialogConfigurationDiv"
							id="DialogConfigurationDivSideBySide" checked="checked"></input><img
							src="SideBySide.png"></label>
					<label style="display: flex;align-items: center;"><input type="radio" name="DialogConfigurationDiv"
							id="DialogConfigurationDivOverUnder"></input><img src="OverUnder.png"></label>
				</span>
				<br>
				<label><input type="checkbox" id="DialogConfigurationAddGeolocationHeader"></input>Add geolocation
					header</label>
			</p>
			<div class="center">
				<button value="default" onClick="ChangeConfiguration(event)">OK</button>
				<button value="cancel" formmethod="dialog">Cancel</button>
			</div>
		</form>
	</dialog>


	<dialog id="DialogSTAURL">
		<form>
			<p>
				<label>STA service URL:
					<input type="text" id="DialogSTAURLInput" size="100"></input>
				</label>
			</p>
			<div class="center">
				<button value="default" id="DialogSTAURLOk" onClick="GetSTAURLEvent(event)">OK</button>
				<button value="cancel" formmethod="dialog">Cancel</button>
			</div>
		</form>
	</dialog>

	<dialog id="DialogSelectColumns">
		<form>
			Select columns:
			<span id="DialogSelectColumnsHTML">
			</span>
			<div class="center">
				<button value="default" onClick="GetSelectColumns(event)">OK</button>
				<button value="cancel" formmethod="dialog">Cancel</button>
			</div>
		</form>
	</dialog>

	<dialog id="DialogSelectExpands">
		<form>
			<fieldset id="DialogSelectExpandsHTML">
				<legend>Select what do you want to expand:</legend>
				<span id="DialogSelectExpandsCheckBoxes">
				</span>
			</fieldset>
			<br>
			<label>Number records to request:
				<input type="text" id="SelectExpandsNumberOfRecords" size="6" maxlength="6" value="100"></input>
			</label>
			<div class="center">
				<button value="default" onClick="GetSelectExpands(event)">OK</button>
				<button value="cancel" formmethod="dialog">Cancel</button>
			</div>
		</form>
	</dialog>

	<dialog id="DialogSelectSortBy">
		<form>
			<fieldset id="DialogSelectSortByHTML">
				<legend>Select the criteria for sorting:</legend>
				<span id="DialogSelectSortByRadioButtons">
				</span>
			</fieldset>
			<br>
			<label><input type="radio" id="SelectSortByAsc" name="SelectSortByArcDesc" checked />ascending</label>
			<label><input type="radio" id="SelectSortByDesc" name="SelectSortByArcDesc" />descending</label>
			<br>
			<label>Number records to request:
				<input type="text" id="SelectSortByNumberOfRecords" size="6" maxlength="6" value="100"></input>
			</label>
			<div class="center">
				<button value="default" onClick="GetSelectSortBy(event)">OK</button>
				<button value="cancel" formmethod="dialog">Cancel</button>
			</div>
		</form>
	</dialog>

	<dialog id="DialogSelectRows">
		<form>
			<span id="DialogSelectRowsTableInputSpan">
			</span>
			<span id="DialogSelectRowsTable">
			</span>
			<br>
			<span id="DialogSelectRowsFilterInputSpan">
			</span>
			<span id="DialogSelectRowsFilter">
			</span>
			<div class="center">
				<button value="default" onClick="GetSelectRows(event)">OK</button>
				<button value="cancel" formmethod="dialog">Cancel</button>
			</div>
		</form>
	</dialog>

	<dialog id="DialogContextMenu">
		<form>
			<p>
				<button onclick='addCircularImage(event, "DialogContextMenu", "STAplus", "ogc.png");'><img src="ogc.png"
						height="20" valign="middle"> Add STA service</button><br>
				<span id="ButtonsContextMenuObjects"></span><br>
				<button onclick='removeCircularImage(event, "DialogContextMenu")'>Remove</button>
				<button onclick='renameCircularImage(event, "DialogContextMenu")'>Rename</button><br>
				<button onclick='giveMeNetworkInformation(event, "DialogContextMenu")'>Network Info</button><br>
			</p>
			<div class="center">
				<button value="cancel" onClick="startingNodeContextId=null;" formmethod="dialog">Cancel</button>
			</div>
		</form>
	</dialog>

	<dialog id="DialogEdgeContextMenu">
		<form>
			<p>
				<button onclick='removeEdge(event, "DialogEdgeContextMenu")'>Remove</button>
			</p>
			<div class="center">
				<button value="cancel" onClick="startingEdgeContextId=null;" formmethod="dialog">Cancel</button>
			</div>
		</form>
	</dialog>

	<dialog id="DialogOK">
		<form>
			<span id="DialogOKOptions"></span><br>
			<span id="DialogOKHTML">
			</span>
			<div class="center">
				<button value="cancel" formmethod="dialog">Close</button>
			</div>
		</form>
	</dialog>

	<dialog id="DialogImportCSV">
		<form>
			Import CSV file table.
			<br>
			<label>CSV delimiter:
				<label><input type="radio" name="DialogImportCSVDelimiter" id="DialogImportCSVDelimiterText"
						checked></input> <input type="text" id="DialogImportCSVDelimiter" size="1" maxlength="1"
						value=";"></input></label> <label><input type="radio" name="DialogImportCSVDelimiter"
						id="DialogImportCSVDelimiterTab"></input> Tab</label>
			</label>
			<br>
			<label><input type="checkbox" id="DialogImportCSVHeader"></input>First line contains names of the
				fields</label>
			<br>
			<label>Choose a CSVW:
				<input type="file" accept=".csvw,.json" onChange="ReadFileImportCSVW(event)"></input>
			</label>
			<br>
			<label>Choose a CSV:
				<input type="file" accept=".csv,*.txt" onChange="ReadFileImportCSV(event)"></input>
			</label>
			<div class="center">
				<button value="ok" formmethod="dialog">Done</button>
			</div>
			<input type="hidden" id="DialogImportCSVdataAttributes" value=""></input>
		</form>
	</dialog>

	<dialog id="DialogSaveTable">
		<form>
			Save the table as CSV.
			<br>
			<label>CSV delimiter:
				<input type="text" id="DialogSaveTableDelimiter" size="2" maxlength="1" value=";"></input>
			</label>
			<!--span id="DialogSaveTableOptions"></span--><br>
			<div class="center">
				<button value="default" onClick="SaveTable(event)">Save CSV</button>
				<button value="csvw" onClick="SaveCSVW(event)">Save CSVW</button>
				<button value="cancel" formmethod="dialog">Cancel</button>
			</div>
		</form>
	</dialog>

	<dialog id="DialogSaveLayer">
		<form>
			<span id="DialogSaveLayerTitle"></span>
			<fieldset>
				<legend>Position:</legend>
				<label>Place description:
					<span id="DialogSaveLayerPlace"></span>
				</label>
				<br>
				<label>Longitude:
					<span id="DialogSaveLayerLongitude"></span>
				</label>
				<br>
				<label>Latitude:
					<span id="DialogSaveLayerLatitude"></span>
				</label>
			</fieldset>
			<br>
			<label>Date and time:
				<span id="DialogSaveLayerTime"></span>
			</label>
			<fieldset>
				<legend>Observed properties:</legend>
				<label>Name:
					<span id="DialogSaveLayerVariable"></span>
				</label>
				<br>
				<span id="DialogSaveLayerVariableDescriptionUoM">
					<label>Description:
						<span id="DialogSaveLayerVariableDescription"></span>
					</label>
					<br>
					<label>Definition:
						<span id="DialogSaveLayerVariableDefinition"></span>
					</label>
					<br>
					<fieldset>
						<legend>Units of measurement:</legend>
						<label>Name:
							<span id="DialogSaveLayerVariableUoM"></span>
						</label>
						<br>
						<label>Symbol:
							<span id="DialogSaveLayerVariableUoMSymbol"></span>
						</label>
						<br>
						<label>Definition:
							<span id="DialogSaveLayerVariableUoMDefinition"></span>
						</label>
					</fieldset>
					<br>
				</span>
				<br>
				<label>Value:
					<span id="DialogSaveLayerValue"></span>
				</label>
			</fieldset>
			<br>
			<div class="center">
				<span id="DialogSaveLayerSave"></span>
				<button value="cancel" formmethod="dialog">Cancel</button>
			</div>
		</form>
	</dialog>

	<dialog id="DialogScatterPlot">
		<table border="0">
			<tr>
				<td>
					<span id="DialogScatterPlotTitle"></span>
					<form>
						<fieldset>
							<legend>Axes:</legend>
							<label>Axis x:
								<span id="DialogScatterPlotAxisX"></span>
							</label>
							<br>
							<label>Axis y:
								<span id="DialogScatterPlotAxisY"></span>
							</label>
						</fieldset>
						<br>
						<fieldset id="DialogScatterPlotVariableUoM">
							<legend>Title:</legend>
							<label>Variable name:
								<span id="DialogScatterPlotVariable"></span>
							</label>
							<br>
							<label>Units of measure:
								<span id="DialogScatterPlotUoM"></span>
							</label>
						</fieldset>
						<br>
						<div class="center">
							<button value="draw" onClick="DrawScatterPlot(event)">Draw</button>
							<button value="ok" onClick="CloseDialogScatterPlot(event)"
								formmethod="dialog">Close</button>
						</div>
					</form>
				</td>
				<td>
					<div id="DialogScatterPlotVisualization" style="width:600px; height:500px;"></div>
				</td>
			</tr>
		</table>
	</dialog>

	<dialog id="DialogOneValue">
		<span id="DialogOneValueTitle"></span>
		<form>
			<fieldset>
				<label>Variable:
					<span id="DialogOneValueVariable"></span>
				</label>
				<br>
				<label>Observation time:
					<span id="DialogOneValueTime"></span>
				</label>
				<br>
				<label>Refresh time:
					<input type="text" id="DialogOneValueRefreshPeriod" size="3" value="20"></input> seconds
				</label>
			</fieldset>
			<br>
			<div class="center">
				<button value="ok" onClick="PrepareRefreshOneValue(event)">Ok</button>
				<button value="ok" onClick="StopRefreshOneValue(event)">Stop refresh</button>
				<button value="cancel" onClick="CloseDialogOneValue(event)" formmethod="dialog">Close</button>
			</div>
		</form>
	</dialog>

	<dialog id="DialogUploadObservations">
		<div id="DialogUploadObservationsLoginFirst" style="display: none;">
			<form>
				To upload data in a STA server, you should Login first.<br>
				<div class="center">
					<button value="cancel" formmethod="dialog">Cancel</button>
				</div>
			</form>
		</div>
		<form id="DialogUploadObservationsForm">
			Upload table as STA observations
			<br>
			<label><input type="radio" name="DialogUploadObservationsRadio" id="DialogUploadObservationsObsPropsInARow"
					checked="checked"></input>Each row represents a feature of interest with several observed
				properties</label>
			<br>
			<label><input type="radio" name="DialogUploadObservationsRadio"
					id="DialogUploadObservationsObsPropsInAColumn" disabled></input>Several observed properties of the
				same feature in a single column and in multiple rows</label>
			<fieldset>
				<legend>Position:</legend>
				<label>Place description:
					<span id="DialogUploadObservationsPlace"></span>
				</label>
				<br>
				<label>Longitude:
					<span id="DialogUploadObservationsLongitude"></span>
				</label>
				<br>
				<label>Latitude:
					<span id="DialogUploadObservationsLatitude"></span>
				</label>
			</fieldset>
			<label>Date and time:
				<span id="DialogUploadObservationsTime"></span>
			</label>
			<br>
			<label>Sensor instance id or name:
				<span id="DialogUploadObservationsSensorName"></span>
			</label>
			<br>
			<label>Sensor reference or type:
				<span id="DialogUploadObservationsSensorType"></span>
			</label>
			<br>
			<label>STA service URL:
				<input type="text" id="DialogSTAUploadURLInput" size="100"></input>
			</label>
			<div class="center">
				<button value="ok" onClick="UploadObservationsSTAURL(event)" formmethod="dialog">Upload</button>
			</div>
		</form>
	</dialog>

	<!--h2 id="eventSpanHeading"></h2>
	<pre id="eventSpanContent"></pre-->

	<script type="text/javascript">
		"use strict"

		/*
			This file is part of TAPIS. TAPIS is a web page and a Javascript code
			that builds queries and explore the STAplus content, saves it as CSV or
			GeoJSON and connects with the MiraMon Map Browser. While the project is
			completely independent from the Orange data mining software, it has been
			inspired by its GUI. The general idea of the application is to be able
			to work with STA data as tables.

			The TAPIS client is free software under the terms of the MIT License

			Copyright (c) 2023 Joan MasÃ³

			Permission is hereby granted, free of charge, to any person obtaining a copy
			of this software and associated documentation files (the "Software"), to deal
			in the Software without restriction, including without limitation the rights
			to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
			copies of the Software, and to permit persons to whom the Software is
			furnished to do so, subject to the following conditions:

			The above copyright notice and this permission notice shall be included in all
			copies or substantial portions of the Software.

			THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
			IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
			FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
			AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
			LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
			OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
			SOFTWARE.

			The TAPIS can be updated from https://github.com/joanma747/tapis.

			Aquest codi JavaScript ha estat idea de Joan MasÃ³ Pau (joan maso at uab cat)
			dins del grup del MiraMon. MiraMon Ã©s un projecte del
			CREAF que elabora programari de Sistema d'InformaciÃ³ GeogrÃ fica
			i de TeledetecciÃ³ per a la visualitzaciÃ³, consulta, ediciÃ³ i anÃ lisi
			de mapes rÃ sters i vectorials. Aquest progamari programari inclou
			aplicacions d'escriptori i tambÃ© servidors i clients per Internet.
			No tots aquests productes sÃ³n gratuÃ¯ts o de codi obert.

			En particular, el TAPIS es distribueix sota els termes de la llicÃ¨ncia MIT.

			El TAPIS es pot actualitzar des de https://github.com/joanma747/tapis.
		*/

		var config;
		//var STAurl = "https://citiobs.demo.secure-dimensions.de/inaturalist/v1.1";
		//var STAurl="https://citiobs.demo.secure-dimensions.de/staplus/v1.1";
		//var MMNpath="../osm";

		const STAEntities = {
			ObservedProperties: { singular: "ObservedProperty", entities: ["Datastreams", "MultiDatastreams"], properties: ["name", "definition", "description", "properties"] },
			Observations: { singular: "Observation", entities: ["Datastream", "MultiDatastream", "FeatureOfInterest", "ObservationGroups", "Subjects", "Objects"], properties: ["phenomenonTime", "resultTime", "result", "resultQuality", "validTime", "parameters"] },
			FeaturesOfInterest: { singular: "FeatureOfInterest", entities: ["Observations"], properties: ["name", "description", "encodingType", "feature", "properties"] },
			Sensors: { singular: "Sensor", entities: ["Datastreams", "MultiDatastreams"], properties: ["name", "description", "encodingType", "metadata", "properties"] },
			Things: { singular: "Thing", entities: ["Datastreams", "MultiDatastreams", "Party", "Locations", "HistoricalLocations"], properties: ["name", "description", "properties"] },
			Locations: { singular: "Location", entities: ["Things", "HistoricalLocations"], properties: ["name", "description", "encodingType", "location", "properties"] },
			HistoricalLocations: { singular: "HistoricalLocation", entities: ["Things", "Location"], properties: ["time"] },
			Datastreams: { singular: "Datastream", entities: ["Party", "Sensor", "ObservedProperty", "Campaigns", "License", "Observations", "Thing"], properties: ["name", "description", "unitOfMeasurement", "observationType", "observedArea", "phenomenonTime", "resultTime", "properties"] },
			MultiDatastreams: { singular: "MultiDatastream", entities: ["Party", "Sensor", "ObservedProperties", "Campaigns", "License", "Observations", "Thing"], properties: ["name", "description", "unitOfMeasurements", "observationType", "observedArea", "phenomenonTime", "resultTime", "multiObservationDataTypes", "properties"] },
			Parties: { singular: "Party", entities: ["Datastreams", "MultiDatastreams", "Campaigns", "ObservationGroups", "Things"], properties: ["description", "authId", "role", "displayName"] },
			Campaigns: { singular: "Campaign", entities: ["Datastreams", "MultiDatastreams", "Party", "License"], properties: ["name", "description", "classification", "termsOfUse", "privacyPolicy", "creationTime", "startTime", "endTime", "url", "properties"] },
			Licenses: { singular: "License", entities: ["Datastreams", "MultiDatastreams", "Campaigns", "ObservationGroups"], properties: ["name", "description", "definition", "logo", "attributionText"] },
			ObservationGroups: { singular: "ObservationGroup", entities: ["Party", "Campaigns", "License", "Observations", "Relations"], properties: ["name", "description", "purpose", "creationTime", "endTime", "termsOfUsed", "privacyPolicy", "properties", "dataQuality"] },
			Relations: { singular: "Relation", entities: ["Object", "Subject", "ObservationGroups"], properties: ["role", "description", "externalObject", "properties"] }
		};
		const STAEntitiesArray = Object.keys(STAEntities);
		const STASpecialQueries = { ObsLayer: { description: "Observations Layer", query: "Observations?$orderby=phenomenonTime%20desc&$expand=Datastream($select=unitOfMeasurement),Datastream/ObservedProperty($select=name,description,definition),FeatureOfInterest($select=description,feature)&$select=phenomenonTime,result" } }
		const STASpecialQueriesArray = Object.keys(STASpecialQueries);
		const TableOperations = {
			ImportCSV: { description: "Import CSV file" },
			Table: { description: "View Table", leafNode: true },
			SelectColumnsSTA: { description: "Select Columns", callSTALoad: true },
			SelectRowsSTA: { description: "Select Rows", callSTALoad: true },
			SortBySTA: { description: "Sort by", callSTALoad: true },
			ViewQuerySTA: { description: "View Query", leafNode: true },
			UploadObservations: { description: "Upload in STA", leafNode: true },
			//UploadTimeAverages: {description: "Upload time averages", leafNode: true},
			SelectColumnsTable: { description: "Select Columns" },
			SelectRowsTable: { description: "Select Rows" },
			SeparateColumns: { description: "Separate Columns" },
			ScatterPlot: { description: "Scatter Plot", leafNode: true },
			OneValue: { description: "One Value", leafNode: true },
			SaveTable: { description: "Save Table", leafNode: true },
			SaveLayer: { description: "Save Layer", leafNode: true },
			OpenMap: { description: "Open Map", leafNode: true }
		};

		const TableOperationsArray = Object.keys(TableOperations);

		//If the two nodes cannot connect it returns null. It transforms a plural to singular if needed.
		function transformToSingularIfNeededSTAEntity(parentEntity, entityName) {
			//Determinino si ha de ser singular o plural
			for (var i = 0; i < parentEntity.entities.length; i++) {
				if (parentEntity.entities[i] == entityName)
					return entityName;
				else if (parentEntity.entities[i] == STAEntities[entityName].singular)
					return STAEntities[entityName].singular;
			}
			return null;
		}

		function getConnectionSTAEntity(parentNode, node) {
			var parentPlural, parentEntity;
			var idNode = IdOfSTAEntity(node);
			if (idNode == -1)
				return { error: "Parent node is not a STA entity" };
			var parentLastEntity = getSTAURLLastEntity(parentNode.STAURL);
			if (STAEntities[parentLastEntity]) {
				parentPlural = true;
				parentEntity = STAEntities[parentLastEntity];
			} else {
				for (var i = 0; i < STAEntitiesArray.length; i++) {
					if (STAEntities[STAEntitiesArray[i]].singular == parentLastEntity) {
						parentPlural = false;
						parentEntity = STAEntities[STAEntitiesArray[i]];
						break;
					}
				}
				if (i == parentEntity.entities.length)
					return { error: "Parent node is not a STA entity" };
			}

			var nextEntity = removeExtension(node.image);

			if (!STAEntities[nextEntity])
				return { error: "Child node is not a STA entity" };

			if (parentPlural) {
				if (null != getSTAURLSelectingARow(parentNode.STAURL)) {
					//Determinino si ha de ser singular o plural
					var entityName = transformToSingularIfNeededSTAEntity(parentEntity, nextEntity)
					if (entityName)
						return { entity: entityName };
					else
						return { error: "The node connection does not match the STA data model. Use one of the following: " + JSON.stringify(parentEntity.entities) };
				}
				else {
					//Is parentNode plural? Everything is incompatible
					return { error: "A plural parent node requires selecting a row before being connectable to another STA entity" };
				}
			}
			//else
			//Is parentNode singular?
			var entityName = transformToSingularIfNeededSTAEntity(parentEntity, nextEntity);
			if (entityName)
				return { entity: entityName };
			else
				return { error: "The node connection does not match the STA data model. Use one of the following: " + JSON.stringify(parentEntity.entities) };
		}

		//Return null if there is no reason (and there is a "fit").
		function reasonNodeDoesNotFitWithPrevious(node, parentNode) {
			if (parentNode.image == "ogc.png")
				return null;
			if (TableOperations[removeExtension(parentNode.image)] && TableOperations[removeExtension(parentNode.image)].leafNode == true)
				return "Parent node is a leaf node and cannot be connected with any other node";
			var idNode = IdOfSTAEntity(node);
			if (idNode < 0)
				return null;
			var getCon = getConnectionSTAEntity(parentNode, node)
			if (getCon.error)
				return getCon.error;
			return null;
		}


		window.onbeforeunload = function () { return "Your work will be lost."; }

		function showInfoMessage(msg) {
			var elem = document.getElementById("clarification");
			elem.innerHTML += (msg + "<br>");
			elem.scrollTop = elem.scrollHeight;  //https://stackoverflow.com/questions/11715646/scroll-automatically-to-the-bottom-of-the-page
		}

		function deapCopy(o) {
			return JSON.parse(JSON.stringify(o));
		}

		function getURLWithoutQueryParams(s) {
			var i = s.indexOf('?')
			if (i == -1)
				return s;
			return s.substring(0, i);
		}

		function getURLQueryParams(s) {
			var i = s.indexOf('?')
			if (i == -1)
				return "";
			return s.substring(i + 1);
		}


		//Returns the id of the selected resource in the last part of the path. So extracts in the "entities(id)" extracts the id
		function getSTAURLSelectingARow(url) {
			var s = getURLWithoutQueryParams(url);
			var i = (s.charAt(s.length - 1) == '/') ? s.length - 2 : s.length - 1

			if (s.charAt(i) != ')')
				return null;
			var ii = s.lastIndexOf('(');
			if (ii == -1)
				return null;
			if (ii > s.lastIndexOf('/') + 2) {
				var id = s.substring(ii + 1, i);
				if (id.charAt(0) == '\'' && id.charAt(id.length - 1) == '\'')
					return id.substring(1, id.length - 1);
				return id;
			}
			return null;
		}

		//Get the last entity of the path (without the filter or selection of a single entity by using (id))
		function getSTAURLLastEntity(url) {
			var s = getURLWithoutQueryParams(url);
			var i = (s.charAt(s.length - 1) == '/') ? s.length - 2 : s.length - 1

			if (s.charAt(i) != ')') {
				i = s.lastIndexOf('/')
				if (-1 != s)
					return s.substring(i + 1);
				return s;
			}
			i = s.lastIndexOf('(');
			if (i == -1)
				return s;
			var ii = s.lastIndexOf('/');
			if (i > ii + 2)
				return s.substring(ii + 1, i);
			return s.substring(ii + 1);
		}

		//from the MiraMon Map Browser DonaAdreca(s)
		function getAddressPath(s) {
			if (s.charAt(s.length - 1) == '/')
				return s;
			var i = s.lastIndexOf('/');
			if (i == -1)
				return "";
			return s.substring(0, i);
		}

		//from the MiraMon Map Browser DonaAdrecaAbsoluta(url)
		function getAbsoluteURL(url) {
			if (url.length > 8 && (url.substring(0, 7) == "http://" || url.substring(0, 8) == "https://"))
				return url;
			if (url.charAt(0) == "/")
				return location.protocol + "//" + location.host + url;
			return location.protocol + "//" + location.host + getAddressPath(location.pathname) + url;
		}

		function removeExtension(name) {
			var i = name.lastIndexOf(".");
			if (i == -1)
				return name;
			return name.substring(0, i);
		}


		function getLang() {
			if (navigator.languages != undefined)
				return navigator.languages[0];
			return navigator.language;
		}

		function removeExtraAmpersand(queryparams) {
			if (!queryparams)
				return queryparams;
			var s;
			if (queryparams.charAt(0) == '&') {
				s = queryparams.substring(1);
				if (!s)
					return s;
			}
			else
				s = queryparams;
			if (queryparams.charAt(s.length - 1) == '&')
				return s.substring(0, queryparams.length - 1);
			return s;
		}

		function AddKVPToURL(url, kvp) {
			kvp = removeExtraAmpersand(kvp);
			if (!kvp)
				return url;
			if (url.indexOf('?') == -1)
				return url + "?" + kvp;
			return url + "&" + kvp;
		}

		//https://stackoverflow.com/questions/50036922/change-a-css-stylesheets-selectors-properties/50036923#50036923
		function changeCSSStyle(selector, cssProp, cssVal) {
			var ssMain = 0;  //The first stylesheet
			var cssRules = (document.all) ? 'rules' : 'cssRules';

			for (var i = 0, len = document.styleSheets[ssMain][cssRules].length; i < len; i++) {
				if (document.styleSheets[ssMain][cssRules][i].selectorText === selector) {
					document.styleSheets[ssMain][cssRules][i].style[cssProp] = cssVal;
					return;
				}
			}
		}

		//Returns the protocol of a URL without the double slash
		function getProtocol(s) {
			var pos_barrabarra;
			if (-1 != (pos_barrabarra = s.indexOf("://")))
				return s.substring(0, pos_barrabarra + 1);
			return "";
		}

		var IdGPSPosition = 0;
		function InitGPSPosition() {
			if (navigator.geolocation)
				IdGPSPosition = navigator.geolocation.watchPosition(UpdateGPSPosition, ErrorGPSPosition, { enableHighAccuracy: true, maximumAge: 8000 });
			else {
				showInfoMessage("Geolocation not supported by the web browser");
				CancelGPSPosition();
			}
		}

		var PreviousGPSPoint = null;

		function CancelGPSPosition() {
			if (IdGPSPosition) {
				navigator.geolocation.clearWatch(IdGPSPosition);
				IdGPSPosition = 0;
			}
			PreviousGPSPoint = null;
		}

		var GPSPositionReported = false;
		function UpdateGPSPosition(position) {
			PreviousGPSPoint = { long: position.coords.longitude, lat: position.coords.latitude };
			if (!GPSPositionReported) {
				showInfoMessage("Geolocation is long: " + PreviousGPSPoint.long + " lat: " + PreviousGPSPoint.lat);
				GPSPositionReported = true;
			}
		}

		function ErrorGPSPosition(error) {
			switch (error.code) {
				case error.PERMISSION_DENIED:
					showInfoMessage("User denied request location.");
					CancelGPSPosition();
					break;
				case error.POSITION_UNAVAILABLE:
					showInfoMessage("Location information is unavailable.");
					CancelGPSPosition();
					break;
				case error.TIMEOUT:
					showInfoMessage("Request location timeOut.");
					CancelGPSPosition();
					break;
				case error.UNKNOWN_ERROR:
				default:
					showInfoMessage("Unknown error obtaining Location (" + error.code + ").");
					break;
			}
		}

		var currentNode = null, connectionInProcess = false, startingNodeContextId = null, startingEdgeContextId = null;

		function StartSTAPage() {

			var s_protocol = getProtocol(location.href);

			if (s_protocol && s_protocol.toLowerCase() != "https:")
				location.replace("https:" + location.href.substring(s_protocol.length));

			hello.init({ "authenix": "1cc09d67-8ce1-48c2-872a-6e2f03dba835" }, { redirect_uri: ((location.pathname.charAt(location.pathname.length - 1) == '/') ? location.pathname.substring(0, location.pathname.length - 1) : location.pathname) });

			UpdateConfiguration();

			InitSTAPage();  //promise
		}

		async function InitSTAPage() {
			var response = await HTTPJSONData("config.json");
			config = (response && response.obj) ? response.obj : null;
			if (!config) {
				showInfoMessage("Error loading \'config.json\'");
				return;
			}

			var s = "";
			for (var i = 0; i < STAEntitiesArray.length; i++)
				s += "<button onclick='addCircularImage(null, null, \"" + STAEntitiesArray[i] + "\", \"" + STAEntitiesArray[i] + ".png\");'><img src='" + STAEntitiesArray[i] + ".png' height='20' valign='middle'> " + STAEntitiesArray[i] + "</button> ";
			s += "<br>";

			for (var i = 0; i < STASpecialQueriesArray.length; i++)
				s += "<button onclick='addCircularImage(null, null, \"" + STASpecialQueriesArray[i] + "\", \"" + STASpecialQueriesArray[i] + ".png\");'><img src='" + STASpecialQueriesArray[i] + ".png' height='20' valign='middle'> " + STASpecialQueries[STASpecialQueriesArray[i]].description + "</button> ";
			s += "<br>";

			for (var i = 0; i < TableOperationsArray.length; i++)
				s += "<button onclick='addCircularImage(null, null, \"" + TableOperationsArray[i] + "\", \"" + TableOperationsArray[i] + ".png\");'><img src='" + TableOperationsArray[i] + ".png' height='20' valign='middle'> " + TableOperations[TableOperationsArray[i]].description + "</button> ";
			s += "<br>";

			document.getElementById("ButtonsSTAEntities").innerHTML = s;

			s = "";
			for (var i = 0; i < STAEntitiesArray.length; i++) {
				s += "<button onclick='addCircularImage(event, \"DialogContextMenu\", \"" + STAEntitiesArray[i] + "\", \"" + STAEntitiesArray[i] + ".png\");'><img src='" + STAEntitiesArray[i] + ".png' height='20' valign='middle'> " + STAEntitiesArray[i] + "</button>";
				s += i % 2 || i == STAEntitiesArray.length - 1 ? "<br>" : " ";
			}
			s += "<br>";
			for (var i = 0; i < STASpecialQueriesArray.length; i++) {
				s += "<button onclick='addCircularImage(event, \"DialogContextMenu\", \"" + STASpecialQueriesArray[i] + "\", \"" + STASpecialQueriesArray[i] + ".png\");'><img src='" + STASpecialQueriesArray[i] + ".png' height='20' valign='middle'> " + STASpecialQueries[STASpecialQueriesArray[i]].description + "</button>";
				s += i % 2 || i == STASpecialQueriesArray.length - 1 ? "<br>" : " ";
			}
			s += "<br>";
			for (var i = 0; i < TableOperationsArray.length; i++) {
				s += "<button onclick='addCircularImage(event, \"DialogContextMenu\", \"" + TableOperationsArray[i] + "\", \"" + TableOperationsArray[i] + ".png\");'><img src='" + TableOperationsArray[i] + ".png' height='20' valign='middle'> " + TableOperations[TableOperationsArray[i]].description + "</button>";
				s += i % 2 || i == TableOperationsArray.length - 1 ? "<br>" : " ";
			}

			document.getElementById("ButtonsContextMenuObjects").innerHTML = s;
		}

		function eliminarParamContentType(contentType) {
			var i = contentType.indexOf(';')
			if (i < 0)
				return contentType;
			else
				return contentType.substring(0, i);
		}

		function AddHeadersIfNeeded(options) {
			if (CriptoName &&
				hello("authenix").getAuthResponse() &&
				hello("authenix").getAuthResponse().access_token) {
				if (!options.headers)
					options.headers = {};
				options.headers['Authorization'] = 'Bearer ' + hello("authenix").getAuthResponse().access_token;
			}
			if (PreviousGPSPoint) {
				if (!options.headers)
					options.headers = {};
				options.headers['Geolocation'] = 'geo:' + PreviousGPSPoint.lat + ',' + PreviousGPSPoint.long;
			}
		}

		//https://web.dev/fetch-api-error-handling/
		async function HTTPJSONData(url, headersToGet, method, obj) {
			var response, jsonData, options = {};
			try {
				if (method)
					options.method = method;
				options.headers = { 'Accept': 'application/json, */*;q=0.8' };

				AddHeadersIfNeeded(options);
				if (obj) {
					options.headers['Content-Type'] = 'application/json';
					options.body = JSON.stringify(obj);
				}
				response = await fetch(url, options);
			}
			catch (error) {
				showInfoMessage('There was an error with ' + url + ": " + error.message);
				console.log('There was an error', error);
				return;
			}
			// Uses the 'optional chaining' operator
			if (!(response?.ok)) {
				showInfoMessage("HTTP Response Code: " + response?.status + " reading <small>" + url + "</small>: " + response?.statusText);
				console.log("HTTP Response Code: " + response?.status + ": " + response?.statusText);
				return;
			}
			try {
				var headersObj = {};
				if (headersToGet) {
					for (var i = 0; i < headersToGet.length; i++)
						headersObj[headersToGet[i]] = response.headers.get(headersToGet[i]);
					//Enumetates all headers: for(let entry of response.headers.entries()) console.log(entry) })
				}
				if (eliminarParamContentType(response.headers.get('Content-Type')) == "application/json" &&
					(response.headers.get('Content-Length') == null || parseInt(response.headers.get('Content-Length')) > 0))
					return { obj: await response.json(), responseHeaders: headersObj };
				else
					return { obj: null, text: await response.text(), responseHeaders: headersObj };
			} catch (error) {
				if (error instanceof SyntaxError) {
					showInfoMessage('Syntax error reading ' + url + ": " + error.message);
					console.log('There was a SyntaxError', error);
					return;
				}
				else {
					showInfoMessage('Error interpreting ' + url + ": " + error.message);
					console.log('There was an error', error);
					return;
				}
			}
		}

		async function LoadJSONNodeSTAData(node, callback, url) {
			var response, jsonData, options = {};
			try {
				var url_fetch;
				if (url)
					url_fetch = url;
				else if (typeof node.STAExpectedLength === "undefined")
					url_fetch = node.STAURL;
				else
					url_fetch = AddKVPToURL(node.STAURL, "$top=" + node.STAExpectedLength);

				AddHeadersIfNeeded(options);

				if (options.headers)
					response = await fetch(url_fetch, options);
				else
					response = await fetch(url_fetch);
			}
			catch (error) {
				showInfoMessage('There was an error with ' + node.STAURL + ": " + error.message);
				console.log('There was an error', error);
				node.STAdata = null;
				networkNodes.update(node);
				return;
			}
			// Uses the 'optional chaining' operator
			if (!(response?.ok)) {
				showInfoMessage("HTTP Response Code: " + response?.status + " reading <small>" + node.STAURL + "</small>: " + response?.statusText);
				console.log("HTTP Response Code: " + response?.status + ": " + response?.statusText);
				node.STAdata = null;
				networkNodes.update(node);
				return;
			}
			try {
				jsonData = await response.json();
			} catch (error) {
				if (error instanceof SyntaxError) {
					showInfoMessage('Syntax error reading ' + node.STAURL + ": " + error.message);
					console.log('There was a SyntaxError', error);
					node.STAdata = null;
					networkNodes.update(node);
					return;
				}
				else {
					showInfoMessage('Error interpreting ' + node.STAURL + ": " + error.message);
					console.log('There was an error', error);
					node.STAdata = null;
					networkNodes.update(node);
					return;
				}
			}
			if (url && typeof node.STAExpectedLength !== "undefined") {
				node.STAdata = node.STAdata.concat(jsonData.value);
				if (node.STAdata.length > node.STAExpectedLength)  //too much data. Trucating
					node.STAdata.length = node.STAExpectedLength;
			}
			else
				node.STAdata = (typeof jsonData.value !== "undefined") ? jsonData.value : [jsonData];
			networkNodes.update(node);
			if (jsonData.value && node.STAExpectedLength && node.STAdata.length < node.STAExpectedLength && jsonData["@iot.nextLink"])
				await LoadJSONNodeSTAData(node, callback, jsonData["@iot.nextLink"]);
			else {
				showInfoMessage("Completed.");
				await UpdateChildenLoadJSONCallback(node);
				if (callback)
					callback(node);  //The callback function is never used yet.
			}
		}

		var savedFile = null;

		function MakeHrefData(data, mediatype) {
			var blobData = new Blob([data], { type: mediatype });

			// If we are replacing a previously generated file we need to
			// manually revoke the object URL to avoid memory leaks.
			if (savedFile !== null)
				window.URL.revokeObjectURL(savedFile);

			savedFile = window.URL.createObjectURL(blobData);
			return savedFile;
		}

		function ReadFileImportCSVW(event) {
			var input = event.target;

			var reader = new FileReader();
			reader.onload = function () {
				//Transform the JSON text in something in memory
				try {
					var data_csvw = JSON.parse(reader.result);
					//document.getElementById("DialogImportCSVdataAttributes").value=JSON.stringify(getDataAttributesCSVW(data_csvw));
					currentNode.STAdataAttributes = getDataAttributesCSVW(data_csvw);
					networkNodes.update(currentNode);
					var csvReadParams = getCSVReadParams(data_csvw);
					if (csvReadParams.delimiter)
						document.getElementById("DialogImportCSVDelimiter").value = csvReadParams.delimiter;
					if (csvReadParams.header)
						document.getElementById("DialogImportCSVHeader").checked = csvReadParams.header;
				}
				catch (e) {
					showInfoMessage("JSON message parse error: " + e + " The file content is:\n" + reader.result);
					currentNode.STAdata = null;
					networkNodes.update(currentNode);
					return;
				}
			};
			reader.readAsText(input.files[0]);
		}

		function ReadFileImportCSV(event) {
			var input = event.target;

			var reader = new FileReader();
			reader.onload = function () {
				//Transform the JSON text in something in memory
				try {
					var result = Papa.parse(reader.result, {
						delimiter: (document.getElementById("DialogImportCSVDelimiterText").checked ? document.getElementById("DialogImportCSVDelimiter").value : '\t'),
						header: document.getElementById("DialogImportCSVHeader").checked,
						skipEmptyLines: true
					});
					//if (document.getElementById("DialogImportCSVHeader").checked)
					currentNode.STAdata = result.data;
					networkNodes.update(currentNode);
				}
				catch (e) {
					showInfoMessage("JSON message parse error: " + e + " The file content is:\n" + reader.result);
					currentNode.STAdata = null;
					networkNodes.update(currentNode);
					return;
				}
			};
			reader.readAsText(input.files[0]);
		}

		function SaveLocalDataFile(data, fileName, extension, mediatype)   //Saves a memory data structure to a local file
		{
			const link = document.createElement('a');
			if (fileName.substring(fileName.length - extension.length) != extension)
				fileName += extension;
			link.setAttribute('download', fileName);
			link.setAttribute('href', MakeHrefData(data));
			document.body.appendChild(link);

			// wait for the link to be added to the document
			window.requestAnimationFrame(function () {
				var event = new MouseEvent('click');
				link.dispatchEvent(event);
				document.body.removeChild(link);
			});

			return false;
		}

		function OpenConfiguration(event) {
			document.getElementById("DialogConfiguration").showModal();
		}

		// Helper function to parse the JWT token
		function parseJwt(token) {
			var payload = token.split(".")[1];
			var base64 = payload.replace(/-/g, "+").replace(/_/g, "/");
			return JSON.parse(atob(base64));
		};

		var CriptoName = null;
		document.getElementById("UserInfoText").innerHTML = "";
		function OpenLogin(event) {
			hello("authenix").login({ redirect_uri: location.pathname, lang: getLang(), scope: "openid profile idp citiobs.secd.eu%23read citiobs.secd.eu%23create citiobs.secd.eu%23update citiobs.secd.eu%23delete", display: "popup" }).then(
				function (success) {
					document.getElementById("buttonOpenLogin").style.display = "none";
					document.getElementById("buttonOpenLogout").style.display = "inline-block";
					var jwt_elems = parseJwt(success.authResponse.id_token)
					CriptoName = jwt_elems.sub;
					if (!CriptoName)
						CriptoName == "Anonymous"
					document.getElementById("UserInfoText").innerHTML = jwt_elems.preferred_username + " at " + jwt_elems.idp_name;
				},
				function (e) {
					alert("Signin error: " + e.error.message);
					document.getElementById("UserInfoText").innerHTML = "";
					CriptoName = null;
				}
			);
		}

		function OpenLogout(event) {
			hello("authenix").logout({ force: true }).then(
				function (success) {
					document.getElementById("buttonOpenLogin").style.display = "inline-block";
					document.getElementById("buttonOpenLogout").style.display = "none";
					alert("Signed out from" + " " + "authenix" + ". ");
					document.getElementById("UserInfoText").innerHTML = "";
					CriptoName = null;
				}, function (e) {
					alert("Signed out error: " + e.error.message);
					document.getElementById("UserInfoText").innerHTML = "";
					CriptoName = null;
				});
		}

		function UpdateConfiguration() {
			changeCSSStyle(".tablesmall", 'font-size', document.getElementById("DialogConfigurationFontSize").value / 100 + "em");

			if (document.getElementById("DialogConfigurationDivSideBySide").checked) {
				document.getElementById("mynetwork").style.float = "left";
				document.getElementById("mynetwork").style.width = "59.4%";
				document.getElementById("mynetwork").style.height = "400px";
				document.getElementById("clarification").style.float = "left";
				document.getElementById("clarification").style.width = "39.5%";
				document.getElementById("clarification").style.marginLeft = "0.2%";
				document.getElementById("clarification").style.height = "400px";
			} else {
				document.getElementById("mynetwork").style.float = "left";
				document.getElementById("mynetwork").style.width = "100%";
				document.getElementById("mynetwork").style.height = "700px";
				document.getElementById("clarification").style.float = "left";
				document.getElementById("clarification").style.width = "100%";
				document.getElementById("clarification").style.marginLeft = "0";
				document.getElementById("clarification").style.height = "400px";
			}
			if (document.getElementById("DialogConfigurationAddGeolocationHeader").checked)
				InitGPSPosition();
			else
				CancelGPSPosition();
		}

		function ChangeConfiguration(event) {
			event.preventDefault(); // We don't want to submit this form
			document.getElementById("DialogConfiguration").close(document.getElementById("DialogConfigurationFontSize").value);
			UpdateConfiguration();
		}

		function GetSTAURLEvent(event) {
			event.preventDefault(); // We don't want to submit this form
			document.getElementById("DialogSTAURL").close(document.getElementById("DialogSTAURLInput").value);

			if (currentNode.STAURL == document.getElementById("DialogSTAURLInput").value)
				return;
			var previousSTAURL = currentNode.STAURL;
			currentNode.STAURL = document.getElementById("DialogSTAURLInput").value; // Have to send the select box value here.
			if (currentNode.STAURL.charAt(currentNode.STAURL.length - 1) == '/')
				currentNode.STAURL = currentNode.STAURL.slice(0, -1);  //remove last character
			networkNodes.update(currentNode);	//https://visjs.github.io/vis-data/data/dataset.html#Data_Manipulation

			//if childen nodes have also STAURL
			UpdateChildenSTAURL(currentNode, currentNode.STAURL, previousSTAURL);
			LoadJSONNodeSTAData(currentNode);
		}

		function ShowUploadObservationsDialog(node) {
			if (CriptoName &&
				hello("authenix").getAuthResponse() &&
				hello("authenix").getAuthResponse().access_token) {
				document.getElementById("DialogUploadObservationsLoginFirst").style.display = "none";
				document.getElementById("DialogUploadObservationsForm").style.display = "inline-block";
				document.getElementById("DialogSTAUploadURLInput").value = node.STAURL ? node.STAURL : config.STAurl;
				ShowUploadObservationsSelects(node);
			}
			else {
				document.getElementById("DialogUploadObservationsLoginFirst").style.display = "inline-block";
				document.getElementById("DialogUploadObservationsForm").style.display = "none";
			}
		}

		function GetFirstParentNode(node) {
			var nodeids = network.getConnectedNodes(node.id, "from");
			if (nodeids && nodeids.length && networkNodes.get(nodeids[0]))
				return networkNodes.get(nodeids[0]);
			return null;
		}

		function GetParentNodes(node) {
			var nodeids = network.getConnectedNodes(node.id, "from");
			if (nodeids && nodeids.length) {
				var nodes = [];
				for (var i = 0; i < nodeids.length; i++)
					nodes[i] = networkNodes.get(nodeids[i]);
				return nodes;
			}
			return null;
		}

		function ShowUploadObservationsSelects(node) {
			var parentNode = GetFirstParentNode(node)
			if (parentNode) {
				var data = parentNode.STAdata;
				var dataAttributes = parentNode.STAdataAttributes ? parentNode.STAdataAttributes : getDataAttributes(data);
				PopulateSelectSaveLayerDialog("DialogUploadObservationsPlace", dataAttributes, "place");
				PopulateSelectSaveLayerDialog("DialogUploadObservationsLongitude", dataAttributes, "long");
				PopulateSelectSaveLayerDialog("DialogUploadObservationsLatitude", dataAttributes, "lat");
				PopulateSelectSaveLayerDialog("DialogUploadObservationsTime", dataAttributes, "phenomenonTime");
				PopulateSelectSaveLayerDialog("DialogUploadObservationsSensorName", dataAttributes, "sensor_id");
				PopulateSelectSaveLayerDialog("DialogUploadObservationsSensorType", dataAttributes, "sensor_type");
			}
		}

		function GetSelectedOptionsUploadObservations() {
			var selectedOptions = {};
			selectedOptions.place = document.getElementById("DialogUploadObservationsPlaceSelect").value;
			selectedOptions.longitude = document.getElementById("DialogUploadObservationsLongitudeSelect").value;
			selectedOptions.latitude = document.getElementById("DialogUploadObservationsLatitudeSelect").value;
			selectedOptions.time = document.getElementById("DialogUploadObservationsTimeSelect").value;
			selectedOptions.sensorName = document.getElementById("DialogUploadObservationsSensorNameSelect").value;
			selectedOptions.sensorType = document.getElementById("DialogUploadObservationsSensorTypeSelect").value;

			/*selectedOptions.variable=document.getElementById("DialogSaveLayerVariableSelect").value;
			if (descripUoM){
				selectedOptions.variableDescription=document.getElementById("DialogSaveLayerVariableDescriptionSelect").value;
				selectedOptions.variableDefinition=document.getElementById("DialogSaveLayerVariableDefinitionSelect").value;
				selectedOptions.variableUoM=document.getElementById("DialogSaveLayerVariableUoMSelect").value;
				selectedOptions.variableUoMSymbol=document.getElementById("DialogSaveLayerVariableUoMSymbolSelect").value;
				selectedOptions.variableUoMDefinition=document.getElementById("DialogSaveLayerVariableUoMDefinitionSelect").value;
			}
			selectedOptions.value=document.getElementById("DialogSaveLayerValueSelect").value;*/
			return selectedOptions;
		}

		function ShowScatterPlotDialog(parentNodes) {
			var data = parentNodes[0].STAdata;
			if (!data || !data.length) {
				document.getElementById("DialogScatterPlotTitle").innerHTML = "No data to show.";
				return;
			}
			document.getElementById("DialogScatterPlotTitle").innerHTML = "Scatter Plot";

			var dataAttributes = parentNodes[0].STAdataAttributes ? parentNodes[0].STAdataAttributes : getDataAttributes(data);
			PopulateSelectSaveLayerDialog("DialogScatterPlotAxisX", dataAttributes, "phenomenonTime");
			PopulateSelectSaveLayerDialog("DialogScatterPlotAxisY", dataAttributes, "result");
		}

		function AdaptValueAxisY(value) {
			return '' + value.toPrecision(5);
		}

		var ScatterPlotGraph2d = null;
		function DrawScatterPlot(event) {
			event.preventDefault(); // We don't want to submit this form
			var selectedOptions = {};
			selectedOptions.AxisX = document.getElementById("DialogScatterPlotAxisXSelect").value;
			selectedOptions.AxisY = document.getElementById("DialogScatterPlotAxisYSelect").value;
			if (document.getElementById("DialogScatterPlotVariableUoM").style.display != "none") {
				selectedOptions.Variable = document.getElementById("DialogScatterPlotVariableSelect").value;
				selectedOptions.UoM = document.getElementById("DialogScatterPlotUoMSelect").value;
			}

			var nodes = GetParentNodes(currentNode);
			if (nodes && nodes.length) {
				var node = nodes[0];
				var data, dataAttributes, record;
				if (node.STAURL) {
					var items = [], minx, maxx, miny, maxy;
					data = node.STAdata;
					dataAttributes = node.STAdataAttributes ? node.STAdataAttributes : getDataAttributes(data);

					if (ScatterPlotGraph2d)
						ScatterPlotGraph2d.destroy();
					for (var i = 0; i < data.length; i++) {
						record = data[i];
						if (i == 0) {
							minx = maxx = record[selectedOptions.AxisX];
							miny = maxy = record[selectedOptions.AxisY];
						} else {
							if (minx > record[selectedOptions.AxisX])
								minx = record[selectedOptions.AxisX];
							if (maxx < record[selectedOptions.AxisX])
								maxx = record[selectedOptions.AxisX];
							if (miny > record[selectedOptions.AxisY])
								miny = record[selectedOptions.AxisY];
							if (maxy < record[selectedOptions.AxisY])
								maxy = record[selectedOptions.AxisY];
						}
						items.push({ x: record[selectedOptions.AxisX], y: record[selectedOptions.AxisY], group: 0 })
					}
					var dataset = new vis.DataSet(items);
					var groups = new vis.DataSet();
					var options = {
						dataAxis: { left: { range: { min: miny - (maxy - miny) * 0.025, max: maxy + (maxy - miny) * 0.025 }, title: { text: "Values" }, format: AdaptValueAxisY } },
						drawPoints: { size: 1 },
						legend: { left: { position: "bottom-left" } },
						start: minx,
						end: maxx
					};
					var title = "Results";

					if (nodes.length > 1 && nodes[1].STAURL) {
						node = nodes[1];
						data = node.STAdata;
						if (data.length)
							record = data[0];
						if (record[selectedOptions.Variable])
							title = record[selectedOptions.Variable];
						if (record[selectedOptions.UoM])
							title += " (" + record[selectedOptions.UoM] + ")";
					}
					groups.add({
						id: 0,
						content: title,
						interpolation: {
							parametrization: 'chordal'
						}
					});
					ScatterPlotGraph2d = new vis.Graph2d(document.getElementById('DialogScatterPlotVisualization'), dataset, groups, options);
				}
			}
		}

		function CloseDialogScatterPlot(event) {
			event.preventDefault(); // We don't want to submit this form
			document.getElementById("DialogScatterPlot").close();
		}


		function ShowOneValueDialog(currentNode) {
			var parentNode = GetFirstParentNode(currentNode);
			if (!parentNode)
				return;
			var data = parentNode.STAdata;

			if (!data || !data.length) {
				document.getElementById("DialogOneValueTitle").innerHTML = "No data to show.";
				return;
			}
			document.getElementById("DialogOneValueTitle").innerHTML = "Select value to see the last value";

			startingNodeContextId = currentNode.id;
			var dataAttributes = parentNode.STAdataAttributes ? parentNode.STAdataAttributes : getDataAttributes(data);
			PopulateSelectSaveLayerDialog("DialogOneValueVariable", dataAttributes, currentNode.STAvariable ? currentNode.STAvariable : "result");
			PopulateSelectSaveLayerDialog("DialogOneValueTime", dataAttributes, currentNode.STAtimeVariable ? currentNode.STAtimeVariable : "phenomenonTime");
			if (currentNode.STAredrawPeriod)
				document.getElementById("DialogOneValueRefreshPeriod").value = currentNode.STAredrawPeriod;
		}

		function PrepareRefreshOneValue(event) {
			event.preventDefault(); // We don't want to submit this form
			document.getElementById("DialogOneValue").close();

			var node = networkNodes.get(startingNodeContextId);
			if (!node)
				return;
			startingNodeContextId = null;
			if (node.STAtimeOut) {
				clearTimeout(node.STAtimeOut);
				node.STAtimeOut = null;
			}
			node.STAvariable = document.getElementById("DialogOneValueVariableSelect").value;
			node.STAtimeVariable = document.getElementById("DialogOneValueTimeSelect").value;
			node.STAredrawPeriod = document.getElementById("DialogOneValueRefreshPeriod").value;
			networkNodes.update(currentNode);

			RequestLastObservationAndRefreshOneValue(node, node.STAvariable, node.STAtimeVariable, node.STAredrawPeriod);
		}

		function StopRefreshOneValue(event) {
			event.preventDefault(); // We don't want to submit this form
			document.getElementById("DialogOneValue").close();

			var node = networkNodes.get(startingNodeContextId);
			if (!node)
				return;
			if (node.STAtimeOut) {
				clearTimeout(node.STAtimeOut);
				showInfoMessage("Refresh cancelled.");
			}
		}


		function getTimeISOTime(isodatetime) {
			var d = new Date(isodatetime);
			return d.getHours() + ":" + (d.getMinutes() < 10 ? "0" : "") + d.getMinutes() + ":" + (d.getSeconds() < 10 ? "0" : "") + d.getSeconds();
		}

		async function RequestLastObservationAndRefreshOneValue(currentNode, variable, timeVariable, period) {
			var parentNode = GetFirstParentNode(currentNode);
			if (!parentNode)
				return;
			//var dataAttributes = parentNode.STAdataAttributes ? parentNode.STAdataAttributes : getDataAttributes(parentNode.STAdata);
			currentNode.STAURL = AddKVPToURL(parentNode.STAURL, "$orderby=" + timeVariable + " desc");
			if (removeExtension(parentNode.image) == "Observations")
				currentNode.STAURL = AddKVPToURL(currentNode.STAURL, "$expand=Datastream")
			currentNode.STAExpectedLength = 1;
			networkNodes.update(currentNode);
			showInfoMessage("Getting the last observation...");
			await LoadJSONNodeSTAData(currentNode);

			//Redraw the label

			var data = currentNode.STAdata;
			if (!data || data.length < 1)
				return;

			if (typeof data[0][variable] === "number")
				currentNode.label = data[0][variable].toString();
			else if (typeof data[0][variable] === "object")
				currentNode.label = JSON.stringify(data[0][variable]);
			else
				currentNode.label = data[0][variable];
			if (data[0]["Datastream"] && data[0]["Datastream"]?.unitOfMeasurement?.symbol)
				currentNode.label += data[0]["Datastream"].unitOfMeasurement.symbol;

			currentNode.label += " (" + getTimeISOTime(data[0][timeVariable]) + ")";

			//Redraw
			showInfoMessage(currentNode.label + ". Waiting " + period + " seconds ...");
			currentNode.STAtimeOut = setTimeout(RequestLastObservationAndRefreshOneValue, period * 1000, currentNode, variable, timeVariable, period);
			networkNodes.update(currentNode);
		}

		function CloseDialogOneValue(event) {
			event.preventDefault(); // We don't want to submit this form
			document.getElementById("DialogOneValue").close();
		}


		//From iNat2STA
		function ExtractIdFromURL(url) {
			var id;
			if (!url && url !== 0)
				return;
			if (-1 != url.indexOf("('") && -1 != url.indexOf("')", url.indexOf("('") + 2)) {
				id = url.substring(url.indexOf("('") + 2, url.indexOf("')", url.indexOf("('") + 2));
				if (id == +id)  //Is it a numerical id?  /inspired in https://stackoverflow.com/questions/20169217/how-to-write-isnumber-in-javascript
					return +id;  //returns a number
				return id;  //returns a string
			}
			if (-1 != url.indexOf("(") && -1 != url.indexOf(")", url.indexOf("(") + 1)) {
				id = url.substring(url.indexOf("(") + 1, url.indexOf(")", url.indexOf("(") + 1));
				return +id;  //returns a number
			}
			else
				return url;
		}

		function AddKeysToFilter(url, obj, prefix) {
			var objArray = Object.keys(obj);
			for (var i = 0; i < objArray.length; i++) {
				if (typeof obj[objArray[i]] === "object") {
					if (objArray[i] == "feature")
						url += (url == "" ? "" : " and ") + "st_equals(feature, geography'POINT (" + obj[objArray[i]].geometry.coordinates[0] + " " + obj[objArray[i]].geometry.coordinates[1] + ")')";
					else
						url = AddKeysToFilter(url, obj[objArray[i]], prefix ? prefix + "/" + objArray[i] : objArray[i]);
				}
				else if (objArray[i] == "encodingType")
					continue;  //I'm ignoring this element in the queries.
				else {
					url += (url == "" ? "" : " and ") + (prefix ? prefix + "/" : "") + objArray[i] + " eq ";
					if (typeof obj[objArray[i]] === "number" || objArray[i] == "resultTime" || objArray[i] == "phenomenonTime")
						url += obj[objArray[i]];
					else
						url += "'" + obj[objArray[i]] + "'";
				}
			}
			return url;
		}

		async function GetObjectId(url, objsName, obj) {
			var response = await HTTPJSONData(url + "/" + objsName + "?$filter=" + encodeURIComponent(AddKeysToFilter("", obj)));
			var data = (response && response.obj) ? response.obj : null;
			if (data && data.value && data.value.length)
				return data.value[0]["@iot.id"];
			else {
				//Not found. I'm creating it.
				var response = await HTTPJSONData(url + "/" + objsName, ['Location'], 'POST', obj);
				return ExtractIdFromURL(response.responseHeaders['Location']);
			}
		}

		async function GetPartyId(url, authId) {
			return GetObjectId(url, "Parties", {
				"authId": authId,
				//"displayName": authId,  //It might change soon to "description"
				//"description": null,
				role: "individual"
			});
		}

		async function GetObservedPropertyId(url, name, description, definition) {
			return GetObjectId(url, "ObservedProperties", {
				"name": name,
				"description": description,
				"definition": definition
			});
		}
		async function GetSensorId(url, name, description, metadata) {
			return GetObjectId(url, "Sensors", {
				"name": "Sensor for measuring " + name.charAt(0).toLowerCase() + name.substring(1),
				"description": "Sensor for measuring " + description.charAt(0).toLowerCase() + description.substring(1),
				"encodingType": "text/html",
				"metadata": metadata
			});
		}

		async function GetThingId(url, partyId, name, description) {
			return GetObjectId(url, "Things", {
				"name": "Platform that measures " + name.charAt(0).toLowerCase() + name.substring(1),
				"description": "Platform that measures " + description.charAt(0).toLowerCase() + description.substring(1),
				"Party": { "@iot.id": partyId }
			});
		}


		async function GetDatastreamId(url, partyId, obsPropId, sensorId, thingId, name, description, UoM, UoMSymbol, UoMDefinition) {
			return GetObjectId(url, "Datastreams", {
				"unitOfMeasurement": {
					"name": UoM,
					"symbol": UoMSymbol,
					"definition": UoMDefinition
				},
				"observationType": "http://www.opengis.net/def/observationType/OGC-OM/2.0/OM_Measurement",
				"name": name,
				"description": description,
				"ObservedProperty": { "@iot.id": obsPropId },
				"Sensor": { "@iot.id": sensorId },
				"Thing": { "@iot.id": thingId },
				"Party": { "@iot.id": partyId }
			});
		}

		async function GetFeatureOfInterestId(url, place, longitude, latitude) {
			return GetObjectId(url, "FeaturesOfInterest", {
				"name": place,
				"description": place,
				"encodingType": "application/geo+json",
				"feature": {
					"type": "Feature",
					"geometry": {
						"type": "Point",
						"coordinates": [longitude, latitude]
					}
				}
			});
		}

		async function GetObservationId(url, datastreamId, FoIId, time, result) {
			var d = new Date(time);
			var t = d.toISOString();

			return GetObjectId(url, "Observations", {
				"result": result,
				"resultTime": t,
				"phenomenonTime": t,
				"FeatureOfInterest": { "@iot.id": FoIId },
				"Datastream": { "@iot.id": datastreamId }
			});
		}

		function getUrlToId(url, objsName, id) {
			return url + "/" + objsName + "(" + (typeof id === "number" ? "" : "'") + id + (typeof id === "number" ? "" : "'") + ")";
		}

		async function UploadObservationsSTA(url, data, dataAttributes, selectedOptions) {
			var record, obsPropId, sensorId, partyId, thingId, datastreamIds = [];
			var dataAttributesArray = Object.keys(dataAttributes);

			partyId = await GetPartyId(url, CriptoName);
			if (!partyId && partyId !== 0)
				return;
			record = data[0];  //to be able to extract a constant value (the sensor name)
			for (var i = 0; i < dataAttributesArray.length; i++) {
				if (dataAttributesArray[i] == selectedOptions.place ||
					dataAttributesArray[i] == selectedOptions.longitude ||
					dataAttributesArray[i] == selectedOptions.latitude ||
					dataAttributesArray[i] == selectedOptions.time ||
					dataAttributesArray[i] == selectedOptions.sensorName ||
					dataAttributesArray[i] == selectedOptions.sensorType)
					continue;
				if (!dataAttributes[dataAttributesArray[i]].description ||
					!dataAttributes[dataAttributesArray[i]].definition) {
					datastreamIds[i] = null;
					continue;
				}
				obsPropId = await GetObservedPropertyId(url, dataAttributesArray[i], dataAttributes[dataAttributesArray[i]].description, dataAttributes[dataAttributesArray[i]].definition);
				if (!obsPropId && obsPropId !== 0)
					return;
				sensorId = await GetSensorId(url, dataAttributesArray[i], (selectedOptions.sensorType && record[selectedOptions.sensorType]) ? record[selectedOptions.sensorType] : dataAttributes[dataAttributesArray[i]].description, dataAttributes[dataAttributesArray[i]].definition);
				if (!sensorId && sensorId !== 0)
					return;

				thingId = await GetThingId(url, partyId, dataAttributesArray[i], (selectedOptions.sensorName && record[selectedOptions.sensorName]) ? record[selectedOptions.sensorName] : dataAttributes[dataAttributesArray[i]].description);
				if (!thingId && thingId !== 0)
					return;

				datastreamIds[i] = await GetDatastreamId(url, partyId, obsPropId, sensorId, thingId, dataAttributesArray[i], dataAttributes[dataAttributesArray[i]].description, dataAttributes[dataAttributesArray[i]].UoM, dataAttributes[dataAttributesArray[i]].UoMSymbol, dataAttributes[dataAttributesArray[i]].UoMDefinition);
				if (!datastreamIds[i] && datastreamIds[i] !== 0)
					return;
				showInfoMessage("Datastream <a href='" + getUrlToId(url, "Datastreams", datastreamIds[i]) + "' target='_blank'>" + datastreamIds[i] + "</a> available in STA");
			}
			for (var i = 0; i < data.length; i++) {
				record = data[i];
				var FoIId = await GetFeatureOfInterestId(url, record[selectedOptions.place], record[selectedOptions.longitude], record[selectedOptions.latitude]);
				if (!FoIId && FoIId !== 0)
					return;
				var keys = Object.keys(data[i]);
				for (var k = 0; k < keys.length; k++) {
					if (keys[k] == selectedOptions.place ||
						keys[k] == selectedOptions.longitude ||
						keys[k] == selectedOptions.latitude ||
						keys[k] == selectedOptions.time)
						continue;
					if (!datastreamIds[k])
						continue;

					var observationId = await GetObservationId(url, datastreamIds[k], FoIId, record[selectedOptions.time], record[keys[k]]);
					if (!observationId && observationId !== 0)
						return;
					showInfoMessage("Observation <a href='" + getUrlToId(url, "Observations", observationId) + "' target='_blank'>" + observationId + "</a> available in STA under Datastream <a href='" + getUrlToId(url, "Datastreams", datastreamIds[k]) + "' target='_blank'>" + datastreamIds[k] + "</a>");
				}
			}
			return;  //value
		}

		function UploadObservationsSTAURL(event) {
			event.preventDefault(); // We don't want to submit this form
			document.getElementById("DialogUploadObservations").close();
			var parentNode = GetFirstParentNode(currentNode);
			if (parentNode) {
				var url = document.getElementById("DialogSTAUploadURLInput").value;
				if (url.charAt(url.length - 1) == '/')
					url = url.slice(0, -1);  //remove last character
				showInfoMessage('Upload observations in STA started...');
				UploadObservationsSTA(url,
					parentNode.STAdata,
					parentNode.STAdataAttributes ? parentNode.STAdataAttributes : getDataAttributes(parentNode.STAdata),
					GetSelectedOptionsUploadObservations()).then(
						function (value) { showInfoMessage('Upload observations in STA completed.'); },
						function (error) {
							showInfoMessage('Error uploading Observations to STA. <br>name: ' + error.name + ' message: ' + error.message + ' at: ' + error.at + ' text: ' + error.text);
							console.log(error);
						}
					);
			}
		}

		const selectConditionContent = [' = ', ' &ne; ', ' &ge; ', ' > ', ' &le; ', ' < ', ' [a,b] ', ' (a,b] ', ' [a,b) ', ' (a,b) ', 'contains', 'no contains', 'starts with', 'ends with', 'year', 'month', 'day', 'hour', 'minute', 'date', 'time', 'min date time', 'max date time'];
		const selectConditionContentText = [' = ', ' &ne; ', 'contains', 'no contains', 'starts with', 'ends with'];
		const selectConditionContentNumber = [' = ', ' &ne; ', ' &ge; ', ' > ', ' &le; ', ' < ', ' [a,b] ', ' (a,b] ', ' [a,b) ', ' (a,b) ', 'contains', 'no contains']


		function GetSelectColumns(event) {
			event.preventDefault(); // We don't want to submit this form
			document.getElementById("DialogSelectColumns").close();

			var previousSTAURL = null;
			var parentNode = GetFirstParentNode(currentNode);
			if (parentNode) {
				if (parentNode.STAURL) {
					previousSTAURL = currentNode.STAURL;
					currentNode.STAURL = parentNode.STAURL;
				}
				if (parentNode.STAdata)
					currentNode.STAdata = deapCopy(parentNode.STAdata);
				if (parentNode.STAdataAttributes)
					currentNode.STAdataAttributes = deapCopy(parentNode.STAdataAttributes);
			}
			currentNode.STASelectedColumns = [];
			var dataAttributes = currentNode.STAdataAttributes ? currentNode.STAdataAttributes : getDataAttributes(currentNode.STAdata);
			const dataAttributesArray = Object.keys(dataAttributes);
			for (var a = 0; a < dataAttributesArray.length; a++) {
				if (!document.getElementById("SelectColumn_" + a).checked)
					break;
			}
			if (a < dataAttributesArray.length) //A checked attribute has been found ("for" breaks before ending).
			{
				if (parentNode.STAURL) {
					var s;
					currentNode.STAURL = AddKVPToURL(currentNode.STAURL, "$select=");
					for (var a = 0; a < dataAttributesArray.length; a++) {
						if (document.getElementById("SelectColumn_" + a).checked) {
							if (dataAttributesArray[a] == "@iot.selfLink")
								s = dataAttributesArray[a];
							else if (dataAttributesArray[a].startsWith("@iot."))
								s = dataAttributesArray[a].substring(5);
							else
								s = dataAttributesArray[a].replace("@iot.", "/");  //Changes Datastreams@iot.navigationLink to Datastreams/navigationLink

							currentNode.STAURL += s + ",";
							currentNode.STASelectedColumns[a] = true;
						}
						else
							currentNode.STASelectedColumns[a] = false;
					}
					currentNode.STAURL = currentNode.STAURL.slice(0, -1); //remove the last coma.
					currentNode.STAExpectedLength = parentNode.STAExpectedLength;
					networkNodes.update(currentNode);
					showInfoMessage("Selecting STA columns...");
					UpdateChildenSTAURL(currentNode, currentNode.STAURL, previousSTAURL);
					LoadJSONNodeSTAData(currentNode);
				}
				else {
					//If there is no STA to query, the selection is done manually (table mode).
					//currentNode.STAdata = deapCopy(currentNode.STAdata);
					for (var a = 0; a < dataAttributesArray.length; a++) {
						if (document.getElementById("SelectColumn_" + a).checked)
							currentNode.STASelectedColumns[a] = true;
						else
							currentNode.STASelectedColumns[a] = false;
					}

					var data = currentNode.STAdata, record;
					for (var i = 0; i < data.length; i++) {
						record = data[i];
						for (var a = 0; a < dataAttributesArray.length; a++) {
							if (!currentNode.STASelectedColumns[a]) {
								delete record[dataAttributesArray[a]];
							}
						}
					}
					for (var a = 0; a < dataAttributesArray.length; a++) {
						if (!currentNode.STASelectedColumns[a])
							delete dataAttributes[dataAttributesArray[a]];
					}
					networkNodes.update(currentNode);
				}
			}
			else   //If no selected collumn has been found, no filter is done and all collumns are selected
			{
				for (var a = 0; a < dataAttributesArray.length; a++) {
					currentNode.STASelectedColumns[a] = true;
				}
			}
		}

		function GetSelectExpands(event) {
			event.preventDefault(); // We don't want to submit this form
			document.getElementById("DialogSelectExpands").close();

			var previousSTAURL = currentNode.STAURL;
			var dataAttributes = currentNode.STAdataAttributes ? currentNode.STAdataAttributes : getDataAttributes(currentNode.STAdata);
			if (!currentNode.STASelectedExpands)
				currentNode.STASelectedExpands = { STAURLUnexpanded: currentNode.STAURL, dataAttributesUnexpanded: deapCopy(dataAttributes), selected: [] };
			else
				currentNode.STAURL = currentNode.STASelectedExpands.STAURLUnexpanded;

			if (document.getElementById("DialogSelectExpandsHTML").style.display != "none") {
				var dataAttr = currentNode.STASelectedExpands.dataAttributesUnexpanded;
				var dataAttrArray = Object.keys(dataAttr)
				for (var a = 0; a < dataAttrArray.length; a++) {
					if (document.getElementById("SelectExpand_" + a) && document.getElementById("SelectExpand_" + a).checked)
						break;
				}
				if (a < dataAttrArray.length) //A checked attribute has been found ("for" breaks before ending).
				{
					var s;
					currentNode.STAURL = AddKVPToURL(currentNode.STAURL, "$expand=");
					for (var a = 0; a < dataAttrArray.length; a++) {
						if (document.getElementById("SelectExpand_" + a) &&
							document.getElementById("SelectExpand_" + a).checked &&
							dataAttrArray[a].endsWith("@iot.navigationLink")) {
							s = dataAttrArray[a].substring(0, dataAttrArray[a].length - "@iot.navigationLink".length);
							currentNode.STAURL += s + ",";
							currentNode.STASelectedExpands.selected[a] = true;
						}
						else
							currentNode.STASelectedExpands.selected[a] = false;
					}
					currentNode.STAURL = currentNode.STAURL.slice(0, -1); //remove the last coma.
				}
				else   //If no selected collumn has been found, no expand is needed and the previous request is fine
				{
					for (var a = 0; a < dataAttrArray.length; a++)
						currentNode.STASelectedExpands.selected[a] = false;
				}
			}
			if (!isNaN(parseInt(document.getElementById("SelectExpandsNumberOfRecords").value)))
				currentNode.STAExpectedLength = parseInt(document.getElementById("SelectExpandsNumberOfRecords").value);
			networkNodes.update(currentNode);
			showInfoMessage("Expanding STA columns...");
			UpdateChildenSTAURL(currentNode, currentNode.STAURL, previousSTAURL);
			LoadJSONNodeSTAData(currentNode);
		}

		function GetSelectSortBy(event) {
			event.preventDefault(); // We don't want to submit this form
			document.getElementById("DialogSelectSortBy").close();

			var previousSTAURL = currentNode.STAURL;

			var parentNode = GetFirstParentNode(currentNode);
			if (parentNode) {
				if (parentNode.STAURL)
					currentNode.STAURL = parentNode.STAURL;
				if (parentNode.STAdata)
					currentNode.STAdata = parentNode.STAdata;
				var dataAttributes = currentNode.STAdataAttributes ? currentNode.STAdataAttributes : getDataAttributes(currentNode.STAdata);
				var dataAttributesArray = Object.keys(dataAttributes)
			}
			else
				return;

			if (document.getElementById("DialogSelectSortByHTML").style.display != "none") {
				for (var a = 0; a < dataAttributesArray.length; a++) {
					if (!dataAttributesArray[a].endsWith("@iot.navigationLink") && dataAttributesArray[a].charAt(0) != '@') {
						if (document.getElementById("SelectSortByEntity_" + a) && document.getElementById("SelectSortByEntity_" + a).checked)
							break;
					}
				}

				if (a < dataAttributesArray.length) //A checked attribute has been found ("for" breaks before ending).
				{
					var s;
					currentNode.STAURL = AddKVPToURL(currentNode.STAURL, "$orderby=" + dataAttributesArray[a] + " " + ((document.getElementById("SelectSortByDesc") && document.getElementById("SelectSortByDesc").checked) ? "desc" : "asc"));
				}
			}
			if (!isNaN(parseInt(document.getElementById("SelectExpandsNumberOfRecords").value)))
				currentNode.STAExpectedLength = parseInt(document.getElementById("SelectSortByNumberOfRecords").value);
			networkNodes.update(currentNode);
			showInfoMessage("Sorting STA by " + dataAttributesArray[a] + " ...");
			UpdateChildenSTAURL(currentNode, currentNode.STAURL, previousSTAURL);
			LoadJSONNodeSTAData(currentNode);
		}

		function isNumeric(str) {
			if (typeof str != "string") return false // we only process strings!
			return !isNaN(str) && // use type coercion to parse the _entirety_ of the string (`parseFloat` alone does not do this)...
				!isNaN(parseFloat(str)) // ...and ensure strings of whitespace fail
		}
		function GetSelectRows(event) { //Al apretar el ok
			event.preventDefault(); // We don't want to submit this form
			//var previousSTAURL = currentNode.STAURL; JOAN
			//var nodeids = network.getConnectedNodes(currentNode.id, "from"); JOAN
			var nodeids = currentNode.id;

			//el STARUL que agafarem sempre Ã©s el del node previ perque borri el $filter... si hi ha hagut una crida prÃ¨via
			var previousId = network.getConnectedNodes(nodeids, "from");
			console.log(previousId);
			var previouSTAURL = networkNodes.get(previousId[0]);


			if (nodeids && nodeids.length && networkNodes.get(nodeids)) {
				var node = networkNodes.get(nodeids);
				if (node.STAURL)
					currentNode.STAURL = previouSTAURL.STAURL;
				if (node.STAdata) {
					currentNode.STAdata = deapCopy(node.STAdata);
				}

				///// if (node.STAdataAttributes)  //EstÃ  al GetSelecteColums i no se si ho necesito
				///// 	currentNode.STAdataAttributes = deapCopy(node.STAdataAttributes);
			}
			else
				return;

			if (document.getElementById("DialogSelectRowsTableRadio").checked == false) {
				var table = document.getElementById("tableResult");
				var tableResults; //on es guarden els valors de la taula
				var rowsNumber = table.rows.length;

				if (rowsNumber > 1) {
					tableResults = readTableFilterRow(nodeids, 0) //row=0?
					console.log(tableResults);
				} else { //cap selecciÃ³
					alert("There is nothing selected! The filter will not be applied.");
				}

			}


			// ///////////////////////////////////////////////////////////////////////////////////URL///////////////////////////////////////////////////////////////////

			if (currentNode.image == "SelectRowsSTA.png") {
				currentNode.STASelectedRows = tableResults;
				if (document.getElementById("DialogSelectRowsTableRadio").checked) { //An element URL
					var elems = document.getElementsByName("SelectRowRadio");
					for (var i = 0; i < elems.length; i++) {
						if (elems[i].checked)
							break;
					}
					if (i < elems.length) {
						const s = elems[i].id.substring("SelectRow_".length);
						const n = Number(s);
						if (Number.isInteger(n))
							currentNode.STAURL += "(" + n + ")";
						else
							currentNode.STAURL += "('" + s + "')";
						currentNode.STAURLIdSelected = s;
					}
				}
				else { //El filter estÃ  seleccionat URL
					var divSelectorRowsFilter = document.getElementById("divSelectorRowsFilter");

					// Es posa la info al STAURL!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! PER FER LA CRIDA
					var condition, andOrNot, URL;
					URL = currentNode.STAURL;
					for (var i = 0; i < tableResults.length; i += 5) {
						andOrNot = i;
						condition = i + 2;// el primer "filtre" es segons la  condiciÃ³ seleccionada
						if (andOrNot == 0) {
							URL += "?$filter="
						} else {
							//URL += tableResults[i];
							if (tableResults[andOrNot] == "and" || tableResults[andOrNot] == "or") {
								URL += " " + tableResults[andOrNot];
							} else { //not
								URL += " and (" + tableResults[andOrNot];
							}
						}
						if (tableResults[condition] == ' = ' || tableResults[condition] == ' &ne; ' || tableResults[condition] == ' &ge; ' || tableResults[condition] == ' > ' || tableResults[condition] == ' &le; ' || tableResults[condition] == ' < ') { //passarho a com STA+
							URL += tableResults[i + 1]
							var typeOfValue = tableResults[i + 4];
							var apostropheOrSpace;
							(typeOfValue == "text") ? apostropheOrSpace = "'" : apostropheOrSpace = " ";
							switch (tableResults[condition]) {
								case ' = ':
									URL += " eq" + apostropheOrSpace + tableResults[i + 3] + apostropheOrSpace;
									break;
								case ' &ne; ':
									URL += " ne " + apostropheOrSpace + tableResults[i + 3] + apostropheOrSpace;
									break;
								case ' &ge; ':
									URL += " ge " + apostropheOrSpace + tableResults[i + 3] + apostropheOrSpace;
									break;
								case ' > ':
									URL += " gt " + apostropheOrSpace + tableResults[i + 3] + apostropheOrSpace;
									break;
								case ' &le; ':
									URL += " le" + apostropheOrSpace + tableResults[i + 3] + apostropheOrSpace;
									break;
								case ' < ':
									URL += " lt " + apostropheOrSpace + tableResults[i + 3] + apostropheOrSpace;
									break;
								default:
									console.log("error en la condiciÃ³")

							}
						} else if (tableResults[condition] == ' [a,b] ' || tableResults[condition] == ' (a,b] ' || tableResults[condition] == ' [a,b) ' || tableResults[condition] == ' (a,b) ') {
							URL += tableResults[i + 1];
							switch (tableResults[condition]) {
								case ' [a,b] ':
									URL += " ge " + tableResults[i + 3][0] + " and " + tableResults[i + 1] + " le " + tableResults[i + 3][1];
									break;
								case ' (a,b] ':
									URL += " gt " + tableResults[i + 3][0] + " and " + tableResults[i + 1] + " le " + tableResults[i + 3][1];
									break;
								case ' [a,b) ':
									URL += " ge " + tableResults[i + 3][0] + " and " + tableResults[i + 1] + " lt " + tableResults[i + 3][1];
									break;
								case ' (a,b) ':
									URL += " gt " + tableResults[i + 3][0] + " and " + tableResults[i + 1] + " lt " + tableResults[i + 3][1];
									break;
								default:
									console.log("error en la condiciÃ³")
							}
						} else if (tableResults[condition] == 'contains' || tableResults[condition] == 'no contains' || tableResults[condition] == 'starts with' || tableResults[condition] == 'ends with') {

						} else if (tableResults[condition] == 'year' || tableResults[condition] == 'month' || tableResults[condition] == 'day' || tableResults[condition] == 'hour' || tableResults[condition] == 'minute' || tableResults[condition] == 'date' || tableResults[condition] == 'time') {
							//URL+=condition+"("+tableResultss[i+1]+") eq "+tableResultss[i+3]
						} else if (tableResults[condition] == 'min date time' || tableResults[condition] == 'max date time') {

						}

						if (tableResults[andOrNot] == "not") {
							URL += ")";
						}

						currentNode.STAURL = URL;
						console.log(currentNode.STAURL);
						console.log(URL);
					}


				}
				currentNode.STAExpectedLength = node.STAExpectedLength;
				networkNodes.update(currentNode); //important als dos
				showInfoMessage("Selecting STA rows...");
				LoadJSONNodeSTAData(currentNode); //crida a la API
				UpdateChildenSTAURL(currentNode);//important als dos


				///////////////////////////////////////////////////////////////////////////////////URL///////////////////////////////////////////////////////////////////
			}
			///////////////////////////////////////////////////////////////////////////////////CSV///////////////////////////////////////////////////////////////////
			else if (currentNode.image == "SelectRowsTable.png") {
				//tableresults; //resultats de la taula del filter
				//currentNode.STAdata; //Tota la taula CSV
				var arraySTAdata = [];
				if (document.getElementById("DialogSelectRowsTableRadio").checked) { //An element URL
					var elems = document.getElementsByName("SelectRowRadio");
					for (var i = 0; i < elems.length; i++) { //comprobar quin estÃ  seleccionat
						if (elems[i].checked) {
							arraySTAdata.push(previouSTAURL.STAdata[i]);
							currentNode.STAdata = arraySTAdata;
							console.log(previouSTAURL.STAdata[i]);
						}
					}


				} else { //seleccionat el filter
					currentNode.STASelectedRowsTable = tableResults;
					console.log(currentNode.id);
					var filteredValues = filterValuesFromRowCSV(previouSTAURL.STAdata, tableResults);
					currentNode.STAdata = filteredValues;
				}



				//Guardar en el node xq recarregui la taula dle filtre al tornar-la a obrir.
				currentNode.STASelectedRowsTable = tableResults;
				networkNodes.update(currentNode);
				UpdateChildenSTAURL(currentNode);
			}

			///////////////////////////////////////////////////////////////////////////////////CSV///////////////////////////////////////////////////////////////////
			document.getElementById("DialogSelectRows").close();
		}

		function IdOfSTAEntity(node) {
			for (var i = 0; i < STAEntitiesArray.length; i++) {
				if (node.image == STAEntitiesArray[i] + ".png")
					return i;
			}
			return -1;
		}

		function IdOfSTASpecialQueries(node) {
			for (var i = 0; i < STASpecialQueriesArray.length; i++) {
				if (node.image == STASpecialQueriesArray[i] + ".png")
					return i;
			}
			return -1;
		}

		function UpdateChildenSTAURL(parentNode, currentSTAURLroot, previousSTAURLroot) {
			var nodeIds = network.getConnectedNodes(parentNode.id, 'to');
			for (var i = 0; i < nodeIds.length; i++) {
				var node = networkNodes.get(nodeIds[i])
				if (node.STAURL && currentSTAURLroot && previousSTAURLroot) {
					if (node.STAURL.substring(0, previousSTAURLroot.length) == previousSTAURLroot) {
						node.STAURL = currentSTAURLroot + node.STAURL.substring(previousSTAURLroot.length);
						networkNodes.update(node);
					}
					/*if (IdOfSTAEntity(node) != -1 || IdOfSTASpecialQueries(node)!=-1 || TableOperations[node.image.substring(0, node.image.length-4)].callSTALoad) {
						networkNodes.update(node);
						showInfoMessage("Updating STA child node...");
						LoadJSONNodeSTAData(node);
}*/
				}
				UpdateChildenSTAURL(node, currentSTAURLroot, previousSTAURLroot);
			}
		}

		async function UpdateChildenLoadJSONCallback(parentNode) {
			var nodeIds = network.getConnectedNodes(parentNode.id, 'to');
			for (var i = 0; i < nodeIds.length; i++) {
				var node = networkNodes.get(nodeIds[i])
				if (node.image == "SeparateColumns.png")
					SeparateColumns(node, parentNode);
				else if (node.image == "SelectColumnsTable.png") {
					//pensar com es podria fer.
					showInfoMessage("Automatic update of SelectColumns not implemented for table nodes.");
				}
				else if (IdOfSTAEntity(node) != -1 || IdOfSTASpecialQueries(node) != -1 || TableOperations[removeExtension(node.image)].callSTALoad) {
					showInfoMessage("Updating " + removeExtension(node.image) + " ...");
					await LoadJSONNodeSTAData(node);
				}
			}
		}

		function getCSVWTypeFromAttributeType(t) {
			if (t == "array" || t == "null" || t == "object" || t == "undefined")
				return "json";
			return t;
		}

		function getAttributeTypeFromCSVWType(t) {
			if (t == "json")
				return "object";
			return t;
		}


		function getJSONSchemaTypeFromAttributeType(t) {
			if (t == "anyURI")
				return "string";
			return t;
		}

		function getJSONType(a) {
			if (typeof a === "string")
				return "string";
			if (typeof a === "boolean")
				return "boolean";
			if (Array.isArray(a))
				return "array";
			if (a === null)
				return "null";
			if (typeof a === "object")
				return "object";
			if (typeof a === "undefined")
				return "undefined";
			if (Number.isInteger(a))
				return "integer";
			if (parseFloat(a))
				return "number"
			else
				return "string";
		}

		function getDataAttributes(data) {
			var dataAttributes = {}, dataAttribute, type;

			for (var i = 0; i < data.length; i++) {
				var keys = Object.keys(data[i]);
				for (var k = 0; k < keys.length; k++) {
					if (dataAttributes[keys[k]]) {
						dataAttribute = dataAttributes[keys[k]];
						if (!isAttributeAnyURI(keys[k])) {
							type = getJSONType(data[i][keys[k]]);
							if (dataAttribute.type == "null" || dataAttribute.type == "undefined")
								dataAttribute.type = type;
							if (type != "null" && type != "undefined") {
								if ((dataAttribute.type == "boolean" && type != "boolean") ||
									((dataAttribute.type == "integer" || dataAttribute.type == "number") && (type == "object" || type == "array" || type == "string")) ||
									(dataAttribute.type == "string" && (type == "object" || type == "array")) ||
									(dataAttribute.type == "array" && type == "object"))
									dataAttribute.type = type;
								else if (dataAttribute.type == "integer" && type == "number")
									dataAttribute.type = "number";
							}
						}
					}
					else
						dataAttributes[keys[k]] = {
							type: isAttributeAnyURI(keys[k]) ? "anyURI" : getJSONType(data[i][keys[k]])
						};
				}
			}
			return dataAttributes;
		}

		function isAttributeAnyURI(s) {
			return (s == "url" || s == "definition" || s.endsWith("@iot.selfLink") || s.endsWith("@iot.navigationLink"));
		}



		//Filtres Row
		function filterValuesFromRowCSV(STAdata, tableResults) {
			console.log("STAdata: " + STAdata);
			console.log(tableResults);
			//agrupar els or
			var arrayOfOr = [];
			var generalArray = [];

			for (var i = 0; i < tableResults.length; i += 5) {
				if ((i - 5) > 0) {
					if (tableResults[i - 5] == "or" & tableResults[i] != "or") { //si l'anterior era or i el present ja no, es reinicia
						arrayOfOr = [];
					}
				}
				if (tableResults[i + 5] != null & tableResults[i + 5] == "or") { //posar el present
					arrayOfOr.push(tableResults[i]);
					arrayOfOr.push(tableResults[i + 1]);
					arrayOfOr.push(tableResults[i + 2]);
					if (tableResults[i + 4] == "number") {
						if (Array.isArray(tableResults[i + 3])) {
							arrayOfOr.push([parseInt(tableResults[i + 3][0]), parseInt(tableResults[i + 3][1])]);
						} else {
							arrayOfOr.push(parseInt(tableResults[i + 3]));
						}
					} else {
						arrayOfOr.push(tableResults[i + 3]);
					}
					arrayOfOr.push(tableResults[i + 4]);

				} else if ((tableResults[i] == "or" & (tableResults[i + 5]) != "or")) { //si el segÃ¼ent es un or es copiarÃ  en el if anterior. Si no hi ha cap mÃ©s, es copia el present
					arrayOfOr.push(tableResults[i]);
					arrayOfOr.push(tableResults[i + 1]);
					arrayOfOr.push(tableResults[i + 2]);
					if (tableResults[i + 4] == "number") {
						if (Array.isArray(tableResults[i + 3])) {
							arrayOfOr.push([parseInt(tableResults[i + 3][0]), parseInt(tableResults[i + 3][1])]);
						} else {
							arrayOfOr.push(parseInt(tableResults[i + 3]));
						}
					}
					else {
						arrayOfOr.push(tableResults[i + 3]);
					}
					arrayOfOr.push(tableResults[i + 4]);
					generalArray.push(arrayOfOr);
				}
				else {
					var interval = [];
					generalArray.push(tableResults[i]);
					generalArray.push(tableResults[i + 1]);
					generalArray.push(tableResults[i + 2]);
					if (tableResults[i + 4] == "number") {
						if (Array.isArray(tableResults[i + 3])) {
							generalArray.push([parseInt(tableResults[i + 3][0]), parseInt(tableResults[i + 3][1])]);
						} else {
							generalArray.push(parseInt(tableResults[i + 3]));
						}
					} else {
						generalArray.push(tableResults[i + 3]);
					}
					generalArray.push(tableResults[i + 4]);
				}
			}

			// aplicaciÃ³ del filtre
			var resultsFiltered, resultsFiltered2;
			for (var i = 0; i < generalArray.length; i++) { //i+2=condiciÃ³, i+3 = valor (si no es un array saltarÃ  5 is)
				if (i == 0) {
					resultsFiltered2 = STAdata;
				} else {
					resultsFiltered2 = resultsFiltered;
				}
				if (Array.isArray(generalArray[i]) == false) {
					//filter
					if (i == 0 || generalArray[i] == "and") {
						switch (generalArray[i + 2]) {
							case ' = ':
								resultsFiltered = resultsFiltered2.filter(element => element[generalArray[i + 1]] == generalArray[i + 3]);
								console.log(resultsFiltered);
								break;
							case ' &ne; ':
								resultsFiltered = resultsFiltered2.filter(element => element[generalArray[i + 1]] != generalArray[i + 3]);
								console.log(resultsFiltered);

								break;
							case ' &ge; ':
								resultsFiltered = resultsFiltered2.filter(element => element[generalArray[i + 1]] >= generalArray[i + 3]);
								console.log(resultsFiltered);

								break;
							case ' > ':
								resultsFiltered = resultsFiltered2.filter(element => element[generalArray[i + 1]] > generalArray[i + 3]);
								console.log(resultsFiltered);
								break;
							case ' &le; ':
								resultsFiltered = resultsFiltered2.filter(element => element[generalArray[i + 1]] <= generalArray[i + 3]);
								console.log(resultsFiltered);
								break;
							case ' < ':
								resultsFiltered = resultsFiltered2.filter(element => element[generalArray[i + 1]] < generalArray[i + 3]);
								console.log(resultsFiltered);
								break;
							case ' [a,b] ':
								var interval;
								interval = resultsFiltered2.filter(element => element[generalArray[i + 1]] >= generalArray[i + 3][0]);
								resultsFiltered = interval.filter(element => element[generalArray[i + 1]] <= generalArray[i + 3][1]);
								console.log(resultsFiltered);

								break;
							case ' (a,b] ':
								var interval;
								interval = resultsFiltered2.filter(element => element[generalArray[i + 1]] > generalArray[i + 3][0]);
								resultsFiltered = interval.filter(element => element[generalArray[i + 1]] <= generalArray[i + 3][1]);
								console.log(resultsFiltered);
								break;
							case ' [a,b) ':
								var interval;
								interval = resultsFiltered2.filter(element => element[generalArray[i + 1]] >= generalArray[i + 3][0]);
								resultsFiltered = interval.filter(element => element[generalArray[i + 1]] < generalArray[i + 3][1]);
								console.log(resultsFiltered);
								break;
							case ' (a,b) ':
								var interval;
								interval = resultsFiltered2.filter(element => element[generalArray[i + 1]] > generalArray[i + 3][0]);
								resultsFiltered = interval.filter(element => element[generalArray[i + 1]] < generalArray[i + 3][1]);
								console.log(resultsFiltered);
								break;
							case 'contains':
								var textToCompare = generalArray[i + 3].toLowerCase();
								var textInData;
								resultsFiltered = [];
								console.log(resultsFiltered2);
								for (var e = 0; e < resultsFiltered2.length; e++) {
									textInData = resultsFiltered2[e][generalArray[i + 1]].toLowerCase();
									// console.log(textToCompare+" : "+textInData);

									if (textInData.includes(textToCompare)) {
										resultsFiltered.push(resultsFiltered2[e]);
									}
								}

								console.log(resultsFiltered);
								break;
							case 'no contains':
								var textToCompare = generalArray[i + 3].toLowerCase();
								var textInData;
								resultsFiltered = [];
								for (var e = 0; e < resultsFiltered2.length; e++) {
									textInData = resultsFiltered2[e][generalArray[i + 1]].toLowerCase();
									// console.log(textToCompare+" : "+textInData);

									if (!textInData.includes(textToCompare)) {
										resultsFiltered.push(resultsFiltered2[e]);
									}
								}

								console.log(resultsFiltered);
								break;
							case 'starts with':
								var textToCompare = generalArray[i + 3].toLowerCase();
								var textInData;
								resultsFiltered = [];
								for (var e = 0; e < resultsFiltered2.length; e++) {
									textInData = resultsFiltered2[e][generalArray[i + 1]].toLowerCase();
									// console.log(textToCompare+" : "+textInData);

									if (textInData.startsWith(textToCompare)) {
										resultsFiltered.push(resultsFiltered2[e]);
									}
								}
								console.log(resultsFiltered);

								break;
							case 'ends with':
								//Declaraciones ejecutadas cuando el resultado de expresiÃ³n coincide con el valor1
								var textToCompare = generalArray[i + 3].toLowerCase();
								var textInData;
								resultsFiltered = [];
								for (var e = 0; e < resultsFiltered2.length; e++) {
									textInData = resultsFiltered2[e][generalArray[i + 1]].toLowerCase();
									// console.log(textToCompare+" : "+textInData);

									if (textInData.endsWith(textToCompare)) {
										resultsFiltered.push(resultsFiltered2[e]);
									}
								}
								console.log(resultsFiltered);
								break;
							case 'year':
								//Declaraciones ejecutadas cuando el resultado de expresiÃ³n coincide con el valor1
								break;
							case 'month':
								//Declaraciones ejecutadas cuando el resultado de expresiÃ³n coincide con el valor1
								break;
							case 'day':
								//Declaraciones ejecutadas cuando el resultado de expresiÃ³n coincide con el valor1
								break;
							case 'hour':
								//Declaraciones ejecutadas cuando el resultado de expresiÃ³n coincide con el valor1
								break;
							case 'minute':
								//Declaraciones ejecutadas cuando el resultado de expresiÃ³n coincide con el valor1
								break;
							case 'date':
								//Declaraciones ejecutadas cuando el resultado de expresiÃ³n coincide con el valor1
								break;
							case 'time':
								//Declaraciones ejecutadas cuando el resultado de expresiÃ³n coincide con el valor1
								break;
						}
					}
					else if (generalArray[i] == "not") {
						switch (generalArray[i + 2]) {
							case ' = ':
								resultsFiltered = resultsFiltered2.filter(element => (element[generalArray[i + 1]] != generalArray[i + 3]));
								console.log(resultsFiltered);
								break;
							case ' &ne; ':
								resultsFiltered = resultsFiltered2.filter(element => (element[generalArray[i + 1]] == generalArray[i + 3]));
								console.log(resultsFiltered);

								break;
							case ' &ge; ':
								resultsFiltered = resultsFiltered2.filter(element => (element[generalArray[i + 1]] < generalArray[i + 3]));
								console.log(resultsFiltered);

								break;
							case ' > ':
								resultsFiltered = resultsFiltered2.filter(element => (element[generalArray[i + 1]] <= generalArray[i + 3]));
								console.log(resultsFiltered);
								break;
							case ' &le; ':
								resultsFiltered = resultsFiltered2.filter(element => (element[generalArray[i + 1]] > generalArray[i + 3]));
								console.log(resultsFiltered);
								break;
							case ' < ':
								resultsFiltered = resultsFiltered2.filter(element => (element[generalArray[i + 1]] >= generalArray[i + 3]));
								console.log(resultsFiltered);
								break;
							case ' [a,b] ':
								var interval;
								interval = resultsFiltered2.filter(element => (element[generalArray[i + 1]] < generalArray[i + 3][0]));
								resultsFiltered = interval.filter(element => (element[generalArray[i + 1]] > generalArray[i + 3][1]));
								console.log(resultsFiltered);

								break;
							case ' (a,b] ':
								var interval;
								interval = resultsFiltered2.filter(element => (element[generalArray[i + 1]] <= generalArray[i + 3][0]));
								resultsFiltered = interval.filter(element => (element[generalArray[i + 1]] > generalArray[i + 3][1]));
								console.log(resultsFiltered);
								break;
							case ' [a,b) ':
								var interval;
								interval = resultsFiltered2.filter(element => (element[generalArray[i + 1]] < generalArray[i + 3][0]));
								resultsFiltered = interval.filter(element => (element[generalArray[i + 1]] >= generalArray[i + 3][1]));
								console.log(resultsFiltered);
								break;
							case ' (a,b) ':
								var interval;
								interval = resultsFiltered2.filter(element => (element[generalArray[i + 1]] <= generalArray[i + 3][0]));
								resultsFiltered = interval.filter(element => (element[generalArray[i + 1]] >= generalArray[i + 3][1]));
								console.log(resultsFiltered);
								break;
							case 'contains':
								console.log("contains")
								var textToCompare = generalArray[i + 3].toLowerCase();
								var textInData;
								resultsFiltered = [];
								console.log(resultsFiltered2);
								for (var e = 0; e < resultsFiltered2.length; e++) {
									textInData = resultsFiltered2[e][generalArray[i + 1]].toLowerCase();
									// console.log(textToCompare+" : "+textInData);

									if (!textInData.includes(textToCompare)) {
										resultsFiltered.push(resultsFiltered2[e]);
									}
								}

								console.log(resultsFiltered);
								break;
							case 'no contains':
								//Declaraciones ejecutadas cuando el resultado de expresiÃ³n coincide con el valor1
								var textToCompare = generalArray[i + 3].toLowerCase();
								var textInData;
								resultsFiltered = [];
								for (var e = 0; e < resultsFiltered2.length; e++) {
									textInData = resultsFiltered2[e][generalArray[i + 1]].toLowerCase();
									// console.log(textToCompare+" : "+textInData);

									if (textInData.includes(textToCompare)) {
										resultsFiltered.push(resultsFiltered2[e]);
									}
								}

								console.log(resultsFiltered);
								break;
							case 'starts with':
								//Declaraciones ejecutadas cuando el resultado de expresiÃ³n coincide con el valor1
								var textToCompare = generalArray[i + 3].toLowerCase();
								var textInData;
								resultsFiltered = [];
								for (var e = 0; e < resultsFiltered2.length; e++) {
									textInData = resultsFiltered2[e][generalArray[i + 1]].toLowerCase();
									// console.log(textToCompare+" : "+textInData);

									if (!textInData.startsWith(textToCompare)) {
										resultsFiltered.push(resultsFiltered2[e]);
									}
								}
								console.log(resultsFiltered);
								break;
							case 'ends with':
								//Declaraciones ejecutadas cuando el resultado de expresiÃ³n coincide con el valor1
								var textToCompare = generalArray[i + 3].toLowerCase();
								var textInData;
								resultsFiltered = [];
								for (var e = 0; e < resultsFiltered2.length; e++) {
									textInData = resultsFiltered2[e][generalArray[i + 1]].toLowerCase();
									// console.log(textToCompare+" : "+textInData);

									if (!textInData.endsWith(textToCompare)) {
										resultsFiltered.push(resultsFiltered2[e]);
									}
								}
								console.log(resultsFiltered);
								break;
							case 'year':
								//Declaraciones ejecutadas cuando el resultado de expresiÃ³n coincide con el valor1
								break;
							case 'month':
								//Declaraciones ejecutadas cuando el resultado de expresiÃ³n coincide con el valor1
								break;
							case 'day':
								//Declaraciones ejecutadas cuando el resultado de expresiÃ³n coincide con el valor1
								break;
							case 'hour':
								//Declaraciones ejecutadas cuando el resultado de expresiÃ³n coincide con el valor1
								break;
							case 'minute':
								//Declaraciones ejecutadas cuando el resultado de expresiÃ³n coincide con el valor1
								break;
							case 'date':
								//Declaraciones ejecutadas cuando el resultado de expresiÃ³n coincide con el valor1
								break;
							case 'time':
								//Declaraciones ejecutadas cuando el resultado de expresiÃ³n coincide con el valor1
								break;
						}
					}
					i += 4;
				} else { //array dels ors (mÃºltiple de 5). SI hi ha Or sempre hi haurÃ  array
					//filter

					if (generalArray[i][0] == "nothing" || generalArray[i][0] == "and") {
						var temporalArray = [];
						var finalArray;
						console.log(generalArray[i]);
						for (var a = 0; a < generalArray[i].length; a += 5) { //for amb and
							switch (generalArray[i][a + 2]) {
								case ' = ':
									resultsFiltered = resultsFiltered2.filter(element => element[generalArray[i][a + 1]] == generalArray[i][a + 3]);
									console.log(resultsFiltered)
									break;
								case ' &ne; ':
									resultsFiltered = resultsFiltered2.filter(element => element[generalArray[i][a + 1]] != generalArray[i][a + 3]);


									break;
								case ' &ge; ':
									resultsFiltered = resultsFiltered2.filter(element => element[generalArray[i][a + 1]] >= generalArray[i][a + 3]);


									break;
								case ' > ':
									resultsFiltered = resultsFiltered2.filter(element => element[generalArray[i][a + 1]] > generalArray[i][a + 3]);

									break;
								case ' &le; ':
									resultsFiltered = resultsFiltered2.filter(element => element[generalArray[i][a + 1]] <= generalArray[i][a + 3]);

									break;
								case ' < ':
									resultsFiltered = resultsFiltered2.filter(element => element[generalArray[i][a + 1]] < generalArray[i][a + 3]);

									break;
								case ' [a,b] ':
									var interval;
									interval = resultsFiltered2.filter(element => element[generalArray[i][a + 1]] >= generalArray[i][a + 3][0]);
									resultsFiltered = interval.filter(element => element[generalArray[i][a + 1]] <= generalArray[i][a + 3][1]);


									break;
								case ' (a,b] ':
									var interval;
									interval = resultsFiltered2.filter(element => element[generalArray[i][a + 1]] > generalArray[i][a + 3][0]);
									resultsFiltered = interval.filter(element => element[generalArray[i][a + 1]] <= generalArray[i][a + 3][1]);

									break;
								case ' [a,b) ':
									var interval;
									interval = resultsFiltered2.filter(element => element[generalArray[i][a + 1]] >= generalArray[i][a + 3][0]);
									resultsFiltered = interval.filter(element => element[generalArray[i][a + 1]] < generalArray[i][a + 3][1]);

									break;
								case ' (a,b) ':
									var interval;
									interval = resultsFiltered2.filter(element => element[generalArray[i][a + 1]] > generalArray[i][a + 3][0]);
									resultsFiltered = interval.filter(element => element[generalArray[i][a + 1]] < generalArray[i][a + 3][1]);

									break;
								case 'contains':
									var textToCompare = generalArray[i][a + 3].toLowerCase();
									var textInData;
									resultsFiltered = [];
									console.log(resultsFiltered2);
									for (var e = 0; e < resultsFiltered2.length; e++) {
										textInData = resultsFiltered2[e][generalArray[i][a + 1]].toLowerCase();
										// console.log(textToCompare+" : "+textInData);

										if (textInData.includes(textToCompare)) {
											resultsFiltered.push(resultsFiltered2[e]);
										}
									}


									break;
								case 'no contains':
									//Declaraciones ejecutadas cuando el resultado de expresiÃ³n coincide con el valor1
									var textToCompare = generalArray[i][a + 3].toLowerCase();
									var textInData;
									resultsFiltered = [];
									console.log(resultsFiltered2);
									for (var e = 0; e < resultsFiltered2.length; e++) {
										textInData = resultsFiltered2[e][generalArray[i][a + 1]].toLowerCase();
										// console.log(textToCompare+" : "+textInData);

										if (!textInData.includes(textToCompare)) {
											resultsFiltered.push(resultsFiltered2[e]);
										}
									}


									break;
								case 'starts with':
									//Declaraciones ejecutadas cuando el resultado de expresiÃ³n coincide con el valor1
									break;
								case 'ends with':
									//Declaraciones ejecutadas cuando el resultado de expresiÃ³n coincide con el valor1
									break;
								case 'year':
									//Declaraciones ejecutadas cuando el resultado de expresiÃ³n coincide con el valor1
									break;
								case 'month':
									//Declaraciones ejecutadas cuando el resultado de expresiÃ³n coincide con el valor1
									break;
								case 'day':
									//Declaraciones ejecutadas cuando el resultado de expresiÃ³n coincide con el valor1
									break;
								case 'hour':
									//Declaraciones ejecutadas cuando el resultado de expresiÃ³n coincide con el valor1
									break;
								case 'minute':
									//Declaraciones ejecutadas cuando el resultado de expresiÃ³n coincide con el valor1
									break;
								case 'date':
									//Declaraciones ejecutadas cuando el resultado de expresiÃ³n coincide con el valor1
									break;
								case 'time':
									//Declaraciones ejecutadas cuando el resultado de expresiÃ³n coincide con el valor1
									break;
							}

							temporalArray.push(...resultsFiltered);
						}

						//eliminar repetits:
						var arrayWithoutDuplicates = [];
						for (var e = 0; e < temporalArray.length; e++) {
							console.log(temporalArray[e]["@iot.id"]);

							if (!arrayWithoutDuplicates.find(object => object["@iot.id"] == temporalArray[e]["@iot.id"])) {
								arrayWithoutDuplicates.push(temporalArray[e]);
							} else {
								// console.log("duplicat")
							}
						}
						resultsFiltered = arrayWithoutDuplicates //actualitzem resultsFiltered sense repetits
						console.log(resultsFiltered);
					}
					else if (generalArray[i][0] == "not") { //no els dos de l'array
						var temporalArray = [];
						var finalArray;
						console.log(generalArray[i]);
						for (var a = 0; a < generalArray[i].length; a += 5) { //for amb and
							switch (generalArray[i][a + 2]) {
								case ' = ':
									resultsFiltered = resultsFiltered2.filter(element => element[generalArray[i][a + 1]] != generalArray[i][a + 3]);
									console.log(resultsFiltered)
									break;
								case ' &ne; ':
									resultsFiltered = resultsFiltered2.filter(element => element[generalArray[i][a + 1]] == generalArray[i][a + 3]);


									break;
								case ' &ge; ':
									resultsFiltered = resultsFiltered2.filter(element => element[generalArray[i][a + 1]] < generalArray[i][a + 3]);


									break;
								case ' > ':
									resultsFiltered = resultsFiltered2.filter(element => element[generalArray[i][a + 1]] <= generalArray[i][a + 3]);

									break;
								case ' &le; ':
									resultsFiltered = resultsFiltered2.filter(element => element[generalArray[i][a + 1]] > generalArray[i][a + 3]);

									break;
								case ' < ':
									resultsFiltered = resultsFiltered2.filter(element => element[generalArray[i][a + 1]] >= generalArray[i][a + 3]);

									break;
								case ' [a,b] ':
									var interval;
									interval = resultsFiltered2.filter(element => element[generalArray[i][a + 1]] < generalArray[i][a + 3][0]);
									resultsFiltered = interval.filter(element => element[generalArray[i][a + 1]] > generalArray[i][a + 3][1]);


									break;
								case ' (a,b] ':
									var interval;
									interval = resultsFiltered2.filter(element => element[generalArray[i][a + 1]] <= generalArray[i][a + 3][0]);
									resultsFiltered = interval.filter(element => element[generalArray[i][a + 1]] > generalArray[i][a + 3][1]);

									break;
								case ' [a,b) ':
									var interval;
									interval = resultsFiltered2.filter(element => element[generalArray[i][a + 1]] < generalArray[i][a + 3][0]);
									resultsFiltered = interval.filter(element => element[generalArray[i][a + 1]] >= generalArray[i][a + 3][1]);

									break;
								case ' (a,b) ':
									var interval;
									interval = resultsFiltered2.filter(element => element[generalArray[i][a + 1]] <= generalArray[i][a + 3][0]);
									resultsFiltered = interval.filter(element => element[generalArray[i][a + 1]] >= generalArray[i][a + 3][1]);

									break;
								case 'contains':
									//Declaraciones ejecutadas cuando el resultado de expresiÃ³n coincide con el valor1
									break;
								case 'no contains':
									//Declaraciones ejecutadas cuando el resultado de expresiÃ³n coincide con el valor1
									break;
								case 'starts with':
									//Declaraciones ejecutadas cuando el resultado de expresiÃ³n coincide con el valor1
									break;
								case 'ends with':
									//Declaraciones ejecutadas cuando el resultado de expresiÃ³n coincide con el valor1
									break;
								case 'year':
									//Declaraciones ejecutadas cuando el resultado de expresiÃ³n coincide con el valor1
									break;
								case 'month':
									//Declaraciones ejecutadas cuando el resultado de expresiÃ³n coincide con el valor1
									break;
								case 'day':
									//Declaraciones ejecutadas cuando el resultado de expresiÃ³n coincide con el valor1
									break;
								case 'hour':
									//Declaraciones ejecutadas cuando el resultado de expresiÃ³n coincide con el valor1
									break;
								case 'minute':
									//Declaraciones ejecutadas cuando el resultado de expresiÃ³n coincide con el valor1
									break;
								case 'date':
									//Declaraciones ejecutadas cuando el resultado de expresiÃ³n coincide con el valor1
									break;
								case 'time':
									//Declaraciones ejecutadas cuando el resultado de expresiÃ³n coincide con el valor1
									break;
							}
							temporalArray.push(...resultsFiltered);
						}

						//Quyedar-se amb els duplicats
						var arrayWithDuplicates = temporalArray.filter((elemento, index) => {
							return temporalArray.indexOf(elemento) != index;
						})
						resultsFiltered = arrayWithDuplicates //actualitzem resultsFiltered sense repetits
						console.log(resultsFiltered);
					}
				}
			}
			return resultsFiltered;
		}
		function typeOfValueFromInput(wichTextInput, place, value1, value2) {
			var typeOfValues;
			if (wichTextInput == "simple") {
				var textInput = document.getElementById("textInput" + place);
			}
			else {
				var textIputInterval1 = document.getElementById("textInputInterval1" + place);
				var textIputInterval2 = document.getElementById("textInputInterval2" + place);
			}
			if (wichTextInput == "simple") {

				if (value1.includes("-") == true) {//inputText1
					var value1Array = value1.split("-");
					if (value1.includes("/")) {
						if (value1Array.length == 5) {
							if (value1Array[0].length == 4 & value1Array[1].length == 2 & value1Array[2][2] == "T" & value1.endsWith("Z")) {
								typeOfValues = "date";
								console.log("Ã©s una data");
							}
						}
					} else {
						if (value1Array.length == 3) {
							if (value1Array[0].length == 4 & value1Array[1].length == 2 & value1Array[2][2] == "T" & value1.endsWith("Z")) {
								typeOfValues = "date";
								console.log("Ã©s una data");
							}
						}
					}

				}
				if (typeOfValues != "date") {
					if (Number.isNaN(parseInt(value1)) != true) {
						if (value1.length != parseInt(value1).toString().length & value1.length != parseFloat(value1).toString().length) {
							typeOfValues = "text";
						} else {
							typeOfValues = "number";
						}

					} else {
						typeOfValues = "text";
					}
				}
				if (value1.length == 0) {
					typeOfValues = "empty";
				}
			}
			else {//interval
				var inputText1 = "no";
				var inputText2 = "no";

				//es date
				if (value1.includes("-") == true) {//inputText1
					var value1Array = value1.split("-");
					if (value1.includes("/")) {
						if (value1Array.length == 5) {
							if (value1Array[0].length == 4 & value1Array[1].length == 2 & value1Array[2][2] == "T" & value1.endsWith("Z")) {
								inputText1 = "date";
								console.log("Ã©s una data");
							}
						}
					} else {
						if (value1Array.length == 3) {
							if (value1Array[0].length == 4 & value1Array[1].length == 2 & value1Array[2][2] == "T" & value1.endsWith("Z")) {
								inputText1 = "date";
								console.log("Ã©s una data");
							}
						}
					}

				}

				if (value2.includes("-") == true) {//inputText1
					var value2Array = value2.split("-");
					if (value2.includes("/")) {
						if (value2Array.length == 5) {
							if (value2Array[0].length == 4 & value2Array[1].length == 2 & value2Array[2][2] == "T" & value2.endsWith("Z")) {
								inputText2 = "date";
								console.log("Ã©s una data");
							}
						}
					} else {
						if (value2Array.length == 3) {
							if (value2Array[0].length == 4 & value2Array[1].length == 2 & value2Array[2][2] == "T" & value2.endsWith("Z")) {
								inputText2 = "date";
								console.log("Ã©s una data");
							}
						}
					}

				}

				if (inputText1 != "date") {
					if (Number.isNaN(parseInt(value1)) != true) { //numero
						if (value1.length != parseInt(value1).toString().length & value1.length != parseFloat(value1).toString().length) {
							inputText1 = "text";
						} else { //nÃºmero en value1
							inputText1 = "number";
						}
					} else if (value1.length == 0) { //si estÃ  buit
						inputText1 = "empty";
					} else { inputText1 = "text"; }
				}

				if (inputText2 != "date") {
					if (Number.isNaN(parseInt(value2)) != true) { //Si el primer no Ã©s nÃºmero mirem el segon
						if (value2.length != parseInt(value2).toString().length & value2.length != parseFloat(value2).toString().length) {
							inputText2 = "text";
						} else {
							inputText2 = "number";
						}
					} else if (value2.length == 0) {
						inputText2 = "empty";
					} else { inputText2 = "text"; }
				}


				if (inputText1 == "text" || inputText2 == "text") {
					typeOfValues = "text";
				} else if ((inputText1 == "date" & inputText2 == "empty") || (inputText1 == "empty" & inputText2 == "date") || (inputText1 == "date" & inputText2 == "date")) {
					typeOfValues = "date";

				} else if (inputText1 == "empty" & inputText2 == "empty") {
					typeOfValues = "empty";
				}
				else {
					typeOfValues = "number";
				}
			}
			// console.log(typeOfValues);
			return typeOfValues;

		}

		//Es un objecte?
		function isAnObject(nodeId, place) {
			var select = document.getElementById("selectorValue" + place);
			var selectOption = select.options[select.selectedIndex].value;
			if (selectOption === "[object Object]") {
				console.log("object!!!!");
			}
			// else {
			// 	console.log(selectOption);
			// 	console.log(typeof selectOption);
			// }
		}

		//Estructura general
		function changeWriteToSelect(nodeId, place, selector) {  //Que pugui recollir el text del input
			event.preventDefault();
			var divFilterContainer = document.getElementById("divFilterContainer" + place);
			var textInput = document.getElementById("textInput" + place);
			var displaySelect = document.getElementById("displaySelect" + place);

			var divFilterContainer2 = document.getElementById("divFilterContainer2" + place);
			var textInputInterval1 = document.getElementById("textInputInterval1" + place);
			var textInputInterval2 = document.getElementById("textInputInterval2" + place);
			var displaySelectInterval = document.getElementById("displaySelectInterval" + place);

			var addButton = document.getElementById("addButton");

			//quin text estÃ  obert?
			if (selector == "simple") {
				textInput.classList.remove("inblock");
				textInput.classList.add("hidden");
				displaySelect.classList.remove("inblock");
				displaySelect.classList.add("hidden");
				divFilterContainer.classList.remove("hidden");
				divFilterContainer.classList.add("inblock");

			} else { //interval
				textInputInterval1.classList.remove("inblock");
				textInputInterval2.classList.remove("inblock");
				displaySelectInterval.classList.remove("inblock");
				textInputInterval1.classList.add("hidden");
				textInputInterval2.classList.add("hidden");
				displaySelectInterval.classList.add("hidden");
				divFilterContainer2.classList.remove("hidden");
				divFilterContainer2.classList.add("inblock");
			}

			addButton.disabled = true;

			var table = document.getElementById("tableResult");
			var rowsNumbers = table.rows.length;
			var saveButton;

			for (var i = 1; i < rowsNumbers; i++) {
				saveButton = document.getElementById("buttonSave" + i);
				if (saveButton.classList.contains("hidden") == false) {
					saveButton.disabled = true;
				}
			}

		}
		function showIntervalSelector(nodeId, place) {
			event.preventDefault();
			var selectorCondition = document.getElementById("selectorCondition" + place);
			var selectedValue = selectorCondition.options[selectorCondition.selectedIndex].value;

			var divFilterContainer = document.getElementById("divFilterContainer" + place);
			var textInput = document.getElementById("textInput" + place);
			var displaySelect = document.getElementById("displaySelect" + place);

			var divFilterContainer2 = document.getElementById("divFilterContainer2" + place);
			var textInputInterval1 = document.getElementById("textInputInterval1" + place);
			var textInputInterval2 = document.getElementById("textInputInterval2" + place);
			var displaySelectInterval = document.getElementById("displaySelectInterval" + place);



			if (selectedValue == " [a,b] " || selectedValue == " (a,b] " || selectedValue == " [a,b) " || selectedValue == " (a,b) ") {
				console.log("Interval");

				if (divFilterContainer2.classList.contains("hidden") == true) { //No Es mostra
					if (textInputInterval1.classList.contains("hidden") == true) { //NO Es mostra (es mostra el senzill)
						if (divFilterContainer.classList.contains("hidden") == true) { //s'estan mostrant el text i el display del senzill
							//hidden al textoss i al diplay
							textInput.classList.add("hidden");
							displaySelect.classList.add("hidden");
							if (textInput.classList.contains("inblock")) {
								textInput.classList.remove("inblock");
								displaySelect.classList.remove("inblock");
							}

							//mostrar el textInput i el display
							textInputInterval1.classList.remove("hidden");
							textInputInterval1.classList.add("inblock");
							textInputInterval2.classList.remove("hidden");
							textInputInterval2.classList.add("inblock");
							displaySelectInterval.classList.remove("hidden");
							displaySelectInterval.classList.add("inblock");


						} else { //Es mostra el divContainer
							//hidden al divFilterCOntainer
							if (divFilterContainer.classList.contains("inblock")) {
								divFilterContainer.classList.remove("inblock");
							}
							divFilterContainer.classList.add("hidden");
							//mostrar els textInput i display de l'Interval
							textInputInterval1.classList.remove("hidden");
							textInputInterval1.classList.add("inblock");
							textInputInterval2.classList.remove("hidden");
							textInputInterval2.classList.add("inblock");
							displaySelectInterval.classList.remove("hidden");
							displaySelectInterval.classList.add("inblock");

						}
					} //Es mostra el text del senzill
					//Res

				} //Si es mostra el FilterCOntains, no tocar



			} else {
				console.log("NO Interval");

				//venint d'ell
				if (divFilterContainer.classList.contains("hidden") == true) { //No Es mostra
					if (textInput.classList.contains("hidden") == true) { //NO Es mostra (es mostra l'interval)
						if (divFilterContainer2.classList.contains("hidden") == true) { //s'estan mostrant els textos i el display del interval
							//hidden als dos textoss i al diplay
							textInputInterval1.classList.add("hidden");
							textInputInterval2.classList.add("hidden");
							displaySelectInterval.classList.add("hidden");
							if (textInputInterval1.classList.contains("inblock")) {
								textInputInterval1.classList.remove("inblock");
								textInputInterval2.classList.remove("inblock");
								displaySelectInterval.classList.remove("inblock");
							}

							//mostrar el textInput i el display
							textInput.classList.remove("hidden");
							textInput.classList.add("inblock");
							displaySelect.classList.remove("hidden");
							displaySelect.classList.add("inblock");


						} else { //Es mostra el divContainer2
							//hidden al divFilterCOntainer2
							if (divFilterContainer2.classList.contains("inblock")) {
								divFilterContainer2.classList.remove("inblock");
							}
							divFilterContainer2.classList.add("hidden");
							//mostrar el textInput i display
							textInput.classList.add("inblock");
							displaySelect.classList.add("inblock");

						}
					} //Es mostra el text del senzill
					//Res

				} //Si es mostra el FilterCOntains, no tocar

			}

		}
		function addSelected(nodeId, place) {
			event.preventDefault();
			var table = document.getElementById("tableResult");
			// var seÃ±ectorAndOrNot=document.getElementById("select_"+nodeId+"_"+(table.length-1));
			var selectorProperty = document.getElementById("selectorProperty" + place);
			var selectorCondition = document.getElementById("selectorCondition" + place);
			var textInput = document.getElementById("textInput" + place);
			var textInputInterval1 = document.getElementById("textInputInterval1" + place);
			var textInputInterval2 = document.getElementById("textInputInterval2" + place);
			var typeOfValues;

			//llegir taula
			var tableContent = [];
			tableContent = readTableFilterRow(nodeId, 0);
			// console.log("abans d'afegir: " + tableContent);

			//afegir els valors nous --> aixÃ² es canviarÃ  al borrar els and/or/not de la taula
			var property, condition, valueTextInput, numberCharacter, character;
			if (tableContent.length == 0) {
				tableContent.push("nothing");
				numberCharacter = 0;
			}
			else {
				numberCharacter = tableContent[tableContent.length - 1]; //es guarda el value com un nÃºmero

				// console.log(numberCharacter);
				tableContent.push("and"); //a borrar
			}


			property = selectorProperty.options[selectorProperty.selectedIndex].value;
			condition = selectorCondition.options[selectorCondition.selectedIndex].value;

			tableContent.push(property);
			tableContent.push(condition);

			if (textInput.classList.contains("hidden") == false) { //Agafar el Value segons quin textInput estigui actiu
				valueTextInput = textInput.value
				tableContent.push(valueTextInput);
				typeOfValues = typeOfValueFromInput("simple", place, valueTextInput);
				tableContent.push(typeOfValues);
			} else { //valors de l'interval
				var intervalValues = [];
				valueTextInput = textInputInterval1.value + "-" + textInputInterval2.value;
				intervalValues.push(textInputInterval1.value);
				intervalValues.push(textInputInterval2.value);

				tableContent.push(intervalValues);
				typeOfValues = typeOfValueFromInput("interval", place, textInputInterval1.value, textInputInterval2.value);
				tableContent.push(typeOfValues); //afegir el tipus
			}

			if (tableContent.length == 5) { //Afegir lletra al Array
				tableContent.push(0);
			} else {
				tableContent.push(numberCharacter + 1);
			}



			//borrar taula
			eraseTable();
			//pintar taula
			drawTable(nodeId, tableContent, "add");

			//afegir a la part grÃ fica --> S'haurÃ  de modificar el tablecharacters blabla

			addGraphicElement(nodeId, character, numberCharacter, tableContent, (table.rows.length - 1));




		}

		//Montar selectors
		const tableCharacters = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"]
		function createSelectorRowFilters(dataAttributes, nodeId, paramsNodeId) {
			//actualitzar STAdata del node
			networkNodes.get(paramsNodeId).STAdata = networkNodes.get(nodeId).STAdata;
			currentNode.id = paramsNodeId;
			networkNodes.update(networkNodes.get(paramsNodeId));

			var data = networkNodes.get(paramsNodeId).STAdata;

			var selectorStructureRow;
			var divFilterBox = document.getElementById("divSelectorRowsFilter");

			var optionsRow = document.createElement("div");
			optionsRow.setAttribute("id", "optionsRow");
			divFilterBox.appendChild(optionsRow);
			var label1 = document.createElement("label");
			label1.innerHTML = "Choose a Property";
			optionsRow.appendChild(label1);


			createSelect(1, "_optionsRow", "optionsRow", paramsNodeId, dataAttributes, "no", "initial", "no");
			createSelect(2, "_optionsRow", "optionsRow", paramsNodeId, dataAttributes, "no", "initial", "no");

			var label2 = document.createElement("label");
			label2.setAttribute("id", "label2");
			label2.innerHTML = "a Value";
			optionsRow.appendChild(label2);

			createSelect(3, "_optionsRow", "optionsRow", paramsNodeId, dataAttributes, "no", "initial", "no");

			// var instructions = document.createElement("div");
			// instructions.setAttribute("id", "instructions");
			// instructions.innerHTML = "Is not your value on the list? You can write it, click the button";
			// instructions.setAttribute("class", "instructions");
			// optionsRow.appendChild(instructions);

			var addButton = document.createElement("button");
			addButton.setAttribute("id", "addButton");
			addButton.setAttribute("onclick", "addSelected('" + paramsNodeId + "','_optionsRow')");
			addButton.innerHTML = "add";
			optionsRow.appendChild(addButton);

			var divLine = document.createElement("div");
			divLine.setAttribute("id", "divLine");
			divFilterBox.appendChild(divLine);

			var divResult = document.createElement("div"); //Taula de resultats
			divResult.id = "divResult";
			// divResult.setAttribute("class", "inblock");
			divResult.innerHTML = "These are your values selected to filter ";
			divLine.appendChild(divResult);

			var divGraphicOrder = document.createElement("div"); //Elements grÃ fics
			divGraphicOrder.setAttribute("id", "divGraphicOrder");
			divGraphicOrder.innerHTML = ""
			// divGraphicOrder.setAttribute("class", "inblock");
			divLine.appendChild(divGraphicOrder);


			//capsa que contÃ© els grÃ fics
			var divGraphicOrder1 = document.createElement("div");
			divGraphicOrder1.setAttribute("id", "divGraphicOrder_1_" + paramsNodeId);
			divGraphicOrder1.setAttribute("class", "divGraphicOrder1");
			divGraphicOrder1.setAttribute("data-lastLevelAdded", "0");
			divGraphicOrder1.setAttribute("data-isNumber2", "no");
			divGraphicOrder1.setAttribute("data-isNumber3", "no");
			divGraphicOrder1.innerHTML = "Arrange your filter";
			divGraphicOrder.appendChild(divGraphicOrder1);

			addNewGroupL1("0", paramsNodeId);

			var divIsAnObject = document.createElement("div"); //es veurÃ  quan la property seleccionada sigui un objecte
			divIsAnObject.setAttribute("id", "divIsAnObject");
			divIsAnObject.setAttribute("class", "hidden");
			var textIsAnObject = document.createElement("h5");
			textIsAnObject.setAttribute("id", "textIsAnObject");
			textIsAnObject.innerHTML = 'This property contains a set of values, if you want to sail inside it to choose one value, please use "separate colums" option before using "Row filter" option to unfold the values. Follow example below';
			divIsAnObject.appendChild(textIsAnObject);
			var imageIsAnObject = document.createElement("img");
			imageIsAnObject.setAttribute("src", "SeparateColumsExample.png");
			imageIsAnObject.setAttribute("height", "300");
			imageIsAnObject.setAttribute("id", "imageIsAnObject");

			divIsAnObject.appendChild(imageIsAnObject);
			divFilterBox.appendChild(divIsAnObject);

			var table = document.createElement("table");
			table.setAttribute("id", "tableResult");
			table.setAttribute("class", "borderTable");
			var tableTr = document.createElement("tr");
			tableTr.setAttribute("id", "tableTr0");
			tableTr.setAttribute("class", "borderTable");
			table.appendChild(tableTr);
			for (var i = 0; i < 5; i++) {
				var tableTh = document.createElement("th");
				tableTh.setAttribute("class", "borderTable");
				if (i == 1) {
					tableTh.innerHTML = "Property";

				} else if (i == 3) {
					tableTh.innerHTML = "Value";
				}
				tableTr.appendChild(tableTh)
			}

			divResult.appendChild(table);

			//omplir la taula si prÃ¨viament s'ha seleccionat algo

			var thisNode = networkNodes.get(paramsNodeId);
			if (thisNode.STASelectedRows || thisNode.STASelectedRowsTable) {
				var elementsPreviouslySelected;
				if (thisNode.STASelectedRows) {
					elementsPreviouslySelected = thisNode.STASelectedRows;
				} else if (thisNode.STASelectedRowsTable) {
					elementsPreviouslySelected = thisNode.STASelectedRowsTable;
				}
				drawTable(paramsNodeId, elementsPreviouslySelected, "add");
			}



		}
		function createSelect(number, place, place_Id, nodeId, dataAttributes, tableContent, button, editRowContent, typeOfValues) {
			var placeId = document.getElementById(place_Id);
			var select = document.createElement("select");
			var data, previousNode;

			var actualNode = networkNodes.get(nodeId);
			if (actualNode.image == "SelectRowsTable.png") { //actualitzar el STAdata del Node actual amb la info del previ

				previousNode = networkNodes.get(network.getConnectedNodes(nodeId, "from"));
				console.log(previousNode);
				// data = previousNode.STAdata;
				actualNode.STAdata = previousNode[0].STAdata;
				networkNodes.update(actualNode);
				data = actualNode.STAdata;

			} else {
				data = networkNodes.get(nodeId).STAdata;
			}



			//console.log(nodeId)
			var dataAttributes2;
			if (button != "initial") {
				var table = document.getElementById("tableResult");
				var rowsNumbers = table.rows.length;
			}

			if (dataAttributes === "no") {
				dataAttributes2 = getDataAttributes(data);
			}
			else {
				dataAttributes2 = dataAttributes;
			};


			var dataAttributesKeys = Object.keys(dataAttributes2); //Crear un array amb les keys de l'objecte
			var dataAttributesFiltered = dataAttributesKeys.filter((element) =>
				element != "@iot.selfLink"
			);
			// console.log(dataAttributesFiltered);
			if (number == 1) {
				select.setAttribute("id", "selectorProperty" + place);
				select.setAttribute("onChange", "fillValueSelector('" + nodeId + "','" + place + "')");
				for (let i = 0; i < dataAttributesFiltered.length; i++) {// per omplir el de property/property
					var option = document.createElement("option");
					option.setAttribute("value", dataAttributesFiltered[i]);
					option.innerHTML = dataAttributesFiltered[i];
					if (editRowContent !== 'undefined' & button == "edit") {
						if (dataAttributesFiltered[i] == editRowContent[number]) {
							option.setAttribute("selected", true);
						}
					}
					select.appendChild(option);
					//}
				}
				placeId.appendChild(select);
			}
			else if (number == 2) {
				select.setAttribute("id", "selectorCondition" + place);
				var selectContent;
				//que posar en funciÃ³ de si es interval o no



				//al for canviarho pel 2
				var selectConditionContent2;
				if (button == "edit") {
					var typeOfValues = typeOfValueFromInput("simple", place, editRowContent[2]);
					console.log(typeOfValues);
					if (typeOfValues == "number") {
						selectConditionContent2 = selectConditionContentNumber;
					} else if (typeOfValues == "text") { //text
						selectConditionContent2 = selectConditionContentText;
					} else { //dataÂ´and empty
						selectConditionContent2 = selectConditionContent;
					}
				} else {
					//console.log("no entra al edit")
					selectConditionContent2 = selectConditionContent;
				}


				for (var i = 0; i < selectConditionContent2.length; i++) { //crear les opcions del selector de condiciÃ³
					var opcioCondicio = document.createElement("option");
					opcioCondicio.setAttribute("value", selectConditionContent2[i]);
					select.setAttribute("onChange", "showIntervalSelector('" + nodeId + "','" + place + "')"); //!!!!!!!!!!!!!!!!!!!!!!!!!!!!INTERVAL
					opcioCondicio.innerHTML = selectConditionContent2[i];
					// console.log(selectConditionContent2[i])
					if (editRowContent !== 'undefined' & (button == "edit")) {
						console.log("i: " + i + ", editRow[2]: " + editRowContent[2]);
						if (selectConditionContent2[i] == editRowContent[2]) { //no acaba d'anar (xq ja no es i)
							opcioCondicio.setAttribute("selected", true);
						}
					}
					select.appendChild(opcioCondicio);
				}
				placeId.appendChild(select);

			}
			else if (number == 3) { //la caixa de select, ok i butÃ³ de canvi

				//Select senzill
				var divFilterContainer = document.createElement("div");
				divFilterContainer.setAttribute("id", "divFilterContainer" + place);
				divFilterContainer.setAttribute("class", "hidden");
				placeId.appendChild(divFilterContainer);

				select.setAttribute("id", "selectorValue" + place);
				select.setAttribute("onChange", "isAnObject('" + nodeId + "','" + place + "')");

				var valor;
				var arrayValors = [];

				for (let index = 0; index < data.length; index++) {
					if (button == "edit") {
						valor = data[index][editRowContent[1]];
					}
					else {
						valor = data[index][dataAttributesFiltered[0]];

					}

					if (!arrayValors.find(element => element == valor)) {
						var option = document.createElement("option");
						option.setAttribute("value", valor);
						option.innerHTML = valor;
						select.appendChild(option);
						arrayValors.push(valor);
					} else {
						console.log("en el else");
					}
				}

				divFilterContainer.appendChild(select);

				var textInput = document.createElement("input");
				textInput.setAttribute("id", "textInput" + place);
				textInput.setAttribute("type", "text");
				textInput.addEventListener("input", function () {
					adjustWidth(place, place_Id, "simple", nodeId)
				});
				textInput.addEventListener("keypress", function (event) {
					// If the user presses the "Enter" key on the keyboard
					if (event.key === "Enter") {
						event.preventDefault();
						if (place == "_optionsRow") {
							addSelected(nodeId, place);
						}

					}
				});

				placeId.appendChild(textInput);
				if (button == "edit") {
					textInput.value = editRowContent[3];
					adjustWidth(place, place_Id, "simple", nodeId);
				}

				var row = rowsNumbers - 1;
				var okButton = document.createElement("button");
				okButton.setAttribute("onclick", "closeModalSelect('" + place + "','" + place_Id + "','ok'," + row + ",'simple','" + nodeId + "')");
				okButton.setAttribute("id", "okButton" + place);
				okButton.innerHTML = "Ok";

				divFilterContainer.appendChild(select);
				var cancelButton = document.createElement("button");
				// console.log("inici place_id:  " + place_Id)
				cancelButton.setAttribute("onclick", "closeModalSelect('" + place + "','" + place_Id + "','cancel'," + row + ",'simple','" + nodeId + "')");
				cancelButton.setAttribute("id", "cancelButton" + place);
				cancelButton.innerHTML = "Cancel";

				var writeButton = document.createElement("button");
				writeButton.setAttribute("id", "displaySelect" + place);
				writeButton.setAttribute("onclick", "changeWriteToSelect('" + nodeId + "','" + place + "','simple')");
				placeId.appendChild(writeButton);
				divFilterContainer.appendChild(okButton);
				divFilterContainer.appendChild(cancelButton);

				var buttonImage2 = document.createElement("img"); //Imatge decorativa del botÃ³
				buttonImage2.setAttribute("src", "botoDesplegable.png");
				buttonImage2.setAttribute("class", "buttonImage");
				writeButton.appendChild(buttonImage2);

				//Selects dels intervals
				var divFilterContainer2 = document.createElement("div");
				divFilterContainer2.setAttribute("id", "divFilterContainer2" + place);
				divFilterContainer2.setAttribute("class", "hidden");
				placeId.appendChild(divFilterContainer2);

				var selectorValueInterval1 = select.cloneNode(true); //aixÃ­ ja s'omple com l'altre
				selectorValueInterval1.setAttribute("id", "selectorValueInterval1" + place);
				var selectorValueInterval2 = select.cloneNode(true);
				selectorValueInterval2.setAttribute("id", "selectorValueInterval2" + place);
				divFilterContainer2.appendChild(selectorValueInterval1);
				divFilterContainer2.appendChild(selectorValueInterval2);

				var textInputInterval1 = textInput.cloneNode(true);
				textInputInterval1.setAttribute("id", "textInputInterval1" + place);
				var textInputInterval2 = textInput.cloneNode(true);
				textInputInterval2.setAttribute("id", "textInputInterval2" + place);
				textInputInterval1.setAttribute("class", "hidden");
				textInputInterval2.setAttribute("class", "hidden");
				textInputInterval1.addEventListener("input", function () {
					adjustWidth(place, place_Id, "interval", nodeId)
				});
				textInputInterval2.addEventListener("input", function () {
					adjustWidth(place, place_Id, "interval", nodeId)
				});
				placeId.appendChild(textInputInterval1);
				placeId.appendChild(textInputInterval2);


				var okButtonInterval = document.createElement("button");
				okButtonInterval.setAttribute("onclick", "closeModalSelect('" + place + "','" + place_Id + "','ok'," + row + ",'interval','" + nodeId + "')");
				okButtonInterval.setAttribute("id", "okButtonInterval" + place);
				okButtonInterval.innerHTML = "Ok";

				var cancelButtonInterval = document.createElement("button");
				cancelButtonInterval.setAttribute("onclick", "closeModalSelect('" + place + "','" + place_Id + "','cancel'," + row + ",'interval','" + nodeId + "')");
				cancelButtonInterval.setAttribute("id", "cancelButtonInterval" + place);
				cancelButtonInterval.innerHTML = "Cancel";

				var writeButton2 = document.createElement("button");
				writeButton2.innerHTML = "...";
				writeButton2.setAttribute("id", "displaySelectInterval" + place);
				writeButton2.setAttribute("onclick", "changeWriteToSelect('" + nodeId + "','" + place + "','interval')");
				writeButton2.setAttribute("class", "hidden");

				placeId.appendChild(writeButton2);
				divFilterContainer2.appendChild(okButtonInterval);
				divFilterContainer2.appendChild(cancelButtonInterval);


			}

		}
		function fillValueSelector(nodeId, place) {
			var data = networkNodes.get(nodeId).STAdata;
			var select;
			select = document.getElementById("selectorProperty" + place);
			var selectedProperty = select.options[select.selectedIndex].value;
			var selectorValue, selectorValueInterval, selectorValueInterval2;


			selectorValue = document.getElementById("selectorValue" + place);
			selectorValue.innerHTML = "";
			selectorValueInterval = document.getElementById("selectorValueInterval1" + place);
			selectorValueInterval.innerHTML = "";
			selectorValueInterval2 = document.getElementById("selectorValueInterval2" + place);
			selectorValueInterval2.innerHTML = "";

			var valor;
			var arrayValors = [];
			var isAnObject;

			// s'ha de filtrar
			for (var index = 0; index < data.length; index++) { //crear array de valors
				valor = data[index][selectedProperty];
				// console.log(typeof valor);
				if (typeof valor === "object") isAnObject = "yes";
				if (!arrayValors.find(element => element == valor)) {
					arrayValors.push(valor);
				} else {
					// console.log("en el else");
				}
			}

			console.log(arrayValors);

			for (var i = 0; i < arrayValors.length; i++) { //omplir selector simple
				var opcio = document.createElement("option");
				var opcio2 = document.createElement("option");
				var opcio3 = document.createElement("option");
				valor = arrayValors[i];
				opcio.setAttribute("value", valor);
				opcio2.setAttribute("value", valor);
				opcio3.setAttribute("value", valor);
				opcio.innerHTML = valor;
				opcio2.innerHTML = valor;
				opcio3.innerHTML = valor;
				selectorValue.appendChild(opcio);
				selectorValueInterval.appendChild(opcio2);
				selectorValueInterval2.appendChild(opcio3);
			}
			var divIsAnObject = document.getElementById("divIsAnObject");
			var addButton = document.getElementById("addButton");
			var table = document.getElementById("tableResult");
			var rowsNumbers = table.rows.length;
			var buttonSave;

			if (isAnObject === "yes") { //no estÃ  acabat (falta interval i alguna cosa mÃ©s)
				selectorValue.setAttribute("class", "objectInSelect");
				divIsAnObject.classList.remove("hidden");
				addButton.disabled = true;


				for (var i = 1; i < rowsNumbers; i++) {

					// if (row == i) {
					// 	buttonSave = document.getElementById("buttonSave" + i);
					// 	if (!buttonSave.contains("hidden")) {
					// 		buttonSave.disabled = true;
					// 	};
					// }

				}
			} else {
				selectorValue.classList.remove("objectInSelect");
				divIsAnObject.classList.add("hidden");
				addButton.disabled = false;
				for (var i = 1; i < rowsNumbers; i++) {
					// if (row == i) {
					// 	buttonSave = document.getElementById("buttonSave" + i);
					// 	if (!buttonSave.contains("hidden")) {
					// 		buttonSave.disabled = false;
					// 	};
					// }
				}
			}
		}
		function closeModalSelect(place, place_Id, button, row, selector, nodeId) { //BotÃ³ cÃ ncel i ok dels selectors
			event.preventDefault();
			var divFilterContainer = document.getElementById("divFilterContainer" + place);
			var textInput = document.getElementById("textInput" + place);
			var displaySelect = document.getElementById("displaySelect" + place);

			var divFilterContainer2 = document.getElementById("divFilterContainer2" + place);
			var textInputInterval1 = document.getElementById("textInputInterval1" + place);
			var textInputInterval2 = document.getElementById("textInputInterval2" + place);
			var displaySelectInterval = document.getElementById("displaySelectInterval" + place);

			var addButton = document.getElementById("addButton");
			var saveButton = document.getElementById("buttonSave" + row);

			var interval;

			//Si ve del senzill. Amagar el container i mostrar el text i el display
			if (divFilterContainer.classList.contains("hidden") == false) {
				divFilterContainer.classList.remove("inblock");
				divFilterContainer.classList.add("hidden");
				textInput.classList.add("inblock");
				textInput.classList.remove("hidden");
				displaySelect.classList.add("inblock");
				displaySelect.classList.remove("hidden");
				interval = false;
			} else {//Si ve del Interval. Amagar el container i mostrar els textos i el display
				divFilterContainer2.classList.remove("inblock");
				divFilterContainer2.classList.add("hidden");
				textInputInterval1.classList.add("inblock");
				textInputInterval1.classList.remove("hidden");
				textInputInterval2.classList.add("inblock");
				textInputInterval2.classList.remove("hidden");
				displaySelectInterval.classList.add("inblock");
				displaySelectInterval.classList.remove("hidden");
				interval = true;
			}

			addButton.disabled = false;
			if (place != "_optionsRow") {
				saveButton.disabled = false;
			}

			//Falta escriure l'opcio del select (???')')
			if (button == "ok") {
				if (interval == false) {
					var selectorValue = document.getElementById("selectorValue" + place);
					textInput.value = selectorValue.options[selectorValue.selectedIndex].value;
					adjustWidth(place, place_Id, "simple", nodeId);
				} else {
					var selectorValueInterval1 = document.getElementById("selectorValueInterval1" + place);
					var selectorValueInterval2 = document.getElementById("selectorValueInterval2" + place);
					textInputInterval1.value = selectorValueInterval1.options[selectorValueInterval1.selectedIndex].value;
					textInputInterval2.value = selectorValueInterval2.options[selectorValueInterval2.selectedIndex].value;
					adjustWidth(place, place_Id, "interval", nodeId);

				}

			}


		}
		function changeSelectConditionValues(place, wichTextInput, value1, valueInput1, valueInput2) {
			var typeOfValues;
			var selectCondition = document.getElementById("selectorCondition" + place);

			if (wichTextInput == "simple") {
				typeOfValues = typeOfValueFromInput(wichTextInput, place, value1);

			} else {
				typeOfValues = typeOfValueFromInput(wichTextInput, place, valueInput1, valueInput2);
			}
			var actualConditionSelected = selectCondition.options[selectCondition.selectedIndex].value;
			if (wichTextInput == "simple") {
				//remove options (childs)
				var child = selectCondition.lastElementChild;
				while (child) {
					selectCondition.removeChild(child);
					child = selectCondition.lastElementChild;
				}
			}

			var selectContent;
			if (typeOfValues == "number") { selectContent = selectConditionContentNumber; }
			else if (typeOfValues == "text") { selectContent = selectConditionContentText; } //text
			else { selectContent = selectConditionContent; }//data and empty


			for (var i = 0; i < selectContent.length; i++) { //crear les opcions del selector de condiciÃ³
				var opcioCondicio = document.createElement("option");
				opcioCondicio.setAttribute("value", selectContent[i]);

				opcioCondicio.innerHTML = selectContent[i];
				if (selectContent[i] == actualConditionSelected) {
					opcioCondicio.setAttribute("selected", true);
				}
				selectCondition.appendChild(opcioCondicio);
			}
		}
		function adjustWidth(place, placeId, wichTextInput, nodeId) { //and refill conditionSelect (interval if it is a number or a date)
			var textInput, textIputInterval1, textIputInterval2;
			if (wichTextInput == "simple") { textInput = document.getElementById("textInput" + place); }
			else {
				textIputInterval1 = document.getElementById("textInputInterval1" + place);
				textIputInterval2 = document.getElementById("textInputInterval2" + place);
			}

			var value1, valueInput1, valueInput2;
			var valueLength, valueLengthInterval1, valueLengthInterval2;
			var width, withInterval1, withInterval2;


			if (wichTextInput == "interval") {
				valueInput1 = textIputInterval1.value;
				valueLengthInterval1 = valueInput1.length;
				valueInput2 = textIputInterval2.value;
				valueLengthInterval2 = valueInput2.length;
			} else {
				value1 = textInput.value;
				valueLength = value1.length;
			}

			if (valueLength > 15) {
				width = valueLength * 8; // 8px per character
				textInput.style.width = width + "px";
				if (wichTextInput == "interval") {
					withInterval1 = valueLengthInterval1 * 8; // 8px per character
					textIputInterval1.style.width = withInterval1 + "px";
					withInterval2 = valueLengthInterval2 * 8; // 8px per character
					textIputInterval2.style.width = withInterval2 + "px";
				}
			} else if (valueLength <= 15) {
				textInput.style.width = "100px";
				if (wichTextInput == "interval") {
					textInput1.style.width = "100px";
					textInput2.style.width = "100px";
				}
			}

			changeSelectConditionValues(place, wichTextInput, value1, valueInput1, valueInput2); //canviar les opcions del selector en funciÃ³ del tipus de valor del inputText

			//control del filter i el simple buit
			var addButton = document.getElementById("addButton");
			var typeOfValues;
			if (wichTextInput == "interval") {
				typeOfValues = typeOfValueFromInput(wichTextInput, place, valueInput1, valueInput2);
				if (typeOfValues == "text" || typeOfValues == "empty") {
					addButton.disabled = true;
				} else {
					addButton.disabled = false;
				}
			} else {
				typeOfValues = typeOfValueFromInput(wichTextInput, place, value1);
				if (typeOfValues == "empty") {
					addButton.disabled = true;
				} else {
					addButton.disabled = false;
				}
			}
		}

		//Funcions de la taula
		var charactersInTable = [];
		function readTableFilterRow(nodeId, row) {
			var table = document.getElementById("tableResult");
			var tableResults = []; //on es guarden els valors de la taula
			var rowsNumber = table.rows.length;
			var property, propertyText, condition, conditionText, valor, valueText, valueText2, selectorProperty, selectorCondition, inputValue, typeOfValue;

			if (rowsNumber > 1) {
				for (var r = 1; r < rowsNumber; r++) {
					if (row != 0) {
						r = row
					}
					property = document.getElementById("th_" + nodeId + "_" + (r) + "_property");
					if (property.children.length > 0) {//per la saveRow
						selectorProperty = document.getElementById("selectorProperty_tableResult");
						propertyText = selectorProperty.options[selectorProperty.selectedIndex].value;

					} else {
						propertyText = property.innerHTML;
					}
					condition = document.getElementById("th_" + nodeId + "_" + (r) + "_condition");
					if (condition.children.length > 0) {
						selectorCondition = document.getElementById("selectorCondition_tableResult");
						conditionText = selectorCondition.options[selectorCondition.selectedIndex].value;
					} else {
						conditionText = condition.getAttribute("value");
					}

					valor = document.getElementById("th_" + nodeId + "_" + (r) + "_value");
					var arrayValors = [];
					var valueOfValor = valor.getAttribute("value");
					if (valor.children.length > 0) { //en el saveRow
						if (conditionText == " [a,b] " || conditionText == " (a,b] " || conditionText == " [a,b) " || conditionText == " (a,b) ") {
							var inputText1 = document.getElementById("textInputInterval1_tableResult");
							var inputText2 = document.getElementById("textInputInterval2_tableResult");
							// arrayValors.push(inputText1.value);
							// arrayValors.push(inputText2.value);
							valor.setAttribute("value", inputText1.value + "---" + inputText2.value);
							valueOfValor = valor.getAttribute("value");
						} else { //No interval
							inputValue = document.getElementById("textInput_tableResult");
							valueText = inputValue.value;
							if (valor.getAttribute("value") != null) {
								valor.setAttribute("value", null);
							}
						}
					}
					else { //Els que no sÃ³n el saveRow
						//mirar si Ã©s un interval (ContÃ© ---al value)
						valueOfValor = valor.getAttribute("value")
						if (valueOfValor != null) {
							if (valueOfValor.includes("---")) { //se que tÃ© un interval.
								//Agafar el abans i despres i posarlo en un array
								valueText = valueOfValor;
								console.log("inclou ---:    " + valueText);
							}
						} else {
							valueText = valor.innerHTML;

						}
					}

					if (r == 1) { //primera fila: Es borrarÃ  al treure els ands i tal
						tableResults.push("nothing");
					}
					else {
						var selectAndOrNot = document.getElementById("select_" + nodeId + "_" + r);
						tableResults.push(selectAndOrNot.options[selectAndOrNot.selectedIndex].value);
					}
					tableResults.push(propertyText);
					tableResults.push(conditionText);

					var type;
					if (valueOfValor != null) { //interval
						if (valueOfValor.includes("---")) { //se que tÃ© un interval.
							arrayValors.push(valueOfValor.split("---")[0]);
							arrayValors.push(valueOfValor.split("---")[1]);
							tableResults.push(arrayValors);
							type = typeOfValueFromInput("interval", "_tableResult", arrayValors[0], arrayValors[1]);
							tableResults.push(type);
						}
					} else {//simple
						tableResults.push(valueText);
						type = typeOfValueFromInput("simple", "_tableResult", valueText, "no");
						tableResults.push(type);
					}



					var character = document.getElementById("th_" + nodeId + "_" + r + "_character");

					tableResults.push(parseInt(character.getAttribute("value")));


					if (row !== 0) {
						r = rowsNumber;
					}

				}

			}

			return tableResults;
		}
		function drawTable(nodeId, tableContentNew, button, row, editRowContent) {
			charactersInTable = []; //perque no s'acumuli l'anterior. Es torna a omplir de nou.
			var contador = 1;
			var table = document.getElementById("tableResult");
			// console.log("el q escriu: " + tableContentNew);


			if (tableContentNew.length != 0) {
				for (var r = 0; r < tableContentNew.length; r += 6) { //recorrerem tot l'arrai dels elements guardats, de 5 en 5 (5valors a guardar per linea)
					var tableTr = document.createElement("tr");
					tableTr.setAttribute("id", "tableTr_" + contador); //Fila 1, 2, 3, 4.. (contador suma 1 per volta)
					table.appendChild(tableTr);

					for (var a = 0; a < 6; a++) { //6 columnes (crearem cada fila, columna a columna. La a indica la columna)comenÃ§a al 0 perque l'arrai comenÃ§a en [0]
						var tableTh = document.createElement("th");
						tableTh.setAttribute("class", "borderTable");

						if (a == 0) { //Columna del ar or not ()
							tableTr.appendChild(tableTh);
							if (contador != 1) { //no hi ha select en la primera. Al comenÃ§ar per 1 nomes no posarÃ  el primer
								var selectAndOr = document.createElement("select");
								selectAndOr.setAttribute("id", "select_" + nodeId + "_" + (contador));
								tableTh.appendChild(selectAndOr);
								for (var s = 0; s < 3; s++) { //omplim select (3 opcions: and, or, not) FUNCIONA BÃ AMB ADD
									var optionSelect = document.createElement("option");
									if (s == 0) {
										if (button == "edit" || button == "delete" || button == "add" || button == "save") {
											if (tableContentNew[r] == "and") { //r= 0,3,7,11...
												optionSelect.setAttribute("selected", true);
											}
										}
										optionSelect.setAttribute("value", "and");
										optionSelect.innerHTML = "And";
									}
									else if (s == 1) {
										if (button == "edit" || button == "delete" || button == "add" || button == "save") {
											if (tableContentNew[r] == "or") {
												optionSelect.setAttribute("selected", true);
											}
										}

										optionSelect.setAttribute("value", "or");
										optionSelect.innerHTML = "Or";
									}
									else if (s == 2) {
										if (button == "edit" || button == "delete" || button == "add" || button == "save") {
											if (tableContentNew[r] == "not") {
												optionSelect.setAttribute("selected", true);
											}
										}
										optionSelect.setAttribute("value", "not");
										optionSelect.innerHTML = "Not";
									}

									selectAndOr.appendChild(optionSelect);
								}
							}

						}
						else if (a == 1) { //2a columna, property
							var idProperty = "th_" + nodeId + "_" + (contador) + "_property";
							tableTh.setAttribute("id", idProperty);

							tableTr.appendChild(tableTh);

							if (button == "delete" || button == "add" || (button == "edit" & contador != row) || button == "save") {
								tableTh.innerHTML = tableContentNew[(r + 1)]; //es la r +1 xq son les posicions del array 1,4,7...
							}
							else if ((button == "edit" & contador == row)) {
								//muntar input/select amb opicio seleccionada

								// console.log(tableContentNew[(r + 1)]);

								createSelect(1, "_tableResult", idProperty, nodeId, "no", tableContentNew, button, editRowContent);

							}

						}
						else if (a == 2) {
							var idCondition = "th_" + nodeId + "_" + (contador) + "_condition";
							tableTh.setAttribute("id", idCondition);
							tableTr.appendChild(tableTh);

							//mirar tipus de dada
							var typeOfValues;
							var value1 = tableContentNew[(r + 3)];
							typeOfValues = tableContentNew[(r + 4)];

							var selectContent;
							if (typeOfValues == "number") { selectContent = selectConditionContentNumber; }
							else if (typeOfValues == "text") { selectContent = selectConditionContentText; } //text
							else { selectContent = selectConditionContent; }//data and empty



							if (button === "delete" || button == "add" || (button == "edit" & contador != row) || button == "save") {
								tableTh.innerHTML = [tableContentNew[r + 2]];
								tableTh.setAttribute("value", [tableContentNew[r + 2]]);

							}
							else if ((button == "edit" & contador == row)) {
								//muntar input/select amb opicio seleccionada
								createSelect(2, "_tableResult", idCondition, nodeId, "no", tableContentNew, button, editRowContent);

							}

						}
						else if (a == 3) {
							var idValue = "th_" + nodeId + "_" + (contador) + "_value";
							tableTr.appendChild(tableTh);
							tableTh.setAttribute("id", idValue);
							if (button === "delete" || button == "add" || (button == "edit" & contador != row) || button == "save") {
								if (Array.isArray(tableContentNew[(r + 3)]) == true) {
									console.log(tableContentNew[(r + 3)]);
									console.log("Ã©s un arraaay");
									tableTh.setAttribute("value", tableContentNew[(r + 3)][0] + "---" + tableContentNew[(r + 3)][1]);
									// tableTh.setAttribute("value", tableContentNew[(r + 3)]);
								} else {
									// console.log("nop")
								}
								tableTh.innerHTML = tableContentNew[(r + 3)];

							}
							else if ((button == "edit" & contador == row)) {
								// 	//muntar input/select amb opicio seleccionada
								//console.log(tableContentNew[(r + 3)]);
								createSelect(3, "_tableResult", idValue, nodeId, "no", tableContentNew, button, editRowContent);


							}


						}
						else if (a == 4) {
							tableTr.appendChild(tableTh);
							var buttonDelete = document.createElement("button");
							buttonDelete.setAttribute("value", contador);
							buttonDelete.setAttribute("id", "buttonDelete" + contador);
							buttonDelete.setAttribute("onclick", "deleteRow(" + (contador) + ",'" + nodeId + "')");
							buttonDelete.innerHTML = "Delete ";
							tableTh.appendChild(buttonDelete);
							var buttonEdit = document.createElement("button");
							buttonEdit.setAttribute("value", contador);
							buttonEdit.setAttribute("id", "buttonEdit" + contador);
							buttonEdit.setAttribute("onclick", "editRow(" + (contador) + ",'" + nodeId + "')");
							buttonEdit.innerHTML = "Edit ";
							tableTh.appendChild(buttonEdit);
							var buttonSave = document.createElement("button");
							buttonSave.setAttribute("value", contador);
							buttonSave.setAttribute("class", "hidden");
							buttonSave.setAttribute("id", "buttonSave" + contador);
							buttonSave.setAttribute("onclick", "saveRow(" + (contador) + ",'" + nodeId + "')");
							buttonSave.innerHTML = "Save ";
							tableTh.appendChild(buttonSave);


						}
						else if (a == 5) {
							tableTr.appendChild(tableTh);
							var index;



							// if (r != 0 & ((r + 7) > tableContentNew.length)) { //per l'ultim, els que ja estan es posen directament.
							// 	index = tableContentNew[(r + 5)]; //+5 xq en el +4 hi ha el tipus de value
							// 	console.log(tableContentNew[(r + 5)]);
							// 	console.log(index);
							// 	console.log("Ãºltim")
							// 	tableTh.innerHTML = tableCharacters[index+1];//tableCharacters[index + 1];
							// 	tableTh.setAttribute("value",index+1);

							// } else {


							tableTh.innerHTML = tableCharacters[tableContentNew[(r + 5)]] //El guardat al llegir la taula
							charactersInTable.push(tableCharacters[tableContentNew[(r + 5)]]); //per poder borrar el que toca desprÃ©s
							tableTh.setAttribute("value", tableContentNew[(r + 5)]);
							//}
							var idCharacter = "th_" + nodeId + "_" + (contador) + "_character";
							tableTh.setAttribute("id", idCharacter);

						}

					}

					contador++;
				}
			}

			console.log(charactersInTable);
		}
		function eraseTable() {
			var table = document.getElementById("tableResult");
			var a = 1;
			var rowsNumbers = table.rows.length;
			while (rowsNumbers > 1) { //borrem la taula menys la primera fila
				table.deleteRow(a);
				rowsNumbers = table.rows.length;
			}
		}
		function saveRow(row, nodeId) {
			event.preventDefault();
			var tableContent = readTableFilterRow(nodeId, 0);
			var table = document.getElementById("tableResult");
			var a = 1;
			var rowsNumbers = table.rows.length;
			while (rowsNumbers > 1) { //borrem la taula menys la primera fila
				table.deleteRow(a);
				rowsNumbers = table.rows.length;
			}

			drawTable(nodeId, tableContent, "save", row, "no");

			//amagar i mostrar botons

			var rowsNumbers = table.rows.length;
			var buttonEdit, buttonDelete, buttonInsert, buttonSave;
			for (var i = 1; i < rowsNumbers; i++) {
				buttonEdit = document.getElementById("buttonEdit" + i);
				buttonDelete = document.getElementById("buttonDelete" + i);
				buttonInsert = document.getElementById("buttonInsert" + i);


				buttonEdit.classList.remove("hidden");
				buttonDelete.classList.remove("hidden");
				buttonInsert.classList.remove("hidden");

			}
			var addButton = document.getElementById("addButton");
			addButton.disabled = false;
		}
		function editRow(row, nodeId) {
			event.preventDefault();
			var tableContent = readTableFilterRow(nodeId, 0);


			//Agafar les dades de la fila

			var editRowContent = readTableFilterRow(nodeId, row);
			console.log("editRowContent: " + editRowContent);

			//borrar taula
			eraseTable();
			//pintar la taula canviat els valors pels selects i tenint la seleccio del select posada al input

			drawTable(nodeId, tableContent, "edit", row, editRowContent);
			var table = document.getElementById("tableResult");
			var rowsNumbers = table.rows.length;

			//desabilitar el add
			var addButton = document.getElementById("addButton");
			addButton.disabled = true;

			//amagar els botons de edit,Insert, mostrar botÃ³ save i mantenir suprimir

			var buttonEdit, buttonDelete, buttonInsert, buttonSave;
			for (var i = 1; i < rowsNumbers; i++) {
				buttonEdit = document.getElementById("buttonEdit" + i);
				buttonDelete = document.getElementById("buttonDelete" + i);
				buttonInsert = document.getElementById("buttonInsert" + i);


				buttonEdit.classList.add("hidden");
				buttonDelete.classList.add("hidden");
				buttonInsert.classList.add("hidden");



				if (row == i) {
					buttonSave = document.getElementById("buttonSave" + i);
					buttonSave.classList.remove("hidden");
				}

			}
		}

		function deleteRow(row, nodeId, character) {
			event.preventDefault();
			var tableContent = readTableFilterRow(nodeId, 0); //agafar els valors de la taula

			var table = document.getElementById("tableResult");
			var a = 1;
			var rowsNumbers2 = table.rows.length;
			var newRow;
			//si ve del grÃ fic, la row s'ha de buscar
			if (row == "no") {
				console.log(character);
				console.log(filteringInstructions);
				newRow = (charactersInTable.indexOf(character)) + 1;
			} else {
				newRow = row;
			}
			console.log(newRow)


			//Eliminar l'element de la part grÃ fica
			deleteCharacterInGraphic(nodeId, newRow);

			///Borrar la taula
			while (rowsNumbers2 > 1) { //borrem la taula menys la primera fila
				table.deleteRow(a);
				rowsNumbers2 = table.rows.length;
			}

			//treure les dades de la fila eliminada de les dades guardades
			var tableContentNew = [];
			var contador = 1;

			for (var i = 0; i < tableContent.length; i += 6) {
				if (newRow != contador) {
					tableContentNew.push(tableContent[i]);
					tableContentNew.push(tableContent[i + 1]);
					tableContentNew.push(tableContent[i + 2]);
					tableContentNew.push(tableContent[i + 3]);
					tableContentNew.push(tableContent[i + 4]);
					tableContentNew.push(tableContent[i + 5]);
				}

				contador++;
			}

			contador = 1;
			//tornar a pintar la taula
			drawTable(nodeId, tableContentNew, "delete");

		}


		//Funcions part grÃ fica
		var filteringInstructions = [];
		function addNewGroupL1(number, nodeId) {
			var divGraphicOrder1 = document.getElementById("divGraphicOrder_1_" + nodeId);
			var boxlevel2;
			var actualBoxLevel;
			var isNumber2 = divGraphicOrder1.getAttribute("data-isNumber2");

			if (number == "0") {
				//actualBoxLevel = document.getElementById("boxLevel_1_1");
			} else {
				actualBoxLevel = document.getElementById("boxLevel_1_" + number);
			}
			var boxLevel = document.createElement("div");
			var data_boxL2;
			var creatingL2 = false;

			//Si Ã©s el 2n, crear un grup2
			if (divGraphicOrder1.children.length == 1 & isNumber2 == "no") { //si es vol crear el segon
				// var boxLevel1_1 = document.getElementById("boxLevel_1_1");
				var clonedNode = actualBoxLevel.cloneNode(true);
				actualBoxLevel.remove();
				clonedNode.setAttribute("data-boxl2", "1");
				boxlevel2 = document.createElement("div");
				boxlevel2.setAttribute("id", "boxLevel_2_1");
				boxlevel2.setAttribute("class", "boxLevel2");
				divGraphicOrder1.appendChild(boxlevel2);
				boxlevel2.appendChild(clonedNode);
				divGraphicOrder1.setAttribute("data-isNumber2", "yes");
				console.log("clone");
				data_boxL2 = "1";
				creatingL2 = true;
				//renovar instruccions (estÃ  al final)

				//estructura par esquerra
				var BoxForL1 = document.createElement("div");
				BoxForL1.setAttribute("class", "boxForL1");
				BoxForL1.setAttribute("id", "boxForL1_2_1");
				boxlevel2.appendChild(BoxForL1);
				BoxForL1.appendChild(clonedNode);

				//estructura del select
				var conditionSelectorBoxL2 = document.createElement("div");
				conditionSelectorBoxL2.setAttribute("class", "conditionSelectorBoxL2");
				conditionSelectorBoxL2.setAttribute("id", "conditionSelectorBox_2_1");
				boxlevel2.appendChild(conditionSelectorBoxL2);
				//select
				var selectConditionL2 = document.createElement("select");
				selectConditionL2.setAttribute("id", "selectCondition_2_" + newNumber);
				selectConditionL2.setAttribute("class", "selectConditionL2");
				for (var i = 0; i < 3; i++) {
					var option = document.createElement("option");
					var value;
					if (i == 0) {
						value = "and";
					} else if (i == 1) {
						value = "or";
					} else if (i == 2) {
						value = "not";
					}
					option.innerHTML = value;
					option.setAttribute("value", value);
					selectConditionL2.appendChild(option);
				}
				conditionSelectorBoxL2.appendChild(selectConditionL2);

				//botons (+ i delete)
				var divPlusL2 = document.createElement("div");
				var divTrashL2 = document.createElement("div");
				divPlusL2.setAttribute("onclick", "addNewGroupL2('1','" + nodeId + "')");
				divPlusL2.setAttribute("class", "divPlusL2");
				divPlusL2.innerHTML = "+";
				divPlusL2.setAttribute("title", "Add new group");
				divTrashL2.setAttribute("onclick", "deleteGroupL2('1','" + nodeId + "')");
				divTrashL2.setAttribute("class", "divTrashL2");
				divTrashL2.setAttribute("title", "Delete group");

				conditionSelectorBoxL2.appendChild(divPlusL2);
				conditionSelectorBoxL2.appendChild(divTrashL2);



			}
			else {

				if (number != 0) { //quan ja hi ha mÃ©s de dos i existeix un L2
					data_boxL2 = actualBoxLevel.getAttribute("data-boxl2");
					console.log(data_boxL2);
				}
				else { //el primer
					//data_boxL2 = "1";
					//boxLevel.setAttribute("data-boxl2", data_boxL2);

				}
				boxlevel2 = document.getElementById("boxForL1_2_" + data_boxL2);

			}

			var characterBoxContainer = document.createElement("div");
			var conditionSelectorBox = document.createElement("div");
			var selectCondition = document.createElement("select");
			var divPlus = document.createElement("div");
			var divTrash = document.createElement("div");
			//mirar quin Ã©s l'ultim nÃºmero per asignar al grup nou
			var lastLevel = divGraphicOrder1.getAttribute("data-lastLevelAdded")
			var newNumber = parseInt(lastLevel) + 1;
			boxLevel.setAttribute("class", "boxLevel1");
			boxLevel.setAttribute("id", "boxLevel_1_" + newNumber);
			boxLevel.setAttribute("data-boxl2", data_boxL2);



			//S'ha de posar desprÃ©s del que es seleciona indepentdentment del nÃºmero
			if (number != 0) {
				var nextSibling = actualBoxLevel.nextSibling; //Si no n'hi ha donarÃ  null
				if (nextSibling != null) {
					boxlevel2.insertBefore(boxLevel, nextSibling);
				} else { //Ãºltim
					//boxlevel2.innerHTML = "buuuu"
					if (creatingL2) {
						BoxForL1.appendChild(boxLevel);
					} else {
						boxlevel2.appendChild(boxLevel);
					}

				}
			} else { //el primer que es crea des de l'inici
				divGraphicOrder1.appendChild(boxLevel);
			}


			characterBoxContainer.setAttribute("class", "characterBoxContainer_1");
			characterBoxContainer.setAttribute("id", "characterBoxContainer_1_" + newNumber);
			boxLevel.appendChild(characterBoxContainer);
			conditionSelectorBox.setAttribute("class", "conditionSelectorBox");
			conditionSelectorBox.setAttribute("id", "conditionSelectorBox_1_" + newNumber);
			boxLevel.appendChild(conditionSelectorBox);

			divPlus.setAttribute("onclick", "addNewGroupL1('" + newNumber + "','" + nodeId + "')");
			divPlus.setAttribute("class", "divPlus");
			divPlus.innerHTML = "+";
			divPlus.setAttribute("title", "Add new group");

			divTrash.setAttribute("onclick", "deleteGroupL1('" + newNumber + "','" + nodeId + "')");
			divTrash.setAttribute("class", "divTrash");
			divTrash.setAttribute("title", "Delete group");

			conditionSelectorBox.appendChild(divPlus);
			conditionSelectorBox.appendChild(divTrash);

			selectCondition.setAttribute("id", "selectCondition_1_" + newNumber);
			selectCondition.setAttribute("class", "selectCondition");
			for (var i = 0; i < 3; i++) {
				var option = document.createElement("option");
				var value;
				if (i == 0) {
					value = "and";
				} else if (i == 1) {
					value = "or";
				} else if (i == 2) {
					value = "not";
				}
				option.innerHTML = value;
				option.setAttribute("value", value);
				selectCondition.appendChild(option);
			}
			conditionSelectorBox.appendChild(selectCondition);

			//actualitzar instruccions
			if (number == 0) {
				filteringInstructions = []; //per quan es crei un altre filterRow que no arrosegui aquesta info
				filteringInstructions.push({  //Crear la primera instrucciÃ³ del filter
					1: {
						toFilter: [],
						condition: "and"
					}
				}
				);
			}
			else {
				filteringInstructions[0][newNumber] = {

					toFilter: [],
					condition: "and"
				};

			};

			//quan es crea L2
			if (creatingL2) {
				filteringInstructions.push({
					1: { //2-1
						join: [1, 2],
						condition: "and"
					}
				})
			};

			if (creatingL2 == false & (newNumber != 2 & newNumber != 1)) { //si existeix ja un G2 i no s'acaba de crear
				var oldJoin = [];
				console.log(filteringInstructions[1][data_boxL2].join);
				oldJoin.push(...filteringInstructions[1][data_boxL2].join);
				console.log(oldJoin);
				var newJoin = oldJoin.push(newNumber);
				filteringInstructions[1][data_boxL2]["join"] = newJoin;
			}

			console.log(filteringInstructions);

			//actualitzaciÃ³
			var oldContent = divGraphicOrder1.getAttribute("data-isNumber2");
			var content = oldContent + "," +
				divGraphicOrder1.setAttribute("data-lastLevelAdded", newNumber);


		}


		function addNewGroupL2() {
			console.log("grup2")
		}
		function deleteGroupL1(number, nodeId) {
			var divGraphicOrder1 = document.getElementById("divGraphicOrder_1_" + nodeId);
			// var isNumber2 = divGraphicOrder1.getAttribute("data-isNumber2");
			var boxLevelToDelete = document.getElementById("boxLevel_1_" + number);
			var parentNode =boxLevelToDelete.parentNode;
			// if (isNumber2 == "yes") {
			// 	var boxLevel2
			// }



			var canErase = true;
			//Sempre hi ha d'haver un (mirar els childs ...)
			console.log(divGraphicOrder1.children);
			if (parentNode.children.length == 1) {
				canErase = false;
				window.alert("You can't erase last group");
			} else {
				//no pot borrar si te characters
				var value = boxLevelToDelete.getAttribute("value");
				if (value != null) {
					if (value.length >= 1) {
						canErase = false;
						window.alert("You can't erase a group with elements. Move or delete them first");
					}
				}

			}

			//Quan si es pugui borrar
			if (canErase) {
				parentNode.removeChild(boxLevelToDelete);
			}


		}

		function addGraphicElement(nodeId, character, numberCharacter, tableContent, row) { //character
			var divGraphicOrder_1 = document.getElementById("divGraphicOrder_1_" + nodeId);
			var lastLevel = divGraphicOrder_1.getAttribute("data-lastLevelAdded");
			// var listBoxLevel = divGraphicOrder_1.getAttribute("data-boxLevelNumbers").split(",");
			var boxLevel = document.getElementById("boxLevel_1_" + lastLevel);
			var table = document.createElement("div");
			var content = boxLevel.getAttribute("value");


			if (content == null) {
				if (tableContent.length == 6) {
					character = tableCharacters[0];

				} else {
					character = tableCharacters[numberCharacter + 1];
				}
				//boxLevel
				content = character;
				boxLevel.setAttribute("value", content);
			} else {
				character = tableCharacters[numberCharacter + 1];
				//boxLevel
				content += "," + character; //el que s'afegirÃ 
				boxLevel.setAttribute("value", content);
			}
			var characterBoxContainer = document.getElementById("characterBoxContainer_1_" + lastLevel);
			var characterBox = document.createElement("div");
			var characterBoxText = document.createElement("div");
			var characterDeleteButton = document.createElement("div");
			var characterUpButton = document.createElement("div");
			var characterDownButton = document.createElement("div");


			//characterBox,table
			characterBox.setAttribute("value", character);
			characterBox.setAttribute("class", "characterBox");
			characterBox.setAttribute("id", "characterBox_" + character);
			characterBox.setAttribute("onclick", "unfoldMenu('" + character + "')");///////////////////////////S'ha de fer

			characterBoxText.setAttribute("class", "characterBoxText");
			characterBoxText.innerHTML = character;

			characterDeleteButton.setAttribute("class", "characterDeleteButton");
			characterDeleteButton.setAttribute("onclick", "deleteRow('no','" + nodeId + "','" + character + "')");
			characterDeleteButton.setAttribute("title", "Delete item");
			characterUpButton.setAttribute("class", "characterUpButton");
			characterUpButton.setAttribute("onclick", "upGroup('" + lastLevel + "','" + character + "')");
			characterDownButton.setAttribute("class", "characterDownButton");
			characterDownButton.setAttribute("onclick", "downGroup('" + lastLevel + "','" + character + "')");

			characterBox.appendChild(characterBoxText);
			characterBox.appendChild(characterDownButton);
			characterBox.appendChild(characterUpButton);
			characterBox.appendChild(characterDeleteButton);
			characterBoxContainer.appendChild(characterBox);

			//redimensionar
			var contentSplited = content.split(",")
			var itemsNumber = contentSplited.length;
			boxLevel.style.height = (35 * itemsNumber) + "px";


			//actualitzar instruccions
			var oldToFilter = [];
			oldToFilter.push(...filteringInstructions[0][lastLevel].toFilter);
			var character2;
			if (character == ",A") {
				character2 = character.substring(1); //eliminala coma
			}

			oldToFilter.push(character);
			filteringInstructions[0][lastLevel].toFilter = oldToFilter;
			console.log(filteringInstructions);

		}


		function deleteCharacterInGraphic(nodeId, newRow) {
			var divGraphicOrder_1 = document.getElementById("divGraphicOrder_1_" + nodeId);
			// var isLevel2 = false;
			// var isLevel3 = false;
			// var data_isNumber2 = divGraphicOrder_1.getAttribute("data-isNumber2");
			// var data_isNumber3 = divGraphicOrder_1.getAttribute("data-isNumber3");
			// if (data_isNumber2 == "yes") {
			// 	isLevel2 = true;
			// 	if (data_isNumber3 == "yes") {
			// 		isLevel3 = true;
			// 	}
			// }


			var elementToDelete = document.getElementById("th_" + nodeId + "_" + newRow + "_character");
			var valueOfElementToDelete = elementToDelete.getAttribute("value");
			console.log(valueOfElementToDelete);
			var divToDelete = document.getElementById("characterBox_" + tableCharacters[valueOfElementToDelete]);
			var parentNode = divToDelete.parentNode;
			var id = parentNode.getAttribute("id");
			console.log(id);
			var numberToId = id.substr(-1); //agafo el nÃºmero final
			var boxLevel_1 = document.getElementById("boxLevel_1_" + numberToId);
			var value = boxLevel_1.getAttribute("value");
			divToDelete.remove();
			//borrar el value del parent 
			var arrayValue = [];
			if (value.length > 1) {
				arrayValue.push(...value.split(","));
				var newValue = arrayValue.filter(element => element != tableCharacters[valueOfElementToDelete]);
				var newCharactersInTable = charactersInTable.filter(element => element != tableCharacters[valueOfElementToDelete]);
				charactersInTable = newCharactersInTable; //borrar la lletra que s'elimina
				boxLevel_1.setAttribute("value", newValue);


			}
			else {
				boxLevel_1.setAttribute("value", "");


			}


			//Redimensionar 
			var contentSplited;
			if (newValue != null) {
				if (newValue.length > 1) {
					boxLevel_1.style.height = (35 * newValue.length) + "px";
				}
			} else if (null) {
				boxLevel_1.style.height = 70 + "px";
			} else {
				boxLevel_1.style.height = 70 + "px";
			}


			//eliminar de les instruccions [0]=>Nivell 1, numberToId =>1-1,1-2,1-3...
			filteringInstructions[0][numberToId].toFilter = newValue;
			console.log(filteringInstructions);
		}
		function upGroup(groupNumber, character) {
			console.log("upGroup");
		}
		function downGroup(groupNumber, character) {
			console.log("downGroup");
		}

		function unfoldMenu(character) { ///////////////////////////S'ha de fer
			// console.log(character);
			// var table = document.getElementById("table_" + character);
			// table.classList.remove("hidden");
			// table.style.display = "block";


		}





		// function addCondition(condition, nodeId) {
		// 	event.preventDefault();
		// 	console.log(condition);
		// 	var divGraphicOrder_1 = document.getElementById("divGraphicOrder_1_" + nodeId);
		// 	var divCondition = document.createElement("div");
		// 	divCondition.innerHTML = condition;
		// 	divCondition.setAttribute("class", "divInSelectedGraphic_condition divInSelectedGraphic");
		// 	divCondition.value = condition;
		// 	divGraphicOrder_1.appendChild(divCondition);
		// 	divCondition.draggable = true;
		// 	divGraphicOrder_1.appendChild(newDiv);

		// }

		//Elements draggables (Part grÃ fica del FilterRow)
		// var draggedElement = null;
		// var items;

		// function addDraggableFunctions() {
		// 	items = document.querySelectorAll(".divGraphicOrder1 .divInSelectedGraphic");

		// 	items.forEach(function (item) {
		// 		item.addEventListener("dragstart", handleDragStart);
		// 		item.addEventListener("dragenter", handleDragEnter);
		// 		item.addEventListener("dragover", handleDragOver);
		// 		item.addEventListener("dragleave", handleDragLeave);
		// 		item.addEventListener("drop", handleDrop);
		// 		item.addEventListener("dragend", handleDragEnd);
		// 	});
		// }

		// function handleDragStart(e) {
		// 	//this.style.opacity = "0.8";
		// 	draggedElement = this; //This es el Div sencer
		// 	console.log(this);

		// 	e.dataTransfer.effectAllowed = "move"; //https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/effectAllowed
		// 	e.dataTransfer.setData("text", this.innerHTML); //
		// 	e.dataTransfer.setData("id", this.id); //data-id
		// 	e.dataTransfer.setData("value", this.value); //data-value
		// }

		// function handleDragOver(e) {
		// 	e.preventDefault();

		// 	e.dataTransfer.dropEffect = "move";
		// 	return false;
		// }

		// function handleDragEnter(e) {
		// 	//this.classList.add("dragover");
		// }

		// function handleDragLeave(e) {
		// 	//this.classList.remove("dragover");
		// }

		// function handleDrop(e) {
		// 	// if (e.stopPropagation)
		// 	// 	e.stopPropagation();

		// 	if (draggedElement != this) {
		// 		draggedElement.innerHTML = this.innerHTML;
		// 		draggedElement.setAttribute("text", this.innerHTML);
		// 		draggedElement.setAttribute("id", this.id);
		// 		draggedElement.setAttribute("value", this.value);

		// 		var replacedItem = e.dataTransfer.getData("text");
		// 		var replacedValue= e.dataTransfer.getData("value");
		// 		var replacedId= e.dataTransfer.getData("id");

		// 		this.innerHTML = replacedItem;

		// 		this.setAttribute("text", replacedItem);
		// 		this.setAttribute("id",replacedId);
		// 		this.setAttribute("value", replacedValue);
		// 	}

		// 	return false;
		// }

		// function handleDragEnd(e) {
		// 	this.style.opacity = "1";

		// 	items.forEach(function (item) {
		// 		item.classList.remove("dragover");
		// 	});
		// }

		////Fi draggables





		function GetSelectorsForRowFilter(nodeId) {
			var divSelectorStructure;
			divSelectorStructure = `<div id=selectorRowsContainer>

				<div id='divSelectorRowsFilter'></div></div>`;
			return divSelectorStructure;
		}

		function GetHTMLTable(data, dataAttributesInput, rowNumbers, selectedEntityId) {
			var dataAttributes = dataAttributesInput ? dataAttributesInput : getDataAttributes(data);
			var cdns = [], needhref = [], record, cell, dataAttribute;
			var dataAttributesArray = Object.keys(dataAttributes);

			cdns.push("<table class='tablesmall'><tr>");
			if (rowNumbers)
				cdns.push("<th></th>");
			if (selectedEntityId !== null && typeof selectedEntityId !== "undefined")
				cdns.push("<th></th>");
			for (var a = 0; a < dataAttributesArray.length; a++) {
				cdns.push("<th>");
				dataAttribute = dataAttributes[dataAttributesArray[a]];
				if (dataAttribute.definition)
					cdns.push("<a href='", dataAttribute.definition, "' target='_blank'>");
				cdns.push(dataAttributesArray[a]);
				if (dataAttribute.definition)
					cdns.push("</a>");
				if (dataAttribute.UoM || dataAttribute.UoMSymbol) {
					cdns.push(" (");
					if (dataAttribute.UoMDefinition)
						cdns.push("<a href='", dataAttribute.UoMDefinition, "' target='_blank'>");
					cdns.push(dataAttribute.UoMSymbol ? dataAttribute.UoMSymbol : dataAttribute.UoM);
					if (dataAttribute.UoMDefinition)
						cdns.push("</a>");
					cdns.push(")");
				}
				cdns.push("</th>");
				needhref[a] = isAttributeAnyURI(dataAttributesArray[a]);
			}

			cdns.push("</tr>");
			for (var i = 0; i < data.length; i++) {
				record = data[i];
				cdns.push("<tr>");
				if (rowNumbers)
					cdns.push("<td align='right'>", i + 1, "</td>");
				if (selectedEntityId !== null && typeof selectedEntityId !== "undefined") {
					var s = record["@iot.id"] ? record["@iot.id"] : i;
					cdns.push("<td><input type='radio' name='SelectRowRadio' id='SelectRow_", s, "' ", s == selectedEntityId ? "checked='checked'" : "", "/></td>");
				}
				for (var a = 0; a < dataAttributesArray.length; a++) {
					cell = record[dataAttributesArray[a]];
					cdns.push((dataAttributes[dataAttributesArray[a]].type == "number" || dataAttributes[dataAttributesArray[a]].type == "integer") ? "<td align='right'>" : "<td>");
					if (typeof cell !== "undefined") {
						if (needhref[a] && cell.length)
							cdns.push("<a href='", cell, "' target='_blank'>", cell, "</a>");
						else if (typeof cell === "object")
							cdns.push(JSON.stringify(cell));
						else
							cdns.push(cell);
					}
					cdns.push("</td>");
				}
				cdns.push("</tr>");
			}
			cdns.push("</table>");
			return cdns.join("");
		}

		function ShowTableDialog(nodeId) {
			var data = networkNodes.get(nodeId).STAdata;

			if (!data || !data.length) {
				document.getElementById("DialogOKHTML").innerHTML = "No data to show.";
				return;
			}

			document.getElementById("DialogOKHTML").innerHTML = GetHTMLTable(data, networkNodes.get(nodeId).STAdataAttributes,
				document.getElementById("ShowTableRowNumberDialogOK").checked ? true : false,
				null);
		}

		function StringifyObjectElements(data, dataAttributesInput) {
			var dataAttributes = dataAttributesInput ? dataAttributesInput : getDataAttributes(data);
			var jsonTable = [];
			var dataAttributesArray = Object.keys(dataAttributes);

			for (var i = 0; i < data.length; i++) {
				jsonTable[i] = {};
				for (var a = 0; a < dataAttributesArray.length; a++) {
					if (typeof data[i][dataAttributesArray[a]] === "object")  //"arrays" are also objects.
						jsonTable[i][dataAttributesArray[a]] = JSON.stringify(data[i][dataAttributesArray[a]]);
					else
						jsonTable[i][dataAttributesArray[a]] = data[i][dataAttributesArray[a]];
				}
			}
			return jsonTable;
		}


		function GetGeoJSON(data, selectedOptions) {
			var dataSorted = deapCopy(data), geojson = { "type": "FeatureCollection", "features": [] };

			//Sorted by place, variable and date (older first).
			dataSorted.sort(function (a, b) {
				if (a[selectedOptions.place] < b[selectedOptions.place])
					return -1;
				if (a[selectedOptions.place] > b[selectedOptions.place])
					return 1;
				if (a[selectedOptions.longitude] - b[selectedOptions.longitude] < -0.0000001)
					return -1;
				if (a[selectedOptions.longitude] - b[selectedOptions.longitude] > 0.0000001)
					return 1;
				if (a[selectedOptions.latitude] - b[selectedOptions.latitude] < -0.0000001)
					return -1;
				if (a[selectedOptions.latitude] - b[selectedOptions.latitude] > 0.0000001)
					return 1;
				if (a[selectedOptions.variable] < b[selectedOptions.variable])
					return -1;
				if (a[selectedOptions.variable] > b[selectedOptions.variable])
					return 1;
				if (a[selectedOptions.time] < b[selectedOptions.time])
					return -1;
				if (a[selectedOptions.time] > b[selectedOptions.time])
					return 1;
				return 0;
			});
			var a, b;
			for (var i = 0, f = -1; i < dataSorted.length; i++) {
				a = dataSorted[i], b = dataSorted[i == 0 ? 0 : i - 1];
				if (i == 0 || a[selectedOptions.place] != b[selectedOptions.place] ||
					a[selectedOptions.longitude] > b[selectedOptions.longitude] + 0.0000001 ||
					a[selectedOptions.latitude] < b[selectedOptions.latitude] - 0.0000001 ||
					a[selectedOptions.latitude] > b[selectedOptions.latitude] + 0.0000001) {
					f++;
					geojson.features[f] = {
						"type": "Feature",
						"geometry": {
							"type": "Point",
							"coordinates": [
								a[selectedOptions.longitude],
								a[selectedOptions.latitude]
							]
						},
						"properties": {
							"Place": a[selectedOptions.place],
						}
					};
				}
				geojson.features[f].properties[a[selectedOptions.variable] + "_" + a[selectedOptions.time]] = a[selectedOptions.value];
			}
			return geojson;
		}

		function GetGeoJSONSchema(data, selectedOptions) {
			return {
				"$id": "https://meaning.ad4gd.eu/meaning.schema.json",
				"$schema": "https://meaning.ad4gd.eu/json-meta/meaning",
				"type": "object",
				"properties": {
					"features": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"geometry": {
									"type": "object",
									"properties": {
										"type": { "type": "string" },
										"coordinates": { "type": "array" }
									}
								},
								"properties": {
									"type": "object",
									"properties": GetGeoJSONPropertiesSchema(data, selectedOptions)
								}
							}
						}
					}
				}
			};
		}

		function GetGeoJSONPropertiesSchema(data, selectedOptions) {
			var dataSorted = deapCopy(data);
			// var dataSorted = JSON.parse(JSON.stringify(data));

			var attributes = {
				"Place": {
					"description": "Place name",
					"mostrar": "si"
				}
			};

			//Sorted by variable.
			dataSorted.sort(function (a, b) {
				if (a[selectedOptions.variable] < b[selectedOptions.variable])
					return -1;
				if (a[selectedOptions.variable] > b[selectedOptions.variable])
					return 1;
				return 0;
			});
			var a, b, UoMSymbol;
			for (var i = 0; i < dataSorted.length; i++) {
				a = dataSorted[i], b = dataSorted[i == 0 ? 0 : i - 1];
				if (i == 0 || a[selectedOptions.variable] != b[selectedOptions.variable]) {
					UoMSymbol = a[selectedOptions.variableUoMSymbol];
					if (UoMSymbol == "ug/m3")
						UoMSymbol == "Âµg/mÂ³";
					attributes[a[selectedOptions.variable] + "_{time?f=ISO}"] = {
						"description": a[selectedOptions.variableDescription],
						"definition": a[selectedOptions.variableDefinition],
						"UoM": a[selectedOptions.variableUoM],
						"UoMSymbol": UoMSymbol,
						"UoMDefinition": a[selectedOptions.variableUoMDefinition],
						"mostrar": "si",
						"serieTemporal": {
							"color": "#ff0000"
						}
					};
				}
			}
			return attributes;
		}

		function GetGeoJSONMetaschema() {
			return {
				"title": "GeoJSON properties meaning schema",
				"$schema": "http://json-schema.org/draft/2019-09/schema#",
				"$id": "https://meaning.ad4gd.eu/json-meta/meaning",
				"$vocabulary": {
					"https://json-schema.org/draft/2019-09/vocab/core": true,
					"https://json-schema.org/draft/2019-09/vocab/applicator": true,
					"https://json-schema.org/draft/2019-09/vocab/validation": true,
					"https://json-schema.org/draft/2019-09/vocab/meta-data": true,
					"https://json-schema.org/draft/2019-09/vocab/format": false,
					"https://json-schema.org/draft/2019-09/vocab/content": true,
					"https://meaning.ad4gd.eu/json-meta/meaning": false
				},
				"$recursiveAnchor": true,
				"allOf": [
					{
						"$ref": "https://json-schema.org/draft/2019-09/schema"
					},
					{
						"$ref": "#/definitions/AttributeDescription"
					}
				],
				"definitions": {
					"AttributeDescription": {
						"title": "GeoJSON meaning vocabulary meta-schema",
						"type": "object",
						"$comment": "The name of the property is the name of the attribute. If the server is SOS there are 2 special names can be used __om_time__, __om_sensor__ and the rest match the field names of the table containing the data. The properties that define each attribute can be de ones defined below or properties from JSON schema itself if indicated in this comment. For the moment, only 'description' is implemented. Others from 'string' (https://json-schema.org/understanding-json-schema/reference/string.html) or number can be useful (https://json-schema.org/understanding-json-schema/reference/numeric.html).",
						"properties": {
							"originalName": {
								"description": "Name of the original attribute. Optional. If the attributes are taken from a CSV and are transformed into one or more attributes (because they are associated with time). In this case the nomOri maybe different from the property name.",
								"type": ["string", "null"]
							},
							"symbol": {
								"description": "Symbol of the attribute. Note that it is not the units of measurement symbol but the attribute itself. For example, the letter 'Ï' (sigma) usually represents the standard deviation. It will be used in the compact display (coordinates box) if defined. Created for statistical attributes, but can be used elsewhere.",
								"type": ["string", "null"]
							},
							"descripcio": {
								"description": "Description of the attribute in multiple languages. If you do not need multilanguage support, please use 'description'",
								"$ref": "#/definitions/StringOCadenaLang"
							},
							"definition": {
								"description": "A URI that defines the observedProperty or the variable. You may find the right definitions in https://qudt.org/2.1/vocab/quantitykind, http://vocabs.lter-europe.net/EnvThes or https://www.eea.europa.eu/help/glossary/eea-glossary.",
								"type": ["string", "null"],
								"format": "uri"
							},
							"UoM": {
								"description": "Units of measurement of the attribute. Formerly refered as 'unitats'",
								"type": ["string", "null"]
							},
							"UoMSymbol": {
								"description": "Symbol of the units of measurement of the atributte.",
								"type": ["string", "null"]
							},
							"UoMDefinition": {
								"description": "A URI that defines the units of measurement of the observedProperty or variable. You may find the right definitions in https://qudt.org/2.1/vocab/unit",
								"type": ["string", "null"],
								"format": "uri"
							},
							"calcul": {
								"description": "Mathematical formula to transform the values of one or more properties of another vector or raster 'capa'. To point to a raster 'capa', see the explanation in 'component'; to point to a vector 'capa', we should use {'i_capa': 2, 'prop': 'flower_name'} to refer to 'capa' 2 which is of 'model' ='vector'. Can only be used if there are capa.objectes on the given 'capa'. If you do not specify i_capa, this 'capa' is assumed. For each 'objecte' {'i_capa': 2, 'prop': 'flower_name'} (or the equivalent for raster 'capa' for each pixel) is transformed into the value and, once done, the formula is evaluated as JavaScript syntax.",
								"type": "string"
							},
							"FormulaConsulta": {
								"description": "Mathematical formula to transform the values of objectes[].feature[].properties of this 'capa' (or into values[]). To know about v[0] etc see the explanation under 'component'. Use p['name'] to indicate the name of the property inside properties. You can also specify nomPropId to refer to the feature identifier (e.g. the feature id, in case of GeoJSON). Can only be used if there is capa.valors or capa.objectes. If you want to choose a value from another 'capa' use 'calcul' instead. Internally, 'FormulaConsulta' is transformed into 'calcul'.",
								"type": "string"
							},
							"separador": {
								"description": "Separator of the next block of attributes",
								"$ref": "#/definitions/StringOCadenaLang"
							},
							"esLink": {
								"description": "Is the attribute value a link?",
								"type": "boolean"
							},
							"descLink": {
								"description": "Description of the link",
								"$ref": "#/definitions/StringOCadenaLang"
							},
							"esImatge": {
								"description": "Is the attribute value a image URI?. This forces the attribute to appear as an embedded image in the query box",
								"type": "boolean"
							},
							"FormatVideo": {
								"description": "If the attribute is a link to a video, this is the video format. This forces the attribute to appear as an embedded video with a play button in the query box. It should be a MIME type. Example: video/mp4. optional",
								"type": "string",
								"format": "uri"
							},
							"mostrar": {
								"description": "Should it be shown in the query box? Can be 'si' (always), 'no' (never), 'si_ple' (it will only be displayed if the attribute has content).",
								"enum": ["si", "no", "si_ple"]
							},
							"mida": {
								"description": "Implementation pending (maxLength should be used instead of 'mida'). Attribute size. Optional. Maximum width the field type can have. In the case of numerical types it is the maximum precision. In the case of strings it is the maximum length in characters. In the case of date-time it is the maximum length in characters of the representation of the date-time as text.",
								"type": "number"
							},
							"pDecimals": {
								"description": "Implementation pending. Number of decimals places of the attribute. It only applies if the attribute is of type 'number'. Optional. (Note: do not confused with NDecimals, which is the number of decimals to display in the screen).",
								"type": "number"
							},
							"presentation": {
								"description": "It is the format in which we receive the value from the server. Currently it is only used for a very specific thing in the interpretation of dates. In the future it could be combined with to the JSON schema 'type' to indicate whether string, date, number, float... and 'format'.",
								"enum": ["dd/mm/yyyy"]
							},
							"NDecimals": {
								"description": "Number of decimal places to be displayed in the screen. Optional, when not indicated, precision is not truncated.",
								"type": "number",
								"minimum": 0,
								"maximum": 20,
								"multipleOf": 1
							},
							"serieTemporal": {
								"description": "The values of this attribute form a time series that will be displayed as a graph.",
								"type": "object",
								"required": ["color"],
								"properties": {
									"color": {
										"description": "Line color in the graph",
										"type": "string"
									}
								}
							}
						}
					},
					"StringOCadenaLang": {
						"description": "String or multilanguage object.",
						"oneOf": [
							{
								"type": ["string", "null"]
							},
							{
								"type": "object",
								"properties": {
									"cat": {
										"description": "CatalÃ ",
										"type": ["string", "null"]
									},
									"spa": {
										"description": "EspaÃ±ol",
										"type": ["string", "null"]
									},
									"eng": {
										"description": "English",
										"type": ["string", "null"]
									},
									"fre": {
										"description": "FranÃ§ais",
										"type": ["string", "null"]
									},
									"cze": {
										"description": "ÄeÅ¡tina",
										"type": ["string", "null"]
									},
									"ger": {
										"description": "Deutsch",
										"type": ["string", "null"]
									}
								}
							}
						]
					}
				}
			};
		}

		function GetGeoJSONStyles(data, selectedOptions) {
			var dataSorted = deapCopy(data), estil = [];
			// var dataSorted = JSON.parse(JSON.stringify(data)), estil = [];

			//Sorted by variable.
			dataSorted.sort(function (a, b) {
				if (a[selectedOptions.variable] < b[selectedOptions.variable])
					return -1;
				if (a[selectedOptions.variable] > b[selectedOptions.variable])
					return 1;
				return 0;
			});
			var a, b, maximum;
			for (var i = 0, f = -1; i < dataSorted.length; i++) {
				a = dataSorted[i], b = dataSorted[i == 0 ? 0 : i - 1];
				if (i == 0 || a[selectedOptions.variable] != b[selectedOptions.variable]) {
					if (f >= 0)
						estil[f].simbols[0].simbol[0].icona.r = maximum > 0.001 ? 10 / maximum : 1;
					f++;
					maximum = a[selectedOptions.value];
					estil[f] = {
						"nom": null,
						"desc": a[selectedOptions.variableDescription],
						"DescItems": a[selectedOptions.variableUoMSymbol],
						"TipusObj": "P",
						"ItemLleg": [
							{
								"color": "#ff0000",
								"DescColor": a[selectedOptions.variableDescription]
							}
						],
						"ncol": 1,
						"simbols": [
							{
								"NomCampFEscala": a[selectedOptions.variable] + "_{time?f=ISO}",
								"simbol": [
									{
										"icona": {
											"type": "circle",
											"r": 1
										}
									}
								]
							}
						],
						"formes": [{
							"vora": {
								"paleta": {
									"colors": [
										"#ff0000"
									]
								}
							},
							"interior": {
								"paleta": {
									"colors": [
										"rgba(255,0,0,0.4)"
									]
								}
							}
						}],
						"fonts": {
							"NomCampText": a[selectedOptions.variable] + "_{time?f=ISO}",
							"aspecte": [
								{
									"font": {
										"font": "12px Verdana",
										"color": "#B50000",
										"align": "center",
										"i": 0,
										"j": -5
									}
								}
							]
						}
					};
				}
				else {
					if (maximum < a[selectedOptions.value])
						maximum = a[selectedOptions.value];
				}
			}
			if (f >= 0)
				estil[f].simbols[0].simbol[0].icona.r = maximum > 0.001 ? 10 / maximum : 1;
			return estil;
		}

		function GetGeoJSONDates(data, selectedOptions) {
			var dataSorted = deapCopy(data), datetimes = [];
			// var dataSorted = JSON.parse(JSON.stringify(data)), datetimes = [];

			//Sorted by date (older first).
			dataSorted.sort(function (a, b) {
				if (a[selectedOptions.time] < b[selectedOptions.time])
					return -1;
				if (a[selectedOptions.time] > b[selectedOptions.time])
					return 1;
				return 0;
			});
			var a, b;
			for (var i = 0; i < dataSorted.length; i++) {
				a = dataSorted[i], b = dataSorted[i == 0 ? 0 : i - 1];
				if (i == 0 || a[selectedOptions.time] != b[selectedOptions.time])
					datetimes.push(a[selectedOptions.time]);
			}
			return datetimes;
		}

		/*function ShowSaveTableDialog(nodeId) {
		;   //Nothing to do
	}*/

		function PopulateSelectSaveLayerDialog(id, dataAttributes, selectedOption) {
			var thereIsSelectionOption = false;
			var dataAttributesArray = Object.keys(dataAttributes);

			var s = "<select id=\"" + id + "Select" + "\">";
			for (var a = 0; a < dataAttributesArray.length; a++) {
				if (dataAttributesArray[a] == selectedOption) {
					thereIsSelectionOption = true;
					break;
				}
			}
			s += "<option value=\"\"" + (!thereIsSelectionOption ? "selected=\"selected\"" : "") + "></option>";
			for (var a = 0; a < dataAttributesArray.length; a++)
				s += "<option value=\"" + dataAttributesArray[a] + "\"" + (dataAttributesArray[a] == selectedOption ? "selected=\"selected\"" : "") + ">" + dataAttributesArray[a] + "</option>";
			s += "</select>";
			document.getElementById(id).innerHTML = s;
		}

		function ShowSaveLayerDialogSelects(nodeId, descripUoM) {
			var parentNode = GetFirstParentNode(currentNode);
			if (parentNode) {
				var data = networkNodes.get(nodeids[0]).STAdata;
				var dataAttributes = parentNode.STAdataAttributes ? parentNode.STAdataAttributes : getDataAttributes(data);
				var s, elem;
				PopulateSelectSaveLayerDialog("DialogSaveLayerPlace", dataAttributes, "FeatureOfInterest/description");
				PopulateSelectSaveLayerDialog("DialogSaveLayerLongitude", dataAttributes, "FeatureOfInterest/feature/coordinates_0");
				PopulateSelectSaveLayerDialog("DialogSaveLayerLatitude", dataAttributes, "FeatureOfInterest/feature/coordinates_1");
				PopulateSelectSaveLayerDialog("DialogSaveLayerTime", dataAttributes, "PhenomenonTime");
				PopulateSelectSaveLayerDialog("DialogSaveLayerVariable", dataAttributes, "Datastream/ObservedProperty/name");
				if (descripUoM) {
					document.getElementById("DialogSaveLayerVariableDescriptionUoM").style.display = "inline-block";
					PopulateSelectSaveLayerDialog("DialogSaveLayerVariableDescription", dataAttributes, "Datastream/ObservedProperty/description");
					PopulateSelectSaveLayerDialog("DialogSaveLayerVariableDefinition", dataAttributes, "Datastream/ObservedProperty/definition");
					PopulateSelectSaveLayerDialog("DialogSaveLayerVariableUoM", dataAttributes, "Datastream/unitOfMeasurement/name");
					PopulateSelectSaveLayerDialog("DialogSaveLayerVariableUoMSymbol", dataAttributes, "Datastream/unitOfMeasurement/symbol");
					PopulateSelectSaveLayerDialog("DialogSaveLayerVariableUoMDefinition", dataAttributes, "Datastream/unitOfMeasurement/definition");
				}
				else
					document.getElementById("DialogSaveLayerVariableDescriptionUoM").style.display = "none";

				PopulateSelectSaveLayerDialog("DialogSaveLayerValue", dataAttributes, "result");
			}
		}

		function GetSelectedOptionsSaveLayer(descripUoM) {
			var selectedOptions = {};
			selectedOptions.place = document.getElementById("DialogSaveLayerPlaceSelect").value;
			selectedOptions.longitude = document.getElementById("DialogSaveLayerLongitudeSelect").value;
			selectedOptions.latitude = document.getElementById("DialogSaveLayerLatitudeSelect").value;
			selectedOptions.time = document.getElementById("DialogSaveLayerTimeSelect").value;
			selectedOptions.variable = document.getElementById("DialogSaveLayerVariableSelect").value;
			if (descripUoM) {
				selectedOptions.variableDescription = document.getElementById("DialogSaveLayerVariableDescriptionSelect").value;
				selectedOptions.variableDefinition = document.getElementById("DialogSaveLayerVariableDefinitionSelect").value;
				selectedOptions.variableUoM = document.getElementById("DialogSaveLayerVariableUoMSelect").value;
				selectedOptions.variableUoMSymbol = document.getElementById("DialogSaveLayerVariableUoMSymbolSelect").value;
				selectedOptions.variableUoMDefinition = document.getElementById("DialogSaveLayerVariableUoMDefinitionSelect").value;
			}
			selectedOptions.value = document.getElementById("DialogSaveLayerValueSelect").value;
			return selectedOptions;
		}

		function ShowSaveLayerDialog(nodeId) {
			ShowSaveLayerDialogSelects(nodeId, true);
			document.getElementById("DialogSaveLayerTitle").innerHTML = "Save table as GeoJSON";
			document.getElementById("DialogSaveLayerSave").innerHTML = "<button value=\"default\" onClick=\"SaveLayer(event)\">Save GeoJSON</button> " +
				"<button onClick=\"SaveLayerSchema(event)\">Save JSON Schema</button> " +
				"<button onClick=\"SaveLayerMetaschema(event)\">Save JSON Metaschema</button>";
		}

		function ShowOpenMapDialog(nodeId) {
			ShowSaveLayerDialogSelects(nodeId, true);
			document.getElementById("DialogSaveLayerTitle").innerHTML = "Open in the Map Browser";
			document.getElementById("DialogSaveLayerSave").innerHTML = "<button value=\"default\" onClick=\"OpenMap(event)\">Open</button>";
		}

		function SaveTable(event) {
			event.preventDefault(); // We don't want to submit this form
			var delimiter = document.getElementById("DialogSaveTableDelimiter").value;
			document.getElementById("DialogSaveTable").close();
			var parentNode = GetFirstParentNode(currentNode);
			if (parentNode) {
				SaveLocalDataFile(Papa.unparse(StringifyObjectElements(parentNode.STAdata, parentNode.STAdataAttributes), { quotes: false, quoteChar: '"', escapeChar: '"', delimiter: (delimiter ? delimiter : ";"), header: true, newline: "\r\n", skipEmptyLines: "greedy" }),
					(IdOfSTAEntity(parentNode) == -1) ? "table" : STAEntitiesArray[IdOfSTAEntity(parentNode)], ".csv", "application/vnd.ms-excel");   //https://stackoverflow.com/questions/7076042/what-mime-type-should-i-use-for-csv
			}
		}

		//https://csvw.org/
		//https://w3c.github.io/csvw/metadata/#dialect-descriptions
		function CreateCSVW(data, dataAttributesInput, delimiter) {
			var dataAttributes = dataAttributesInput ? dataAttributesInput : getDataAttributes(data);
			var dataAttributesArray = Object.keys(dataAttributes);

			var csvw = {
				tableSchema: {
					"columns": []
				},
				"dialect": {
					"header": true,
					"delimiter": delimiter
				}
			};
			for (var a = 0; a < dataAttributesArray.length; a++) {
				csvw.tableSchema.columns.push({
					"name": dataAttributesArray[a],
					"datatype": getCSVWTypeFromAttributeType(dataAttributes[dataAttributesArray[a]].type),
				});
			}
			return csvw;
		}


		function SaveCSVW(event) {
			event.preventDefault(); // We don't want to submit this form
			var delimiter = document.getElementById("DialogSaveTableDelimiter").value;
			document.getElementById("DialogSaveTable").close();
			var parentNode = GetFirstParentNode(currentNode);
			if (parentNode) {
				SaveLocalDataFile(JSON.stringify(CreateCSVW(parentNode.STAdata, parentNode.STAdataAttributes, delimiter ? delimiter : ";"), null, "\t"),
					(IdOfSTAEntity(parentNode) == -1 ? "table" : STAEntitiesArray[IdOfSTAEntity(parentNode)]) + "_csvw", ".json", "application/json");   //https://stackoverflow.com/questions/7076042/what-mime-type-should-i-use-for-csv
			}
		}

		function getDataAttributesCSVW(csvw) {
			var dataAttributes = {}, c;
			for (var a = 0; a < csvw.tableSchema.columns.length; a++) {
				c = csvw.tableSchema.columns[a];
				dataAttributes[c.name] = {
					"type": getAttributeTypeFromCSVWType(c.datatype),
					"description": (c.titles && Array.isArray(c.titles)) ? c.titles[0] : c.titles,
					"definition": c.propertyUrl,
					"UoM": c.unitMeasureTitles && Array.isArray(c.unitMeasureTitles) ? c.unitMeasureTitles[0] : c.unitMeasureTitles,
					"UoMSymbol": c.unitMeasureSymbol,
					"UoMDefinition": c.unitMeasureUrl
				};
			}
			return dataAttributes;
		}

		function getCSVReadParams(csvw) {
			return csvw.dialect;
		}

		function SaveLayer(event) {
			event.preventDefault(); // We don't want to submit this form
			document.getElementById("DialogSaveLayer").close();
			var parentNode = GetFirstParentNode(currentNode);
			if (parentNode) {
				SaveLocalDataFile(JSON.stringify(GetGeoJSON(parentNode.STAdata, GetSelectedOptionsSaveLayer(false)), null, "\t"), "GeoJSON", ".geojson", "application/geo+json");
			}
		}

		function SaveLayerSchema(event) {
			event.preventDefault(); // We don't want to submit this form
			document.getElementById("DialogSaveLayer").close();
			var parentNode = GetFirstParentNode(currentNode);
			if (parentNode) {
				SaveLocalDataFile(JSON.stringify(GetGeoJSONSchema(parentNode.STAdata, GetSelectedOptionsSaveLayer(true)), null, "\t"), "JSON", ".json", "application/json");
			}
		}

		function SaveLayerMetaschema(event) {
			event.preventDefault(); // We don't want to submit this form
			document.getElementById("DialogSaveLayer").close();
			SaveLocalDataFile(JSON.stringify(GetGeoJSONMetaschema(), null, "\t"), "JSON", ".json", "application/json");
		}

		function OpenMap(event) {
			event.preventDefault(); // We don't want to submit this form
			document.getElementById("DialogSaveLayer").close();
			var parentNode = GetFirstParentNode(currentNode);
			if (parentNode) {
				var selectedOptionsSaveLayer = GetSelectedOptionsSaveLayer(true);
				OpenMapMMN(getAbsoluteURL(config.MMNpath) + (config.MMNpath.indexOf('?') > 0 ? "&" : "?") + "reset=1", GetGeoJSON(parentNode.STAdata, selectedOptionsSaveLayer), GetGeoJSONPropertiesSchema(parentNode.STAdata, selectedOptionsSaveLayer), GetGeoJSONStyles(parentNode.STAdata, selectedOptionsSaveLayer), GetGeoJSONDates(parentNode.STAdata, selectedOptionsSaveLayer));
			}
		}

		var MiraMonMapBrowserVars = {};

		function DisplayMapMMN() {
			MiraMonMapBrowserVars.mmn.postMessage("CommandMMNAddGeoJSONLayer('SensorThings API data', " + JSON.stringify(MiraMonMapBrowserVars.geojson) + ", " + JSON.stringify(MiraMonMapBrowserVars.geojsonSchema) + ", " + JSON.stringify(MiraMonMapBrowserVars.geojsonStyle) + ", " + JSON.stringify(MiraMonMapBrowserVars.geojsonDates) + ")", GetCleanURLMiraMonMapBrowser(MiraMonMapBrowserVars.mmnURL));
		}

		function OpenMapMMN(url, geojson, geojsonSchema, geojsonStyle, geojsonDates) {
			MiraMonMapBrowserVars.geojson = geojson;
			MiraMonMapBrowserVars.geojsonSchema = geojsonSchema;
			MiraMonMapBrowserVars.geojsonStyle = geojsonStyle;
			MiraMonMapBrowserVars.geojsonDates = geojsonDates;
			if (MiraMonMapBrowserVars.mmn)
				DisplayMapMMN();
			else {
				window.addEventListener("message", ProcessMessageFromMiraMonMapBrowser);
				MiraMonMapBrowserVars.mmnURL = url;
				MiraMonMapBrowserVars.mmn = window.open(url, "_blank", "width=1000,height=800");
			}
		}

		function ProcessMessageFromMiraMonMapBrowser(event) {
			if (!IsTrustedMiraMonMapBrowser(event, MiraMonMapBrowserVars.mmnURL))
				return;

			try {
				var data = JSON.parse(event.data);
			}
			catch (e) {
				showInfoMessage("JSON message parse error: " + e + " The response was:\n" + event.data);
				return;
			}

			if (data.msg === MMN_PM_IsListening) {
				showInfoMessage("MiraMon Map Browser is open and ready to show layers.");
				DisplayMapMMN();
				return;
			}

			if (data.msg === MMN_PM_Closed) {
				showInfoMessage("MiraMon Map Browser has been closed.");
				MiraMonMapBrowserVars.mmn = null;
				MiraMonMapBrowserVars.mmnURL = null;
				return;
			}
			/*if (data.msg === MMN_PM_CurrentLocationText)
			{
				MiraMonMapBrowserVars.currentLocText=data.text;
				return;
			}*/
		}

		function ShowTableSelectColumnsDialog(parentNode, node) {

			var data = parentNode.STAdata ? parentNode.STAdata : node.STAdata,
				selectedColumns = node.STASelectedColumns;

			if (!data || !data.length) {
				document.getElementById("DialogSelectColumnsHTML").innerHTML = "No data to show.";
				return;
			}
			var dataAttributes = parentNode.STAdataAttributes ? parentNode.STAdataAttributes : getDataAttributes(data);
			const dataAttributesArray = Object.keys(dataAttributes);

			var s = "<table>";
			for (var a = 0; a < dataAttributesArray.length; a++)
				s += "<tr><td><label><input type='checkbox'" + ((!selectedColumns || a >= selectedColumns.length || selectedColumns[a]) ? "checked='checked'" : "") + " id='SelectColumn_" + a + "' /> " + dataAttributesArray[a] + "</label></td></tr>";
			s += "</table>";
			document.getElementById("DialogSelectColumnsHTML").innerHTML = s;
		}

		function ShowTableSelectExpandsDialog(nodeId, expandCheckboxes) {
			var node = networkNodes.get(nodeId);
			if (expandCheckboxes) {
				var data = node.STAdata,
					entities = STAEntities[STAEntitiesArray[IdOfSTAEntity(node)]].entities,
					selectedExpands = node.STASelectedExpands;

				if (!data || !data.length) {
					document.getElementById("DialogSelectExpandsCheckBoxes").innerHTML = "No data to show.";
					return;
				}

				var dataAttributes = selectedExpands ? selectedExpands.dataAttributesUnexpanded : (node.STAdataAttributes ? node.STAdataAttributes : getDataAttributes(data));
				const dataAttributesArray = Object.keys(dataAttributes);

				var s = "<table>";
				for (var a = 0; a < dataAttributesArray.length; a++) {
					if (dataAttributesArray[a].endsWith("@iot.navigationLink")) {
						var da = dataAttributesArray[a].substring(0, dataAttributesArray[a].length - "@iot.navigationLink".length);
						for (var e = 0; e < entities.length; e++) {
							if (entities[e] == da) {
								s += "<tr><td><label><input type='checkbox'" + ((selectedExpands && a < selectedExpands.selected.length && selectedExpands.selected[a]) ? "checked='checked'" : "") + " id='SelectExpand_" + a + "' /> " + da + "</label></td></tr>";
								break;
							}
						}
					}
				}
				s += "</table>";
				document.getElementById("DialogSelectExpandsCheckBoxes").innerHTML = s;
				document.getElementById("DialogSelectExpandsHTML").style.display = "inline-block";
			}
			else
				document.getElementById("DialogSelectExpandsHTML").style.display = "none";
			document.getElementById("SelectExpandsNumberOfRecords").value = node.STAExpectedLength;

		}

		function ShowTableSelectSortByDialog(node) {
			var data = node.STAdata;

			if (!data || !data.length) {
				document.getElementById("DialogSelectSortByRadioButtons").innerHTML = "No data to show.";
				return;
			}

			var dataAttributes = node.STAdataAttributes ? node.STAdataAttributes : getDataAttributes(data);

			const dataAttributesArray = Object.keys(dataAttributes);

			var s = "";
			var first = true;
			for (var a = 0; a < dataAttributesArray.length; a++) {
				if (!dataAttributesArray[a].endsWith("@iot.navigationLink") && dataAttributesArray[a].charAt(0) != '@') {
					s += "<label><input type='radio'" + (first ? "checked='checked'" : "") + " id='SelectSortByEntity_" + a + "' name='SelectSortByEntity'/> " + dataAttributesArray[a] + "</label><br>";
					first = false;
				}
			}
			document.getElementById("DialogSelectSortByRadioButtons").innerHTML = s;
			//document.getElementById("DialogSelectSortByHTML").style.display = "inline-block";
			document.getElementById("SelectSortByNumberOfRecords").value = node.STAExpectedLength;
		}

		function ShowTableSelectRowsDialog(parentNodeId, nodeId) {
			var data = networkNodes.get(parentNodeId).STAdata;

			if (!data || !data.length) {
				document.getElementById("DialogSelectRowsTable").innerHTML = "No data to show.";
				return;
			}

			document.getElementById("DialogSelectRowsTableRadio").checked = true;
			document.getElementById("DialogSelectRowsTable").innerHTML = GetHTMLTable(data, networkNodes.get(parentNodeId).STAdataAttributes, false, networkNodes.get(nodeId).STAURLIdSelected ? networkNodes.get(nodeId).STAURLIdSelected : 0);

			document.getElementById("DialogSelectRowsFilterRadio").checked = false;
			document.getElementById("DialogSelectRowsFilter").innerHTML = "";
		}

		function ShowTableFilterRowsDialog(nodeId, paramsNodeId) {
			var data = networkNodes.get(nodeId).STAdata;
			var dataAttributes = getDataAttributes(data);  //no borrar

			if (!data || !data.length) {
				document.getElementById("DialogSelectRowsTable").innerHTML = "No data to show.";
				return;
			}

			document.getElementById("DialogSelectRowsTableRadio").checked = false;
			document.getElementById("DialogSelectRowsTable").innerHTML = "";

			document.getElementById("DialogSelectRowsFilterRadio").checked = true;
			document.getElementById("DialogSelectRowsFilter").innerHTML = GetSelectorsForRowFilter(nodeId); //funciÃ³ al marcar el radiobutton del Filter

			createSelectorRowFilters(dataAttributes, nodeId, paramsNodeId); /////////////////////////////////////////////////////////
		}

		function ChangeTableFilterRowsDialog(parentNodeId, nodeId, paramsNodeId) {
			if (document.getElementById("DialogSelectRowsTableRadio").checked)
				ShowTableSelectRowsDialog(parentNodeId, nodeId);
			else
				ShowTableFilterRowsDialog(parentNodeId, nodeId, paramsNodeId);
		}

		function SeparatePropertyIfNeeded(record, property, baseName) {
			if (typeof property === "object" && property !== null)  //"arrays" and 'null' are also objects.
			{
				if (Array.isArray(property)) {
					//Array: creating multifields
					for (var j = 0; j < property.length; j++) {
						if (typeof property[j] === "object") {
							if (Array.isArray(property[j])) {
								for (var jj = 0; jj < property[j].length; jj++)
									SeparatePropertyIfNeeded(record, property[j][jj], baseName + "_" + j + "_" + jj);
							}
							else {
								var subkeys = Object.keys(property[j]);
								for (var kk = 0; kk < subkeys.length; kk++)
									SeparatePropertyIfNeeded(record, property[j][subkeys[kk]], baseName + "/" + subkeys[kk] + "_" + j)
							}
						}
						else
							record[baseName + "_" + j] = property[j];
					}
				}
				else {
					//Object; lets separate it.
					var subkeys = Object.keys(property);
					for (var kk = 0; kk < subkeys.length; kk++)
						SeparatePropertyIfNeeded(record, property[subkeys[kk]], baseName + "/" + subkeys[kk])
				}
			}
			else
				record[baseName] = property;
		}

		function SeparateColumns(node, parentNode) {
			var record, recordParent, data = parentNode.STAdata;

			if (!data)
				showInfoMessage("No data loaded in the parent node.");
			if (parentNode.STAURL)
				node.STAURL = parentNode.STAURL;

			node.STAExpectedLength = parentNode.STAExpectedLength;
			node.STAdata = [];
			for (var i = 0; i < data.length; i++) {
				record = node.STAdata[i] = {};
				recordParent = data[i]
				var keys = Object.keys(recordParent);
				for (var k = 0; k < keys.length; k++)
					SeparatePropertyIfNeeded(record, recordParent[keys[k]], keys[k]);
			}
			if (parentNode.STAdataAttributes) {
				var dataAttributes = getDataAttributes(data);
				var dataAttributesArray = Object.keys(dataAttributes);
				for (var i = 0; i < dataAttributesArray.length; i++) {
					node.STAdataAttributes[dataAttributesArray[i]] = deapCopy((parentNode.STAdataAttributes[dataAttributesArray[i]]) ? parentNode.STAdataAttributes[dataAttributesArray[i]] : dataAttributes[dataAttributesArray[i]]);
				}
			}
			networkNodes.update(node);
		}

		/*return
					null means connection should not be done.
					true means all done
					false means pending.*/
		function StartCircularImage(nodeTo, nodeFrom, calUnir) {
			var errorText = reasonNodeDoesNotFitWithPrevious(nodeTo, nodeFrom);
			if (errorText) {
				alert("Node incompatible. " + errorText + ". It has not been added.");
				return null;
			}
			if (nodeFrom.STAURL && IdOfSTAEntity(nodeTo) != -1) {
				if (nodeFrom.image == "ogc.png")
					nodeTo.STAURL = nodeFrom.STAURL + "/" + STAEntitiesArray[IdOfSTAEntity(nodeTo)];
				else
					nodeTo.STAURL = nodeFrom.STAURL + "/" + getConnectionSTAEntity(nodeFrom, nodeTo).entity;
				nodeTo.STAExpectedLength = nodeFrom.STAExpectedLength;

				networkNodes.update(nodeTo);
				if (calUnir)
					networkEdges.add([{ from: nodeFrom.id, to: nodeTo.id, arrows: "from" }]);
				showInfoMessage("Requesting " + STAEntitiesArray[IdOfSTAEntity(nodeTo)] + " to STA...");
				LoadJSONNodeSTAData(nodeTo);
				return true;
			}
			if (nodeFrom.STAURL && IdOfSTASpecialQueries(nodeTo) != -1) {
				nodeTo.STAURL = nodeFrom.STAURL + "/" + STASpecialQueries[STASpecialQueriesArray[IdOfSTASpecialQueries(nodeTo)]].query;
				nodeTo.STAExpectedLength = nodeFrom.STAExpectedLength;
				networkNodes.update(nodeTo);
				if (calUnir)
					networkEdges.add([{ from: nodeFrom.id, to: nodeTo.id, arrows: "from" }]);
				showInfoMessage("Requesting " + STASpecialQueriesArray[IdOfSTASpecialQueries(nodeTo)] + " to STA...");
				LoadJSONNodeSTAData(nodeTo);
				return true;
			}
			if (nodeFrom.STAURL && (nodeTo.image == "SelectColumnsSTA.png" || nodeTo.image == "SelectRowsSTA.png" || nodeTo.image == "SortBySTA.png")) {
				nodeTo.STAURL = nodeFrom.STAURL;
				nodeTo.STAExpectedLength = nodeFrom.STAExpectedLength;
				if (nodeFrom.STAdata)
					nodeTo.STAdata = deapCopy(nodeFrom.STAdata);
				if (nodeFrom.STAdataAttributes)
					nodeTo.STAdataAttributes = deapCopy(nodeFrom.STAdataAttributes);
				networkNodes.update(nodeTo);
				if (calUnir)
					networkEdges.add([{ from: nodeFrom.id, to: nodeTo.id, arrows: "from" }]);
				//showInfoMessage("Selecting " + (nodeTo.image == "SelectColumnsSTA.png" ? "columns" : "rows") + " to STA...");
				//LoadJSONNodeSTAData(nodeTo);
				return true;
			}
			if (nodeFrom.STAdata && (nodeTo.image == "SelectColumnsTable.png" || nodeTo.image == "SelectRowsTable.png")) { //afegir SelectRowsTable.png
				nodeTo.STAdata = deapCopy(nodeFrom.STAdata);
				if (nodeFrom.STAdataAttributes)
					nodeTo.STAdataAttributes = deapCopy(nodeFrom.STAdataAttributes);
				networkNodes.update(nodeTo);
				if (calUnir)
					networkEdges.add([{ from: nodeFrom.id, to: nodeTo.id, arrows: "from" }]);
				return true;
			}
			if (nodeTo.image == "SeparateColumns.png") {
				if (calUnir)
					networkEdges.add([{ from: nodeFrom.id, to: nodeTo.id, arrows: "from" }]);
				SeparateColumns(nodeTo, nodeFrom);
				return true;
			}

			return false;
		}

		function KeySTAPage(event) {
			//if (event.keyCode == 113)  //F2
			if (event.code == "F2" || event.code == "Delete") {
				event.preventDefault();
				var nodeId = network.getSelectedNodes();
				if (nodeId && nodeId.length) {
					switch (event.code) {
						case "F2":
							renameNode(nodeId[0]);
							break;
						case "Delete":
							removeNode(nodeId[0]);
							break;
					}
				}
			}
		}

		// create an array with nodes
		var networkNodes = new vis.DataSet([]);

		// create an array with edges
		var networkEdges = new vis.DataSet([]);
		var networkOptions = {
			interaction: { hover: true },
			manipulation: {  //https://stackoverflow.com/questions/39701703/add-edge-dynamically-visjs
				enabled: false,
				addEdge: function (data, callback) {
					console.log('add edge', data);
					if (data.from == data.to)
						showInfoMessage("Connection to the same node is not allowed.");
					else {
						networkEdges.add([{ from: data.to, to: data.from, arrows: "from" }]);
						showInfoMessage("Connected.");
						StartCircularImage(networkNodes.get(data.from), networkNodes.get(data.to), false);
					}
					connectionInProcess = false;
				}
			}
		};

		var network = new vis.Network(document.getElementById("mynetwork"), {
			nodes: networkNodes,
			edges: networkEdges
		}, networkOptions);

		/*network.on("click", function (params) {
			params.event = "[original event]";
			document.getElementById("eventSpanHeading").innerText = "Click event:";
			document.getElementById("eventSpanContent").innerText = JSON.stringify(params, null, 4);
			console.log("click event, getNodeAt returns: " + this.getNodeAt(params.pointer.DOM));
		});*/
		function networkDoubleClick(params) {
			/*params.event = "[original event]";
			document.getElementById("eventSpanHeading").innerText = "doubleClick event:";
			document.getElementById("eventSpanContent").innerText = JSON.stringify(params, null, 4);*/

			if (params.nodes && params.nodes.length && !connectionInProcess) {
				currentNode = networkNodes.get(params.nodes[0])
				if (currentNode.image == "ogc.png") {
					document.getElementById("DialogSTAURLInput").value = currentNode.STAURL;
					document.getElementById("DialogSTAURLInput").readOnly = false;
					document.getElementById("DialogSTAURLOk").style.display = "inline-block";
					document.getElementById("DialogSTAURL").showModal();
				}
				else if (currentNode.image == "ViewQuerySTA.png") {
					document.getElementById("DialogSTAURLInput").value = "";
					var parentNode = GetFirstParentNode(currentNode);
					if (parentNode)
						document.getElementById("DialogSTAURLInput").value = parentNode.STAURL;
					document.getElementById("DialogSTAURLInput").readOnly = true;
					document.getElementById("DialogSTAURLOk").style.display = "none";
					document.getElementById("DialogSTAURL").showModal();
				}
				else if (currentNode.image == "ImportCSV.png") {
					//ShowImportCSVDialog(currentNode.id);
					document.getElementById("DialogImportCSV").showModal();
				}
				else if (currentNode.image == "Table.png") {
					///Determining the parent node.
					var nodeids = network.getConnectedNodes(currentNode.id, "from");
					if (nodeids && nodeids.length && networkNodes.get(nodeids[0])) {
						var data = networkNodes.get(nodeids[0]).STAdata;
						if (data && data.length)
							document.getElementById("DialogOKOptions").innerHTML = "<label><input type='checkbox' checked='checked' id='ShowTableRowNumberDialogOK' onChange='ShowTableDialog(\"" + nodeids[0] + "\");'/> Show row numbers</label>";
						else
							document.getElementById("DialogOKOptions").innerHTML = "";
						ShowTableDialog(nodeids[0]);
						document.getElementById("DialogOK").showModal();
					}
				}
				else if (currentNode.image == "UploadObservations.png") {
					ShowUploadObservationsDialog(currentNode);
					document.getElementById("DialogUploadObservations").showModal();
				}
				else if (currentNode.image == "UploadTimeAverages.png") {
					ShowUploadTimeAveragesDialog(currentNode.id);
					document.getElementById("UploadTimeAverages").showModal();
				}
				else if (currentNode.image == "SaveTable.png") {
					//ShowSaveTableDialog(currentNode.id);
					document.getElementById("DialogSaveTable").showModal();
				}
				else if (currentNode.image == "ScatterPlot.png") {
					var parentNodes = GetParentNodes(currentNode);
					if (parentNodes && parentNodes[0]) {
						if (parentNodes[0].STAURL)
							ShowScatterPlotDialog(parentNodes);
						document.getElementById("DialogScatterPlot").showModal();
					}
				}
				else if (currentNode.image == "OneValue.png") {
					ShowOneValueDialog(currentNode);
					document.getElementById("DialogOneValue").showModal();
				}
				else if (currentNode.image == "SaveLayer.png") {
					ShowSaveLayerDialog(currentNode.id);
					document.getElementById("DialogSaveLayer").showModal();
				}
				else if (currentNode.image == "OpenMap.png") {
					ShowOpenMapDialog(currentNode.id);
					document.getElementById("DialogSaveLayer").showModal();
				}
				else if (currentNode.image == "SelectColumnsSTA.png" || currentNode.image == "SelectColumnsTable.png") {
					var parentNode = GetFirstParentNode(currentNode);
					if (parentNode) {
						ShowTableSelectColumnsDialog(parentNode, currentNode);
						document.getElementById("DialogSelectColumns").showModal();
					}
				}
				else if (currentNode.image == "SelectRowsSTA.png" || currentNode.image == "SelectRowsTable.png") { //afegir el SelectRowsTable.png?
					//Determining the parent node.
					var nodeids = network.getConnectedNodes(currentNode.id, "from");
					if (nodeids && nodeids.length) {
						if (networkNodes.get(nodeids[0]) && (networkNodes.get(nodeids[0]).STAURL || networkNodes.get(nodeids[0]).STAdata)) {
							document.getElementById("DialogSelectRowsTableInputSpan").innerHTML = "<label><input type='radio' name='DialogSelectRowsRadio' id='DialogSelectRowsTableRadio' checked='checked' onClick='ChangeTableFilterRowsDialog(\"" + nodeids[0] + "\",\"" + currentNode.id + "\")'/> Select an element:</label>";
							document.getElementById("DialogSelectRowsFilterInputSpan").innerHTML = "<label><input type='radio' name='DialogSelectRowsRadio' id='DialogSelectRowsFilterRadio' onClick='ChangeTableFilterRowsDialog(\"" + nodeids[0] + "\",\"" + currentNode.id + "\", \"" + params["nodes"][0] + "\")'/>  Filter:</label>";
							ShowTableSelectRowsDialog(nodeids[0], currentNode.id);
						}
						document.getElementById("DialogSelectRows").showModal();
					}
				}
				else if (currentNode.image == "SortBySTA.png") {
					var parentNode = GetFirstParentNode(currentNode);
					if (parentNode) {
						if (parentNode.STAURL)
							ShowTableSelectSortByDialog(parentNode);
						document.getElementById("DialogSelectSortBy").showModal();
					}
				}
				else if (IdOfSTAEntity(currentNode) != -1) {
					//Offering expand
					ShowTableSelectExpandsDialog(currentNode.id, true);
					document.getElementById("DialogSelectExpands").showModal();
				}
				else if (IdOfSTASpecialQueries(currentNode) != -1) {
					ShowTableSelectExpandsDialog(currentNode.id, false);
					document.getElementById("DialogSelectExpands").showModal();
				}
			}
		}
		network.on("doubleClick", networkDoubleClick);
		function networkContext(params) {
			params.event.preventDefault();  //https://stackoverflow.com/questions/38258940/open-an-extension-popup-html-list-on-right-click-of-node-contextmenu-in-visj

			var nodeId = network.getNodeAt(params.pointer.DOM); //params.nodes is not useful here as params.nodes are the selected ones and not the ones rightclicked.
			if (nodeId) {
				startingNodeContextId = nodeId;
				document.getElementById("DialogContextMenu").showModal();
				return;
			}
			var edgeId = network.getEdgeAt(params.pointer.DOM);
			if (edgeId) {
				startingEdgeContextId = edgeId;
				document.getElementById("DialogEdgeContextMenu").showModal();
			}
			/*params.event = "[original event]";
			document.getElementById("eventSpanHeading").innerText = "oncontext (right click) event:";
			document.getElementById("eventSpanContent").innerText = JSON.stringify(params, null, 4);*/
		}
		network.on("oncontext", networkContext);
		/*network.on("dragStart", function (params) {
			// There's no point in displaying this event on screen, it gets immediately overwritten
			params.event = "[original event]";
			console.log("dragStart Event:", params);
			console.log("dragStart event, getNodeAt returns: " + this.getNodeAt(params.pointer.DOM));
		});
		network.on("dragging", function (params) {
			params.event = "[original event]";
			document.getElementById("eventSpanHeading").innerText = "dragging event:";
			document.getElementById("eventSpanContent").innerText = JSON.stringify(params, null, 4);
		});
		network.on("dragEnd", function (params) {
			params.event = "[original event]";
			document.getElementById("eventSpanHeading").innerText = "dragEnd event:";
			document.getElementById("eventSpanContent").innerText = JSON.stringify(params, null, 4);
			console.log("dragEnd Event:", params);
			console.log("dragEnd event, getNodeAt returns: " + this.getNodeAt(params.pointer.DOM));
		});
		network.on("controlNodeDragging", function (params) {
			params.event = "[original event]";
			document.getElementById("eventSpanHeading").innerText = "control node dragging event:";
			document.getElementById("eventSpanContent").innerText = JSON.stringify(params, null, 4);
		});
		network.on("controlNodeDragEnd", function (params) {
			params.event = "[original event]";
			document.getElementById("eventSpanHeading").innerText = "control node drag end event:";
			document.getElementById("eventSpanContent").innerText = JSON.stringify(params, null, 4);
			console.log("controlNodeDragEnd Event:", params);
		});
		network.on("zoom", function (params) {
			document.getElementById("eventSpanHeading").innerText = "zoom event:";
			document.getElementById("eventSpanContent").innerText = JSON.stringify(params, null, 4);
		});
		network.on("showPopup", function (params) {
			document.getElementById("eventSpanHeading").innerText = "showPopup event: ";
			document.getElementById("eventSpanContent").innerText = JSON.stringify(params, null, 4);
		});
		network.on("hidePopup", function () {
			console.log("hidePopup Event");
		});
		network.on("select", function (params) {
			console.log("select Event:", params);
		});
		network.on("selectNode", function (params) {
			console.log("selectNode Event:", params);
		});
		network.on("selectEdge", function (params) {
			console.log("selectEdge Event:", params);
		});
		network.on("deselectNode", function (params) {
			console.log("deselectNode Event:", params);
		});
		network.on("deselectEdge", function (params) {
			console.log("deselectEdge Event:", params);
		});
		network.on("hoverNode", function (params) {
			console.log("hoverNode Event:", params);
		});
		network.on("hoverEdge", function (params) {
			console.log("hoverEdge Event:", params);
		});
		network.on("blurNode", function (params) {
			console.log("blurNode Event:", params);
		});
		network.on("blurEdge", function (params) {
			console.log("blurEdge Event:", params);
		});*/


		function addCircularImage(event, dialog, label, image) {
			var returnStart = false;
			if (event)
				event.preventDefault(); // We don't want to submit this form
			if (dialog)
				document.getElementById(dialog).close();
			var newId = (Math.random() * 1e7).toString(32);
			var node = { id: newId, label: label, image: image, shape: "circularImage" };

			if (image == "ogc.png") {
				node.STAURL = config.STAurl;
				node.STAExpectedLength = 100;
				networkNodes.add(node);
				showInfoMessage("Requesting STA landing page");
				LoadJSONNodeSTAData(node);
			}
			else {
				if (!startingNodeContextId)
					networkNodes.add(node);
				else {
					returnStart = StartCircularImage(node, networkNodes.get(startingNodeContextId), true);
					if (returnStart == null)
						return;
					if (!returnStart) {
						networkNodes.add(node);
						networkEdges.add([{ from: startingNodeContextId, to: newId, arrows: "from" }]);
					}
				}
			}

			if (startingNodeContextId)
				startingNodeContextId = null;

			network.selectNodes([newId]);
		}

		function removeNode(nodeId) {
			var node = networkNodes.get(nodeId);
			if (confirm("Do you want to remove the node '" + node.label + "'?")) {
				networkNodes.remove(nodeId);
				return 0;
			}
			return 1;
		}

		function removeCircularImage(event, dialog) {
			if (event)
				event.preventDefault(); // We don't want to submit this form
			if (dialog)
				document.getElementById(dialog).close();
			if (startingNodeContextId) {
				if (0 == removeNode(startingNodeContextId))
					startingNodeContextId = null;
			}
		}

		function renameNode(nodeId) {
			var node = networkNodes.get(nodeId);
			node.label = prompt("Change node label to:", node.label);
			networkNodes.update(node);
		}

		function renameCircularImage(event, dialog) {
			if (event)
				event.preventDefault(); // We don't want to submit this form
			if (dialog)
				document.getElementById(dialog).close();
			if (startingNodeContextId) {
				renameNode(startingNodeContextId);
				startingNodeContextId = null;
			}
		}

		function addEdge() {
			network.addEdgeMode();
			connectionInProcess = true;
			showInfoMessage("Press the mouse botton on the starting node (child node), and drag and drop the mouse on the end node (parent node).");
		}

		function removeEdge(event, dialog) {
			if (event)
				event.preventDefault(); // We don't want to submit this form
			if (dialog)
				document.getElementById(dialog).close();
			if (startingEdgeContextId) {
				if (confirm("Do you want to remove the edge?")) {
					networkEdges.remove(startingEdgeContextId);
					startingEdgeContextId = null;
				}
			}
		}

		function openNetwork(event) {
			var input = event.target;

			var reader = new FileReader();
			reader.onload = function () {
				//Transform the JSON text in something in memory
				try {
					var data = JSON.parse(reader.result);
					network.destroy();
					networkNodes = new vis.DataSet(data.nodes);
					networkEdges = new vis.DataSet(data.edges);
					network = new vis.Network(document.getElementById("mynetwork"), {
						nodes: networkNodes,
						edges: networkEdges
					}, networkOptions);
					network.on("doubleClick", networkDoubleClick);
					network.on("oncontext", networkContext);
					document.getElementById("openNetworkFileName").value = null;  //https://stackoverflow.com/questions/3528359/html-input-type-file-file-selection-event
				}
				catch (e) {
					showInfoMessage("JSON message parse error: " + e + " The file content is:\n" + reader.result);
					return;
				}
			};
			reader.readAsText(input.files[0]);
		}

		function saveNetwork(event) {
			var pos = network.getPositions()
			var posArray = Object.keys(pos);
			var data = { nodes: [], edges: [] };
			for (var i = 0; i < posArray.length; i++) {
				data.nodes.push(deapCopy(networkNodes._data[posArray[i]]));
				data.nodes[i].x = pos[posArray[i]].x;
				data.nodes[i].y = pos[posArray[i]].y;
			}
			var edgesArray = Object.keys(networkEdges._data);
			for (var i = 0; i < edgesArray.length; i++) {
				data.edges.push(deapCopy(networkEdges._data[edgesArray[i]]));
				delete data.edges[i].id;
			}
			SaveLocalDataFile(JSON.stringify(data, null, "\t"), "network", ".json", "application/json");
		}

		async function reloadSTA(event) {
			var nodesArray = Object.keys(networkNodes._data);
			for (var i = 0; i < nodesArray.length; i++) {
				var node = networkNodes._data[nodesArray[i]];
				if (node.image == "ogc.png") {
					showInfoMessage("Reload STA home page and dependencies...");
					showInfoMessage("Requesting STA page...");
					await LoadJSONNodeSTAData(node, function () {
						showInfoMessage("Reload STA home page and dependencies completed.");
					});
				}
			}
		}
		function giveMeNetworkInformation(event) {
			if (event)
				event.preventDefault(); // We don't want to submit this form
			document.getElementById("DialogSelectColumns").close();
			console.log(networkNodes);
		}

	</script>

</body>


</html>