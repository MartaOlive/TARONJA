<!DOCTYPE html>
<html lang="en">

<head>
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
	<title>TAPIS: Tables from APIs for Sensors (Sensor Things API plus Explorer)</title>
	<script type="text/javascript" src="vis.min.js"></script>
	<script type="text/javascript" src="papaparse.min.js"></script>
	<style type="text/css">
		#mynetwork {
			width: 600px;
			height: 400px;
			border: 1px solid lightgray;
		}

		body {
			font-family: Arial
		}

		.tablesmall {
			font-size: 0.5em;
			border-collapse: collapse;
			border-spacing: 0px;
		}

		.th_compact {
			padding-top: 1px;
			padding-bottom: 1px;
		}

		.td_compact {
			padding-top: 1px;
			padding-bottom: 1px;
		}

		.tr_compact:nth-child(even) {
			background-color: #DCDCCA;
		}

		.tr_compact:nth-child(odd) {
			background-color: #EEEEEB;
		}

		.center {
			margin: 0 auto;
			text-align: center;
		}

		#divSelectorRowsFilter {
			min-width: 1750px;
			height: 800px;
			border: black 1px solid;
			position: absolute;
			left: 250px;
		}

		#chooseTypeOfFilter {
			border: black 1px solid;
			min-width: 200px;
			height: 300px;
			position: absolute;
			left: 0px;
		}

		#selectorRowsContainer {
			min-width: 1500px;
			min-height: 400px;
		}

		.hidden {
			display: none;
		}

		.instructions {
			font-size: 12px;
			font-style: italic;
		}


		.objectInSelect {
			background-color: rgba(255, 153, 0, 0.87);
		}

		#imageIsAnObject {
			display: block;
			/* height:400; */
			position: absolute;
			/* left:20; */
		}

		.borderTable {
			border: black 1px solid;
		}

		th.borderTable {
			min-width: 100px;
			padding-left: 10px;
			padding-right: 10px;
		}

		.divResultBox{
			margin-top: 20px;
			height: 300px;
			border: black 1px solid;
		}
	</style>
	<link rel="stylesheet" href="vis.min.css">


</head>

<body onLoad="StartSTAPage();">
	<h2>TAPIS: Tables from APIs for Sensors (Sensor Things API plus Explorer)</h2>

	<button onclick='addCircularImage(null, null, "STAplus", "ogc.png");'><img src="ogc.png" height="20"
			valign="middle"> Add a STA service</button><br>
	<span id="ButtonsSTAEntities"></span>
	<button onclick="addEdge();">Connect two nodes</button><br>

	<div id="clarification"></div>

	<div id="mynetwork"></div>

	<dialog id="DialogSTAURL">
		<form>
			<p>
				<label>STA service URL:
					<input type="text" id="DialogSTAURLInput" size="100"></input>
				</label>
			</p>
			<div class="center">
				<button value="default" onClick="GetSTAURL(event)">OK</button>
				<button value="cancel" formmethod="dialog">Cancel</button>
			</div>
		</form>
	</dialog>

	<dialog id="DialogSelectColumns">
		<form>
			Select columns:
			<span id="DialogSelectColumnsHTML">
			</span>
			<div class="center">
				<button value="default" onClick="GetSelectColumns(event)">OK</button>
				<button value="cancel" formmethod="dialog">Cancel</button>
			</div>
		</form>
	</dialog>

	<dialog id="DialogSelectExpands">
		<form>
			<fieldset id="DialogSelectExpandsHTML">
				<legend>Select what do you want to expand:</legend>
				<span id="DialogSelectExpandsCheckBoxes">
				</span>
			</fieldset>
			<label>Number records to request:
				<input type="text" id="SelectExpandsNumberOfRecords" size="6" maxlength="6" value="100"></input>
			</label>
			<div class="center">
				<button value="default" onClick="GetSelectExpands(event)">OK</button>
				<button value="cancel" formmethod="dialog">Cancel</button>
			</div>
		</form>
	</dialog>

	<dialog id="DialogSelectRows">
		<form>
			<span id="DialogSelectRowsTableInputSpan">
			</span>
			<span id="DialogSelectRowsTable">
			</span>
			<br>
			<span id="DialogSelectRowsFilterInputSpan">
			</span>
			<span id="DialogSelectRowsFilter">
			</span>
			<div class="center">
				<button value="default" onClick="GetSelectRows(event)">OK</button>
				<button value="cancel" formmethod="dialog">Cancel</button>
			</div>
		</form>
	</dialog>

	<dialog id="DialogContextMenu">
		<form>
			<p>
				<button onclick='addCircularImage(event, "DialogContextMenu", "STAplus", "ogc.png");'><img src="ogc.png"
						height="20" valign="middle"> Add a STA service</button><br>
				<span id="ButtonsContextMenuObjects"></span>
				<button onclick='removeCircularImage(event, "DialogContextMenu")'>Remove</button><br>
				<button onclick='giveMeNodeInformation(event, "DialogContextMenu")'>Node Info</button><br>
				<button onclick='giveMeNetworkInformation(event, "DialogContextMenu")'>Network Info</button><br>
			</p>
			<div class="center">
				<button value="cancel" onClick="startingNodeContextId=null;" formmethod="dialog">Cancel</button>
			</div>
		</form>
	</dialog>


	<dialog id="DialogOK">
		<form>
			<span id="DialogOKOptions"></span><br>
			<span id="DialogOKHTML">
			</span>
			<div class="center">
				<button value="cancel" formmethod="dialog">Close</button>
			</div>
		</form>
	</dialog>

	<dialog id="DialogSaveTable">
		<form>
			Save the table as CSV.
			<br>
			<label>CSV delimiter:
				<input type="text" id="DialogSaveTableDelimiter" size="2" maxlength="1" value=";"></input>
			</label>
			<!--span id="DialogSaveTableOptions"></span--><br>
			</span>
			<div class="center">
				<button value="default" onClick="SaveTable(event)">Save</button>
				<button value="cancel" formmethod="dialog">Cancel</button>
			</div>
		</form>
	</dialog>

	<dialog id="DialogSaveLayer">
		<form>
			<span id="DialogSaveLayerTitle"></span>
			<fieldset>
				<legend>Position:</legend>
				<label>Place description:
					<span id="DialogSaveLayerPlace"></span>
				</label>
				<br>
				<label>Longitude:
					<span id="DialogSaveLayerLongitude"></span>
				</label>
				<br>
				<label>Latitude:
					<span id="DialogSaveLayerLatitude"></span>
				</label>
			</fieldset>
			<br>
			<label>Date and time:
				<span id="DialogSaveLayerTime"></span>
			</label>
			<fieldset>
				<legend>Observed properties:</legend>
				<label>Name:
					<span id="DialogSaveLayerVariable"></span>
				</label>
				<br>
				<span id="DialogSaveLayerVariableDescriptionUoM">
					<label>Description:
						<span id="DialogSaveLayerVariableDescription"></span>
					</label>
					<br>
					<label>Definition:
						<span id="DialogSaveLayerVariableDefinition"></span>
					</label>
					<br>
					<fieldset>
						<legend>Units of measurement:</legend>
						<label>Name:
							<span id="DialogSaveLayerVariableUoM"></span>
						</label>
						<br>
						<label>Symbol:
							<span id="DialogSaveLayerVariableUoMSymbol"></span>
						</label>
						<br>
						<label>Definition:
							<span id="DialogSaveLayerVariableUoMDefinition"></span>
						</label>
						<fieldset>
							<br>
				</span>
				<label>Value:
					<span id="DialogSaveLayerValue"></span>
				</label>
			</fieldset>
			<br>
			<div class="center">
				<span id="DialogSaveLayerSave"></span>
				<button value="cancel" formmethod="dialog">Cancel</button>
			</div>
		</form>
	</dialog>

	<!--h2 id="eventSpanHeading"></h2>
	<pre id="eventSpanContent"></pre-->

	<script type="text/javascript">
		"use strict"

		//var STAurl = "https://citiobs.demo.secure-dimensions.de/inaturalist/v1.1";
		var STAurl = "https://citiobs.demo.secure-dimensions.de/staplus/v1.1";
		var MMNpath = "../osm";

		const STAEntities = {
			ObservedProperties: { singular: "ObservedProperty", entities: ["Datastreams", "MultiDatastreams"], properties: ["name", "definition", "description", "properties"] },
			Observations: { singular: "Observation", entities: ["Datastream", "MultiDatastream", "FeatureOfInterest", "ObservationGroups", "Subjects", "Objects"], properties: ["phenomenonTime", "resultTime", "result", "resultQuality", "validTime", "parameters"] },
			FeaturesOfInterest: { singular: "FeatureOfInterest", entities: ["Observations"], properties: ["name", "description", "encodingType", "feature", "properties"] },
			Sensors: { singular: "Sensor", entities: ["Datastreams", "MultiDatastreams"], properties: ["name", "description", "encodingType", "metadata", "properties"] },
			Things: { singular: "Thing", entities: ["Datastreams", "MultiDatastreams", "Party", "Locations", "HistoricalLocations"], properties: ["name", "description", "properties"] },
			Locations: { singular: "Location", entities: ["Things", "HistoricalLocations"], properties: ["name", "description", "encodingType", "location", "properties"] },
			HistoricalLocations: { singular: "HistoricalLocation", entities: ["Things", "Location"], properties: ["time"] },
			Datastreams: { singular: "Datastream", entities: ["Party", "Sensor", "ObservedProperty", "Campaigns", "License", "Observations", "Thing"], properties: ["name", "description", "unitOfMeasurement", "observationType", "observedArea", "phenomenonTime", "resultTime", "properties"] },
			MultiDatastreams: { singular: "MultiDatastream", entities: ["Party", "Sensor", "ObservedProperties", "Campaigns", "License", "Observations", "Thing"], properties: ["name", "description", "unitOfMeasurements", "observationType", "observedArea", "phenomenonTime", "resultTime", "multiObservationDataTypes", "properties"] },
			Parties: { singular: "Party", entities: ["Datastreams", "MultiDatastreams", "Campaigns", "ObservationGroups", "Things"], properties: ["description", "authId", "role", "displayName"] },
			Campaigns: { singular: "Campaign", entities: ["Datastreams", "MultiDatastreams", "Party", "License"], properties: ["name", "description", "classification", "termsOfUse", "privacyPolicy", "creationTime", "startTime", "endTime", "url", "properties"] },
			Licenses: { singular: "License", entities: ["Datastreams", "MultiDatastreams", "Campaigns", "ObservationGroups"], properties: ["name", "description", "definition", "logo", "attributionText"] },
			ObservationGroups: { singular: "ObservationGroup", entities: ["Party", "Campaigns", "License", "Observations", "Relations"], properties: ["name", "description", "purpose", "creationTime", "endTime", "termsOfUsed", "privacyPolicy", "properties", "dataQuality"] },
			Relations: { singular: "Relation", entities: ["Object", "Subject", "ObservationGroups"], properties: ["role", "description", "externalObject", "properties"] }
		};
		const STAEntitiesArray = Object.keys(STAEntities);
		const STASpecialQueries = { ObsLayer: { description: "Observations Layer", query: "Observations?$orderby=phenomenonTime%20desc&$expand=Datastream($select=unitOfMeasurement),Datastream/ObservedProperty($select=name,description,definition),FeatureOfInterest($select=description,feature)&$select=phenomenonTime,result" } }
		const STASpecialQueriesArray = Object.keys(STASpecialQueries);
		const TableOperations = {
			Table: { description: "View Table" },
			SelectColumns: { description: "Select Columns" },
			SelectRows: { description: "Select Rows" },
			SeparateColumns: { description: "Separate Columns" },
			ViewQuery: { description: "View Query" },
			SaveTable: { description: "Save Table" },
			SaveLayer: { description: "Save Layer" },
			OpenMap: { description: "Open Map" }
		};
		const TableOperationsArray = Object.keys(TableOperations);


		window.onbeforeunload = function () { return "Your work will be lost."; }

		function AddKVPToURL(url, kvp) {
			if (url.indexOf('?') == -1)
				return url + "?" + kvp;
			return url + "&" + kvp;
		}

		var currentNode = null, connectionInProcess = false, startingNodeContextId = null;

		function StartSTAPage() {
			var s = "";

			for (var i = 0; i < STAEntitiesArray.length; i++)
				s += "<button onclick='addCircularImage(null, null, \"" + STAEntitiesArray[i] + "\", \"" + STAEntitiesArray[i] + ".png\");'><img src='" + STAEntitiesArray[i] + ".png' height='20' valign='middle'> " + STAEntitiesArray[i] + "</button> ";
			s += "<br>";

			for (var i = 0; i < STASpecialQueriesArray.length; i++)
				s += "<button onclick='addCircularImage(null, null, \"" + STASpecialQueriesArray[i] + "\", \"" + STASpecialQueriesArray[i] + ".png\");'><img src='" + STASpecialQueriesArray[i] + ".png' height='20' valign='middle'> " + STASpecialQueries[STASpecialQueriesArray[i]].description + "</button> ";
			s += "<br>";

			for (var i = 0; i < TableOperationsArray.length; i++)
				s += "<button onclick='addCircularImage(null, null, \"" + TableOperationsArray[i] + "\", \"" + TableOperationsArray[i] + ".png\");'><img src='" + TableOperationsArray[i] + ".png' height='20' valign='middle'> " + TableOperations[TableOperationsArray[i]].description + "</button> ";
			s += "<br>";

			document.getElementById("ButtonsSTAEntities").innerHTML = s;

			s = "";
			for (var i = 0; i < STAEntitiesArray.length; i++)
				s += "<button onclick='addCircularImage(event, \"DialogContextMenu\", \"" + STAEntitiesArray[i] + "\", \"" + STAEntitiesArray[i] + ".png\");'><img src='" + STAEntitiesArray[i] + ".png' height='20' valign='middle'> " + STAEntitiesArray[i] + "</button><br>";
			s += "<br>";
			for (var i = 0; i < STASpecialQueriesArray.length; i++)
				s += "<button onclick='addCircularImage(event, \"DialogContextMenu\", \"" + STASpecialQueriesArray[i] + "\", \"" + STASpecialQueriesArray[i] + ".png\");'><img src='" + STASpecialQueriesArray[i] + ".png' height='20' valign='middle'> " + STASpecialQueries[STASpecialQueriesArray[i]].description + "</button><br>";
			s += "<br>";
			for (var i = 0; i < TableOperationsArray.length; i++)
				s += "<button onclick='addCircularImage(event, \"DialogContextMenu\", \"" + TableOperationsArray[i] + "\", \"" + TableOperationsArray[i] + ".png\");'><img src='" + TableOperationsArray[i] + ".png' height='20' valign='middle'> " + TableOperations[TableOperationsArray[i]].description + "</button><br>";

			document.getElementById("ButtonsContextMenuObjects").innerHTML = s;
		}

		//https://web.dev/fetch-api-error-handling/
		async function LoadJSONData(node, callback, url) {
			var response, jsonData;
			try {
				var url_fetch;
				if (url)
					url_fetch = url;
				else if (typeof node.STAExpectedLength === "undefined")
					url_fetch = AddKVPToURL(node.STAURL);
				else
					url_fetch = AddKVPToURL(node.STAURL, "$top=" + node.STAExpectedLength);

				response = await fetch(url_fetch);
			}
			catch (error) {
				document.getElementById("clarification").innerHTML = 'Error getting ' + node.STAURL + ": " + error.message;
				console.log('There was an error', error);
				node.STAdata = null;
				networkNodes.update(node);
				return;
			}
			// Uses the 'optional chaining' operator
			if (!(response?.ok)) {
				document.getElementById("clarification").innerHTML = "HTTP Response Code: " + response?.status + " reading <small>" + node.STAURL + "</small>: " + response?.statusText;
				console.log("HTTP Response Code: " + response?.status + ": " + response?.statusText);
				node.STAdata = null;
				networkNodes.update(node);
				return;
			}
			try {
				jsonData = await response.json();
			} catch (error) {
				if (error instanceof SyntaxError) {
					document.getElementById("clarification").innerHTML = 'Syntax error reading ' + node.STAURL + ": " + error.message;
					console.log('There was a SyntaxError', error);
					node.STAdata = null;
					networkNodes.update(node);
					return;
				}
				else {
					document.getElementById("clarification").innerHTML = 'Error interpreting ' + node.STAURL + ": " + error.message;
					console.log('There was an error', error);
					node.STAdata = null;
					networkNodes.update(node);
					return;
				}
			}
			if (url && typeof node.STAExpectedLength)  //node.STAExpectedLength
			{
				node.STAdata = node.STAdata.concat(jsonData.value);
				if (node.STAdata.length > node.STAExpectedLength)  //too much data. Trucating
					node.STAdata.length = node.STAExpectedLength;
			}
			else
				node.STAdata = (typeof jsonData.value !== "undefined") ? jsonData.value : [jsonData];
			networkNodes.update(node);
			if (jsonData.value && node.STAExpectedLength && node.STAdata.length < node.STAExpectedLength && jsonData["@iot.nextLink"])
				LoadJSONData(node, callback, jsonData["@iot.nextLink"]);
			else {
				UpdateChildenLoadJSONCallback(node);
				if (callback)
					callback(node);  //The callback function is never used yet.
			}
		}

		var savedFile = null;

		function MakeHrefData(data, mediatype) {
			var blobData = new Blob([data], { type: mediatype });

			// If we are replacing a previously generated file we need to
			// manually revoke the object URL to avoid memory leaks.
			if (savedFile !== null)
				window.URL.revokeObjectURL(savedFile);

			savedFile = window.URL.createObjectURL(blobData);
			return savedFile;
		}

		function SaveLocalDataFile(data, fileName, extension, mediatype)   //Saves a memory data structure to a local file
		{
			const link = document.createElement('a');
			if (fileName.substring(fileName.length - extension.length) != extension)
				fileName += extension;
			link.setAttribute('download', fileName);
			link.setAttribute('href', MakeHrefData(data));
			document.body.appendChild(link);

			// wait for the link to be added to the document
			window.requestAnimationFrame(function () {
				var event = new MouseEvent('click');
				link.dispatchEvent(event);
				document.body.removeChild(link);
			});

			return false;
		}

		function GetSTAURL(event) {
			event.preventDefault(); // We don't want to submit this form
			document.getElementById("DialogSTAURL").close(document.getElementById("DialogSTAURLInput").value);

			if (currentNode.STAURL == document.getElementById("DialogSTAURLInput").value)
				return;
			var previousSTAURL = currentNode.STAURL;
			currentNode.STAURL = document.getElementById("DialogSTAURLInput").value; // Have to send the select box value here.
			if (currentNode.STAURL.charAt(currentNode.STAURL.length - 1) == '/')
				currentNode.STAURL = currentNode.STAURL.slice(0, -1);  //remove last character
			networkNodes.update(currentNode);	//https://visjs.github.io/vis-data/data/dataset.html#Data_Manipulation
			LoadJSONData(currentNode);

			//if childen nodes have also STAURL
			UpdateChildenSTAURL(currentNode, currentNode.STAURL, previousSTAURL);
		}

		function GetSelectColumns(event) {
			event.preventDefault(); // We don't want to submit this form
			document.getElementById("DialogSelectColumns").close();

			var nodeids = network.getConnectedNodes(currentNode.id, "from");
			if (nodeids && nodeids.length && networkNodes.get(nodeids[0])) {
				var node = networkNodes.get(nodeids[0]);
				if (node.STAURL)
					currentNode.STAURL = node.STAURL;
				if (node.STAdata)
					currentNode.STAdata = node.STAdata;
			}
			currentNode.STASelectedColumns = [];
			var dataAttributes = getDataAttributes(currentNode.STAdata);
			for (var a = 0; a < dataAttributes.length; a++) {
				if (!document.getElementById("SelectColumn_" + a).checked)
					break;
			}
			if (a < dataAttributes.length) //A checked attribute has been found ("for" breaks before ending).
			{
				var s;
				currentNode.STAURL = AddKVPToURL(currentNode.STAURL, "$select=");
				for (var a = 0; a < dataAttributes.length; a++) {
					if (document.getElementById("SelectColumn_" + a).checked) {
						if (dataAttributes[a].startsWith("@iot."))
							s = dataAttributes[a].substring(5);
						else
							s = dataAttributes[a].replace("@iot.", "/");  //Changes Datastreams@iot.navigationLink to Datastreams/navigationLink
						currentNode.STAURL += s + ",";
						currentNode.STASelectedColumns[a] = true;
					}
					else
						currentNode.STASelectedColumns[a] = false;
				}
				currentNode.STAURL = currentNode.STAURL.slice(0, -1); //remove the last coma.
				currentNode.STAExpectedLength = node.STAExpectedLength;
				networkNodes.update(currentNode);
				LoadJSONData(currentNode);
				UpdateChildenSTAURL(currentNode);
			}
			else   //If no selected collumn has been found, no filter is done and all collumns are selected
			{
				for (var a = 0; a < dataAttributes.length; a++) {
					currentNode.STASelectedColumns[a] = true;
				}
			}
		}

		function GetSelectExpands(event) {
			event.preventDefault(); // We don't want to submit this form
			document.getElementById("DialogSelectExpands").close();

			var dataAttributes = getDataAttributes(currentNode.STAdata);
			if (!currentNode.STASelectedExpands)
				currentNode.STASelectedExpands = { STAURLUnexpanded: currentNode.STAURL, dataAttributesUnexpanded: dataAttributes.slice(), selected: [] };
			else
				currentNode.STAURL = currentNode.STASelectedExpands.STAURLUnexpanded;

			if (document.getElementById("DialogSelectExpandsHTML").style.display != "none") {
				var dataAttr = currentNode.STASelectedExpands.dataAttributesUnexpanded;
				for (var a = 0; a < dataAttr.length; a++) {
					if (document.getElementById("SelectExpand_" + a) && document.getElementById("SelectExpand_" + a).checked)
						break;
				}
				if (a < dataAttr.length) //A checked attribute has been found ("for" breaks before ending).
				{
					var s;
					currentNode.STAURL = AddKVPToURL(currentNode.STAURL, "$expand=");
					for (var a = 0; a < dataAttr.length; a++) {
						if (document.getElementById("SelectExpand_" + a) &&
							document.getElementById("SelectExpand_" + a).checked &&
							dataAttr[a].endsWith("@iot.navigationLink")) {
							s = dataAttr[a].substring(0, dataAttr[a].length - "@iot.navigationLink".length);
							currentNode.STAURL += s + ",";
							currentNode.STASelectedExpands.selected[a] = true;
						}
						else
							currentNode.STASelectedExpands.selected[a] = false;
					}
					currentNode.STAURL = currentNode.STAURL.slice(0, -1); //remove the last coma.
				}
				/*else   //If no selected collumn has been found, no expand is needed and the previous request is fine
					;*/
			}
			if (!isNaN(parseInt(document.getElementById("SelectExpandsNumberOfRecords").value)))
				currentNode.STAExpectedLength = parseInt(document.getElementById("SelectExpandsNumberOfRecords").value);
			networkNodes.update(currentNode);
			LoadJSONData(currentNode);
			UpdateChildenSTAURL(currentNode);
		}

		function isNumeric(str) {
			if (typeof str != "string") return false // we only process strings!
			return !isNaN(str) && // use type coercion to parse the _entirety_ of the string (`parseFloat` alone does not do this)...
				!isNaN(parseFloat(str)) // ...and ensure strings of whitespace fail
		}

		function GetSelectRows(event) {
			event.preventDefault(); // We don't want to submit this form
			document.getElementById("DialogSelectRows").close();

			var nodeids = network.getConnectedNodes(currentNode.id, "from");
			if (nodeids && nodeids.length && networkNodes.get(nodeids[0])) {
				var node = networkNodes.get(nodeids[0]);
				if (node.STAURL)
					currentNode.STAURL = node.STAURL;
				if (node.STAdata)
					currentNode.STAdata = node.STAdata;
			}
			else
				return;

			if (document.getElementById("DialogSelectRowsTableRadio").checked) {
				var elems = document.getElementsByName("SelectRowRadio");
				for (var i = 0; i < elems.length; i++) {
					if (elems[i].checked)
						break;
				}
				if (i < elems.length) {
					const s = elems[i].id.substring("SelectRow_".length);
					const n = Number(s);
					if (Number.isInteger(n))
						currentNode.STAURL += "(" + n + ")";
					else
						currentNode.STAURL += "(\"" + s + "\")";
				}
			}
			else { //El filter està seleccionat
				var divSelectorRowsFilter;
				if (document.getElementById("oneOrMoreValue").checked) {
					divSelectorRowsFilter = document.getElementById("divSelectorRowsFilterParticular");
				} else {
					divSelectorRowsFilter = document.getElementById("divSelectorRowsFilterInterval");
				}

				var selectChild = divSelectorRowsFilter.childNodes;
				var selectIds = []; //llista ids dels selectors
				//console.log(selectChild); label, select1, label2, select2,textInput,button, instructions
				var valueField;
				var collectedInformation = [];
				var chosenValue = [];
				var select2;
				for (let index = 0; index < selectChild.length; index++) {
					if (index == 1 || index == 3) { //selectors
						valueField = document.getElementById(selectChild[index].getAttribute("id"));
						chosenValue = valueField.options[valueField.selectedIndex].value;
						collectedInformation.push(chosenValue);
						if (index == 3) select2 = document.getElementById(selectChild[index].getAttribute("id"));
					} else if (index == 4) { //inputText
						valueField = document.getElementById(selectChild[index].getAttribute("id"));
						chosenValue = valueField.value;
						collectedInformation.push(chosenValue); //[infoSelect1, InfoSelect2, InfoInput (encara que estigui buit)]
					}

				}
				console.log(collectedInformation);

				// var node = networkNodes.get(nodeids[0]);
				// var selectInformationWithoutAt = selectInformation.map((element) => { //Falla en el SelfLink, observations/navigationLink... Amb l'@tampoc funciona
				// 	if (element.startsWith("@iot.")) {
				// 		return element.substring(5);
				// 	} else {
				// 		return element.replace("@iot.", "/");
				// 	}
				// });


				// console.log(selectInformationWithoutAt);

				currentNode.STAURL += "?$filter=" + collectedInformation[0] + " eq '"; //selector1
				if (select2.classList.contains("hidden")) { //Si es tria amb el textInput
					currentNode.STAURL += collectedInformation[2] + "'";
					console.log("select2hidden");
				} else {
					currentNode.STAURL += collectedInformation[1] + "'";
					console.log("select2 Nohidden");
				}
				console.log(currentNode.STAURL);
			}
			networkNodes.update(currentNode);
			LoadJSONData(currentNode);
			UpdateChildenSTAURL(currentNode);
		}


		function IdOfSTAEntity(node) {
			for (var i = 0; i < STAEntitiesArray.length; i++) {
				if (node.image == STAEntitiesArray[i] + ".png")
					return i;
			}
			return -1;
		}

		function IdOfSTASpecialQueries(node) {
			for (var i = 0; i < STASpecialQueriesArray.length; i++) {
				if (node.image == STASpecialQueriesArray[i] + ".png")
					return i;
			}
			return -1;
		}

		function UpdateChildenSTAURL(parentNode, currentSTAURLroot, previousSTAURLroot) {
			var nodeIds = network.getConnectedNodes(parentNode.id, 'to');
			for (var i = 0; i < nodeIds.length; i++) {
				var node = networkNodes.get(nodeIds[i])
				if (node.STAURL && currentSTAURLroot && previousSTAURLroot) {
					if (node.STAURL.substring(0, previousSTAURLroot.length) == previousSTAURLroot)
						node.STAURL = currentSTAURLroot + node.STAURL.substring(previousSTAURLroot.length);
					if (IdOfSTAEntity(node) != -1 || IdOfSTASpecialQueries(node) != -1 || node.image == "SelectColumns.png" || node.image == "SelectRows.png") {
						networkNodes.update(node);
						LoadJSONData(node);
					}
				}
				UpdateChildenSTAURL(node);
			}
		}

		function UpdateChildenLoadJSONCallback(parentNode) {
			var nodeIds = network.getConnectedNodes(parentNode.id, 'to');
			for (var i = 0; i < nodeIds.length; i++) {
				var node = networkNodes.get(nodeIds[i])
				if (node.image == "SeparateColumns.png")
					SeparateColumns(node, parentNode);
			}
		}

		function getDataAttributes(data) {
			var dataAttributes = [], s;

			for (var i = 0; i < data.length; i++) {
				var keys = Object.keys(data[i]);
				for (var k = 0; k < keys.length; k++) {
					for (var a = 0; a < dataAttributes.length; a++) {
						if (dataAttributes[a] == keys[k])
							break;
					}
					if (a == dataAttributes.length)
						dataAttributes.push(keys[k]);
				}
			}
			return dataAttributes;
		}

		function fillValueSelector(nodeId, type) {
			var data = networkNodes.get(nodeId).STAdata;
			var select;
			select = document.getElementById("selector" + type);
			var selectedProperty = select.options[select.selectedIndex].value;
			var selectedElement;
			selectedElement = document.getElementById("selector" + type + "2");
			selectedElement.innerHTML = "";

			var valor;
			var arrayValors = [];
			var isAnObject;

			// s'ha de filtrar
			for (let index = 0; index < data.length; index++) {
				valor = data[index][selectedProperty];
				// console.log(typeof valor);
				if (typeof valor === "object") isAnObject = "yes";
				if (!arrayValors.find(element => element == valor)) {
					var opcio = document.createElement("option");
					opcio.setAttribute("value", valor);
					opcio.innerHTML = valor;
					selectedElement.appendChild(opcio);
					arrayValors.push(valor);
				} else {
					console.log("en el else");
				}

			}

			var divIsAnObject = document.getElementById("divIsAnObject")
			if (isAnObject === "yes") {
				selectedElement.setAttribute("class", "objectInSelect");
				divIsAnObject.classList.remove("hidden");

			} else {
				selectedElement.classList.remove("objectInSelect");
				divIsAnObject.classList.add("hidden");
			}
		}

		function changeSelectToWrite(type) {  //Que pugui recollir el text del input
			event.preventDefault();
			var textInput = document.getElementById("textInput" + type);
			var selector2 = document.getElementById("selectorParticular2");
			var label2 = document.getElementById("label2" + type);
			var writeButton = document.getElementById("chooseValueButton" + type);
			var textInput = document.getElementById("textInput" + type);
			var instructions = document.getElementById("instructions" + type);
			if (textInput.classList.contains("hidden")) {
				selector2.setAttribute("class", "hidden");
				label2.innerHTML = "Write a value";
				writeButton.innerHTML = "Click here if you want to use selector";
				textInput.classList.remove("hidden");
				instructions.innerHTML = "If you prefere to select value with select option click the button. If you click ok button you will use the value in the text field to apply the filter"
			} else {
				selector2.classList.remove("hidden");
				label2.innerHTML = "Choose a value";
				writeButton.innerHTML = "Click here if you prefere to write the value";
				textInput.classList.add("hidden");
				instructions.innerHTML = "Is not your value on the list? If you prefere to write the value, click the button";
			}
			// console.log(selectorNumber);
		}

		function isAnObject(nodeId, type) {
			var select = document.getElementById("selector" + type + "2");
			var selectOption = select.options[select.selectedIndex].value;
			if (selectOption === "[object Object]") {
				console.log("object!!!!");
			} else {
				console.log(selectOption);
				console.log(typeof selectOption);
			}
		}

		function createSelectorRowFilters(dataAttributes, nodeId, kindOfSource,) {
			var type = kindOfSource;
			var data = networkNodes.get(nodeId).STAdata;
			var selectorStructureRow;
			var divSelectorRowsFilter = document.getElementById("divSelectorRowsFilter");
			var divParticularBox = document.createElement("div"); //general
			divParticularBox.setAttribute("id", "divSelectorRowsFilter" + type);
			if (type == "Interval") divParticularBox.setAttribute("class", "hidden");
			divSelectorRowsFilter.appendChild(divParticularBox);

			var optionsRow = document.createElement("div");
			optionsRow.setAttribute("id", "optionsRow");
			divParticularBox.appendChild(optionsRow);
			var label1 = document.createElement("label");
			label1.innerHTML = "Choose a Property";
			optionsRow.appendChild(label1);
			var select1 = document.createElement("select");
			select1.setAttribute("name", "category");
			select1.setAttribute("id", "selector" + type);
			select1.setAttribute("onChange", "fillValueSelector('" + nodeId + "','" + type + "')");
			optionsRow.appendChild(select1);

			for (let i = 0; i < dataAttributes.length; i++) {// per omplir el de category/property
				var option = document.createElement("option");
				option.setAttribute("value", dataAttributes[i]);
				option.innerHTML = dataAttributes[i];
				select1.appendChild(option);
			}

			var label2 = document.createElement("label");
			label2.setAttribute("id", "label2" + type);
			label2.innerHTML = "Choose a Value";
			optionsRow.appendChild(label2);
			var select2 = document.createElement("select");
			select2.setAttribute("name", "selectedValue");
			select2.setAttribute("id", "selector" + type + "2");
			select2.setAttribute("onChange", "isAnObject('" + nodeId + "','" + type + "')");
			optionsRow.appendChild(select2);

			var valor;
			var arrayValors = [];
			for (let index = 0; index < data.length; index++) {
				valor = data[index][dataAttributes[0]];
				if (!arrayValors.find(element => element == valor)) {
					var option = document.createElement("option");
					option.setAttribute("value", valor);
					option.innerHTML = valor;
					select2.appendChild(option);
					arrayValors.push(valor);
				} else {
					console.log("en el else");
				}
			}

			var textInput = document.createElement("input");
			textInput.setAttribute("id", "textInput" + type);
			textInput.setAttribute("type", "text");
			textInput.setAttribute("class", "hidden");
			divParticularBox.appendChild(textInput);

			var writeButton = document.createElement("button");
			writeButton.innerHTML = "Click here if you prefere to write the value";
			writeButton.setAttribute("id", "chooseValueButton" + type);
			writeButton.setAttribute("onclick", "changeSelectToWrite('" + type + "')");
			divParticularBox.appendChild(writeButton);

			var instructions = document.createElement("div");
			instructions.setAttribute("id", "instructions" + type);
			instructions.innerHTML = "Is not your value on the list? You can write it, click the button";
			instructions.setAttribute("class", "instructions");
			divParticularBox.appendChild(instructions);

			var addButton = document.createElement("button");
			addButton.setAttribute("id", "addButton" + type);
			addButton.setAttribute("onclick", "addSelected('" + type + "')");
			addButton.setAttribute("value", 1)
			addButton.innerHTML = "add";
			divParticularBox.appendChild(addButton);


			var divIsAnObject = document.createElement("div"); //es veurà quan la property seleccionada sigui un objecte
			divIsAnObject.setAttribute("id", "divIsAnObject");
			divIsAnObject.setAttribute("class", "hidden");
			var textIsAnObject = document.createElement("h5");
			textIsAnObject.setAttribute("id", "textIsAnObject");
			textIsAnObject.innerHTML = 'This property contains a set of values, if you want to sail inside it to choose one value, please use "separate colums" option before using "Row filter" option to unfold the values. Follow example below';
			divIsAnObject.appendChild(textIsAnObject);
			var imageIsAnObject = document.createElement("img");
			imageIsAnObject.setAttribute("src", "SeparateColumsExample.png");
			imageIsAnObject.setAttribute("height", "300");
			imageIsAnObject.setAttribute("id", "imageIsAnObject");

			divIsAnObject.appendChild(imageIsAnObject);
			divParticularBox.appendChild(divIsAnObject);

			var divResult = document.createElement("div");
			divResult.setAttribute("id", "divResult" + type);
			divResult.setAttribute("class", "divResultBox")
			divResult.innerHTML = "These are your values selected to filter ";
			divParticularBox.appendChild(divResult);

			var table = document.createElement("table");
			table.setAttribute("id", "tableResult");
			table.setAttribute("class", "borderTable");
			var tableTr = document.createElement("tr");
			tableTr.setAttribute("id", "tableTr0");
			tableTr.setAttribute("class", "borderTable");
			table.appendChild(tableTr);
			for (var i = 0; i < 4; i++) {
				var tableTh = document.createElement("th");
				tableTh.setAttribute("class", "borderTable");
				console.log("aaa");
				if (i == 1) {
					tableTh.innerHTML = "Property";

				} else if (i == 2) {
					tableTh.innerHTML = "Value";
				}
				tableTr.appendChild(tableTh)
			}

			divResult.appendChild(table);

		}

		function addSelected(type) {
			event.preventDefault();
			console.log("add");
			var addButton = document.getElementById("addButton" + type);
			var valueButton = addButton.getAttribute("value");
			var valueButtonInt = parseInt(valueButton);
			console.log(valueButton);

			var table = document.getElementById("tableResult");
			var tableTr = document.createElement("tr");
			tableTr.setAttribute("id", "tableTr" + valueButtonInt);
			tableTr.setAttribute("class", "borderTable");
			table.appendChild(tableTr);

			var selector1 = document.getElementById("selector" + type);
			var selector2 = document.getElementById("selector" + type + "2");

			// selector1.options[selector1.selectedIndex].value;
			// selector2.options[selector2.selectedIndex].value;

			for (var a = 0; a < 4; a++) {
				var tableTh = document.createElement("th");
				tableTh.setAttribute("class", "borderTable");
				console.log("bb")

				if (a == 0) {
					if (valueButtonInt != 1) {
						tableTh.setAttribute("id", "tr_" + valueButtonInt);
						// tableTh.innerHTML = "select";
						var selectAndOr = document.createElement("select");
						selectAndOr.setAttribute("id", "select_row_" + valueButtonInt);
						tableTh.appendChild(selectAndOr);

						for (var s = 0; s < 2; s++) {
							console.log(s);
							var optionSelect = document.createElement("option");
							if (s == 0) {
								optionSelect.setAttribute("value", "and");
								optionSelect.innerHTML = "And";

							} else {
								optionSelect.setAttribute("value", "or");
								optionSelect.innerHTML = "Or";
							}
							selectAndOr.appendChild(optionSelect);
						}
					}
				}
				else if (a == 1) {
					tableTh.innerHTML = selector1.options[selector1.selectedIndex].value;

				} else if (a == 2) {
					tableTh.innerHTML = selector2.options[selector2.selectedIndex].value;

				} else if (a == 3) {
					// tableTh.innerHTML = "delete";
					var buttonDelete=document.createElement("button");
					buttonDelete.setAttribute("id", "buttonDelete_"+valueButtonInt);
					buttonDelete.setAttribute("onclick", "deleteRow()");
					buttonDelete.innerHTML="Delete ";
					tableTh.appendChild(buttonDelete);

				}
				tableTr.appendChild(tableTh)
			}
			valueButtonInt++;
			addButton.setAttribute("value", valueButtonInt);

		}


function deleteRow(){
	event.preventDefault();
	console.log("deleteRow");
}
		function showRowFilterByValues(nodeId) {
			var divSelectorRowsFilterParticular = document.getElementById("divSelectorRowsFilterParticular");
			divSelectorRowsFilterParticular.classList.remove("hidden");
			var divSelectorRowsFilterParticular = document.getElementById("divSelectorRowsFilterInterval");
			divSelectorRowsFilterParticular.classList.add("hidden");
			// console.log(typeof(nodeId));
			var data = networkNodes.get(nodeId).STAdata;
			console.log(data);
			var dataAttributes = getDataAttributes(data);
			console.log(dataAttributes);

		};
		function showRowFilterByInterval(nodeId) {
			var data = networkNodes.get(nodeId).STAdata;
			var divSelectorRowsFilterParticular = document.getElementById("divSelectorRowsFilterParticular");
			divSelectorRowsFilterParticular.classList.add("hidden");
			var divSelectorRowsFilterParticular = document.getElementById("divSelectorRowsFilterInterval");
			divSelectorRowsFilterParticular.classList.remove("hidden");
			console.log(data);
		}
		function GetSelectorsForRowFilter(nodeId) {
			var divSelectorStructure;
			divSelectorStructure = `
			<div id=selectorRowsContainer>
				<div id=chooseTypeOfFilter>
					<label for='oneOrMoreValue'><input type='radio' name='typeOfFilter' value='oneOrMoreValue' id='oneOrMoreValue' onClick= 'showRowFilterByValues(\"`+ nodeId + `\")' checked='checked'>Filter for one or more values</label><br>
					<label for='interval'><input type='radio' name='typeOfFilter' value='interval' id='interval' onClick= 'showRowFilterByInterval(\"`+ nodeId + `"\)'>Filter for interval</label>
				</div>
				<div id='divSelectorRowsFilter'></div></div>`;

			return divSelectorStructure;


		}
		function GetHTMLTable(data, rowNumbers, rowChecks) {
			var dataAttributes = getDataAttributes(data);

			var s = "<table class='tablesmall'><tr>";
			if (rowNumbers)
				s += "<th class='th_compact'></th>";
			if (rowChecks)
				s += "<th class='th_compact'></th>";
			for (var a = 0; a < dataAttributes.length; a++)
				s += "<th class='th_compact'>" + dataAttributes[a] + "</th>";
			s += "</tr>";
			for (var i = 0; i < data.length; i++) {
				s += "<tr class='tr_compact'>";
				if (rowNumbers)
					s += "<td class='td_compact'>" + (i + 1) + "</td>";
				if (rowChecks)
					s += "<td class='td_compact'><input type='radio' name='SelectRowRadio' id='SelectRow_" + (data[i]["@iot.id"] ? data[i]["@iot.id"] : i) + "' " + (i == 0 ? "checked='checked'" : "") + "/></td>";
				for (var a = 0; a < dataAttributes.length; a++) {
					s += "<td class='td_compact'>"
					if (typeof data[i][dataAttributes[a]] !== "undefined") {
						if ((dataAttributes[a] == "url" || dataAttributes[a] == "definition" ||
							dataAttributes[a].endsWith("@iot.selfLink") ||
							dataAttributes[a].endsWith("@iot.navigationLink")) && data[i][dataAttributes[a]].length)
							s += "<a href='" + data[i][dataAttributes[a]] + "' target='_blank'>" + data[i][dataAttributes[a]] + "</a>";
						else
							s += JSON.stringify(data[i][dataAttributes[a]]);
					}
					s += "</td>"
				}
				s += "</tr>"
			}
			s += "</table>";
			return s;
		}

		function ShowTableDialog(nodeId) {
			var data = networkNodes.get(nodeId).STAdata;

			if (!data || !data.length) {
				document.getElementById("DialogOKHTML").innerHTML = "No data to show.";
				return;
			}

			document.getElementById("DialogOKHTML").innerHTML = GetHTMLTable(data,
				document.getElementById("ShowTableRowNumberDialogOK").checked ? true : false,
				false);
		}

		function StringifyObjectElements(data) {
			var dataAttributes = getDataAttributes(data), jsonTable = [];

			for (var i = 0; i < data.length; i++) {
				jsonTable[i] = {};
				for (var a = 0; a < dataAttributes.length; a++) {
					if (typeof data[i][dataAttributes[a]] === "object")  //"arrays" are also objects.
						jsonTable[i][dataAttributes[a]] = JSON.stringify(data[i][dataAttributes[a]]);
					else
						jsonTable[i][dataAttributes[a]] = data[i][dataAttributes[a]];
				}
			}
			return jsonTable;
		}


		function GetGeoJSON(data, selectedOptions) {
			var dataSorted = JSON.parse(JSON.stringify(data)), geojson = { "type": "FeatureCollection", "features": [] };

			//Sorted by place, variable and date (older first).
			dataSorted.sort(function (a, b) {
				if (a[selectedOptions.place] < b[selectedOptions.place])
					return -1;
				if (a[selectedOptions.place] > b[selectedOptions.place])
					return 1;
				if (a[selectedOptions.longitude] - b[selectedOptions.longitude] < -0.0000001)
					return -1;
				if (a[selectedOptions.longitude] - b[selectedOptions.longitude] > 0.0000001)
					return 1;
				if (a[selectedOptions.latitude] - b[selectedOptions.latitude] < -0.0000001)
					return -1;
				if (a[selectedOptions.latitude] - b[selectedOptions.latitude] > 0.0000001)
					return 1;
				if (a[selectedOptions.variable] < b[selectedOptions.variable])
					return -1;
				if (a[selectedOptions.variable] > b[selectedOptions.variable])
					return 1;
				if (a[selectedOptions.time] < b[selectedOptions.time])
					return -1;
				if (a[selectedOptions.time] > b[selectedOptions.time])
					return 1;
				return 0;
			});
			var a, b;
			for (var i = 0, f = -1; i < dataSorted.length; i++) {
				a = dataSorted[i], b = dataSorted[i == 0 ? 0 : i - 1];
				if (i == 0 || a[selectedOptions.place] != b[selectedOptions.place] ||
					a[selectedOptions.longitude] > b[selectedOptions.longitude] + 0.0000001 ||
					a[selectedOptions.latitude] < b[selectedOptions.latitude] - 0.0000001 ||
					a[selectedOptions.latitude] > b[selectedOptions.latitude] + 0.0000001) {
					f++;
					geojson.features[f] = {
						"type": "Feature",
						"geometry": {
							"type": "Point",
							"coordinates": [
								a[selectedOptions.longitude],
								a[selectedOptions.latitude]
							]
						},
						"properties": {
							"Place": a[selectedOptions.place],
						}
					};
				}
				geojson.features[f].properties[a[selectedOptions.variable] + "_" + a[selectedOptions.time]] = a[selectedOptions.value];
			}
			return geojson;
		}

		function GetGeoJSONSchema(data, selectedOptions) {
			return {
				"$id": "https://meaning.ad4gd.eu/meaning.schema.json",
				"$schema": "https://meaning.ad4gd.eu/json-meta/meaning",
				"type": "object",
				"properties": {
					"features": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"geometry": {
									"type": "object",
									"properties": {
										"type": { "type": "string" },
										"coordinates": { "type": "array" }
									}
								},
								"properties": {
									"type": "object",
									"properties": GetGeoJSONPropertiesSchema(data, selectedOptions)
								}
							}
						}
					}
				}
			};
		}

		function GetGeoJSONPropertiesSchema(data, selectedOptions) {
			var dataSorted = JSON.parse(JSON.stringify(data));

			var attributes = {
				"Place": {

					"descripcio": "Place name",
					"mostrar": "si"
				}
			};

			//Sorted by variable.
			dataSorted.sort(function (a, b) {
				if (a[selectedOptions.variable] < b[selectedOptions.variable])
					return -1;
				if (a[selectedOptions.variable] > b[selectedOptions.variable])
					return 1;
				return 0;
			});
			var a, b, UoMSymbol;
			for (var i = 0; i < dataSorted.length; i++) {
				a = dataSorted[i], b = dataSorted[i == 0 ? 0 : i - 1];
				if (i == 0 || a[selectedOptions.variable] != b[selectedOptions.variable]) {
					UoMSymbol = a[selectedOptions.variableUoMSymbol];
					if (UoMSymbol == "ug/m3")
						UoMSymbol == "µg/m³";
					attributes[a[selectedOptions.variable] + "_{time?f=ISO}"] = {
						"descripcio": a[selectedOptions.variableDescription],
						"definition": a[selectedOptions.variableDefinition],
						"UoM": a[selectedOptions.variableUoM],
						"UoMSymbol": UoMSymbol,
						"UoMDefinition": a[selectedOptions.variableUoMDefinition],
						"mostrar": "si",
						"serieTemporal": {
							"color": "#ff0000"
						}
					};
				}
			}
			return attributes;
		}

		function GetGeoJSONMetaschema() {
			return {
				"title": "GeoJSON properties meaning schema",
				"$schema": "http://json-schema.org/draft/2019-09/schema#",
				"$id": "https://meaning.ad4gd.eu/json-meta/meaning",
				"$vocabulary": {
					"https://json-schema.org/draft/2019-09/vocab/core": true,
					"https://json-schema.org/draft/2019-09/vocab/applicator": true,
					"https://json-schema.org/draft/2019-09/vocab/validation": true,
					"https://json-schema.org/draft/2019-09/vocab/meta-data": true,
					"https://json-schema.org/draft/2019-09/vocab/format": false,
					"https://json-schema.org/draft/2019-09/vocab/content": true,
					"https://meaning.ad4gd.eu/json-meta/meaning": false
				},
				"$recursiveAnchor": true,
				"allOf": [
					{
						"$ref": "https://json-schema.org/draft/2019-09/schema"
					},
					{
						"$ref": "#/definitions/AttributeDescription"
					}
				],
				"definitions": {
					"AttributeDescription": {
						"title": "GeoJSON meaning vocabulary meta-schema",
						"type": "object",
						"$comment": "The name of the property is the name of the atribut. If the server is SOS there are 2 special names: __om_time__, __om_sensor__ and the rest match the field names of the table containing the data.",
						"properties": {
							"nomOri": {
								"description": "Name of the original attribute. Optional. If the attributes are taken from a CSV and are transformed into one or more attributes (because they are associated with time). In this case the nomOri maybe different from the property name.",
								"type": ["string", "null"]
							},
							"simbol": {
								"description": "Symbol of the attribute. Note that it is not the units of measurement symbol. For example, the letter 'sigma' can represent standard deviation. It will be used in the compact display (coordinates box) if defined. Created for statistical attributes, but can be used elsewhere.",
								"type": ["string", "null"]
							},
							"descripcio": {
								"description": "Description of the attribute in multiple languages.",
								"$ref": "#/definitions/StringOCadenaLang"
							},
							"definition": {
								"description": "A URI that defines the observedProperty or the variable. You may find the right definitions in https://qudt.org/2.1/vocab/quantitykind, http://vocabs.lter-europe.net/EnvThes or https://www.eea.europa.eu/help/glossary/eea-glossary.",
								"type": ["string", "null"],
								"format": "uri"
							},
							"UoM": {
								"description": "Units of measurement of the attribute. Formerly refered as 'unitats'",
								"type": ["string", "null"]
							},
							"UoMSymbol": {
								"description": "Symbol of the units of measurement of the atributte.",
								"type": ["string", "null"]
							},
							"UoMDefinition": {
								"description": "A URI that defines the units of measurement of the observedProperty or variable. You may find the right definitions in https://qudt.org/2.1/vocab/unit",
								"type": ["string", "null"],
								"format": "uri"
							},
							"calcul": {
								"description": "Fórmula matemàtica per transformar els valors d'una o més properties d'una altra capa vectorial o raster. Per a apuntar a una capa raster consulteu l'explicació dins de 'component' per apuntar a una capa vectorial usarem {'i_capa': 2, 'prop': 'nom_flor'} per referirnos a la capa 2 que és de 'model'='vector'. Només es pot fer servir si hi ha capa.objectes a la capa indicada. Si no indiqueu i_capa s'asumeix 'aquesta' capa. Per a cada objecte {'i_capa': 2, 'prop': 'nom_flor'} (o l'equivalment per capes raster per cada píxel) es transforma en el valor i un cop fet la fórmula es evaluada com una sintàxi JavaScript.",
								"type": "string"
							},
							"FormulaConsulta": {
								"description": "Formula matemàtica per transformar els valors dels objectes[].feature[].properties d'aquesta capa (o en valors[]). Per saber sobre v[0] etc consulteu l'explicació dins de 'component'. Useu p['nom'] per indicar el nom de la property dins de properties. També podeu indicar nonPropId per referir-vos a l'indentificador de l'objecte (p.ex. el feature id, en cas de GeoJSON). Només es pot fer servir si hi ha capa.valors o capa.objectes. Si voleu triar un valor d'un altre capa useu 'calcul'. Intenament, 'FormulaConsulta' es transforma en 'calcul'.",
								"type": "string"
							},
							"separador": {
								"description": "Separator of the next block of attributes",
								"$ref": "#/definitions/StringOCadenaLang"
							},
							"esLink": {
								"description": "Is the attribute value a link?",
								"type": "boolean"
							},
							"descLink": {
								"description": "Description of the link",
								"$ref": "#/definitions/StringOCadenaLang"
							},
							"esImatge": {
								"description": "Is the attribute value a image URI?. This forces the attribute to appear as an embedded image in the query box",
								"type": "boolean"
							},
							"FormatVideo": {
								"description": "If the attribute is a link to a video, this is the video format. This forces the attribute to appear as an embedded video with a play button in the query box. It should be a MIME type. Example: video/mp4. optional",
								"type": "string",
								"format": "uri"
							},
							"mostrar": {
								"description": "Should it be shown in the query box? Can be 'si' (always), 'no' (never), 'si_ple' (it will only be displayed if the attribute has content).",
								"enum": ["si", "no", "si_ple"]
							},
							"mida": {
								"description": "Implementation pending. Attribute size. Optional. Maximum width the field type can have. In the case of numerical types it is the maximum precision. In the case of strings it is the maximum length in characters. In the case of date-time it is the maximum length in characters of the representation of the date-time as text.",
								"type": "number"
							},
							"pDecimals": {
								"description": "Implementation pending. Number of decimals places of the attribute. It only applies if the attribute is of type 'number'. Optional. (Note: do not confused with NDecimals, which is the number of decimals to display in the screen).",
								"type": "number"
							},
							"format": {
								"description": "It is the format in which we receive the value from the server. Currently it is only used for a very specific thing in the interpretation of dates. In the future it could be combined with a 'type' to indicate whether string, date, number, float...",
								"enum": ["dd/mm/yyyy"]
							},
							"NDecimals": {
								"description": "Number of decimal places of the displayed values per screen. Optional, not indicated precision is not truncated.",
								"type": "number",
								"minimum": 0,
								"maximum": 20,
								"multipleOf": 1
							},
							"serieTemporal": {
								"description": "The values of this attribute form a time series that will be displayed as a graph.",
								"type": "object",
								"required": ["color"],
								"properties": {
									"color": {
										"description": "Line color in the graph",
										"type": "string"
									}
								}
							}
						}
					},
					"StringOCadenaLang": {
						"description": "String or multilanguage object.",
						"oneOf": [
							{
								"type": ["string", "null"]
							},
							{
								"type": "object",
								"properties": {
									"cat": {
										"description": "Català",
										"type": ["string", "null"]
									},
									"spa": {
										"description": "Español",
										"type": ["string", "null"]
									},
									"eng": {
										"description": "English",
										"type": ["string", "null"]
									},
									"fre": {
										"description": "Français",
										"type": ["string", "null"]
									},
									"cze": {
										"description": "Čeština",
										"type": ["string", "null"]
									},
									"ger": {
										"description": "Deutsch",
										"type": ["string", "null"]
									}
								}
							}
						]
					}
				}
			};
		}

		function GetGeoJSONStyles(data, selectedOptions) {
			var dataSorted = JSON.parse(JSON.stringify(data)), estil = [];

			//Sorted by variable.
			dataSorted.sort(function (a, b) {
				if (a[selectedOptions.variable] < b[selectedOptions.variable])
					return -1;
				if (a[selectedOptions.variable] > b[selectedOptions.variable])
					return 1;
				return 0;
			});
			var a, b, maximum;
			for (var i = 0, f = -1; i < dataSorted.length; i++) {
				a = dataSorted[i], b = dataSorted[i == 0 ? 0 : i - 1];
				if (i == 0 || a[selectedOptions.variable] != b[selectedOptions.variable]) {
					if (f >= 0)
						estil[f].simbols[0].simbol[0].icona.r = maximum > 0.001 ? 10 / maximum : 1;
					f++;
					maximum = a[selectedOptions.value];
					estil[f] = {
						"nom": null,
						"desc": a[selectedOptions.variableDescription],
						"DescItems": a[selectedOptions.variableUoMSymbol],
						"TipusObj": "P",
						"ItemLleg": [
							{
								"color": "#ff0000",
								"DescColor": a[selectedOptions.variableDescription]
							}
						],
						"ncol": 1,
						"simbols": [
							{
								"NomCampFEscala": a[selectedOptions.variable] + "_{time?f=ISO}",
								"simbol": [
									{
										"icona": {
											"type": "circle",
											"r": 1
										}
									}
								]
							}
						],
						"formes": [{
							"vora": {
								"paleta": {
									"colors": [
										"#ff0000"
									]
								}
							},
							"interior": {
								"paleta": {
									"colors": [
										"rgba(255,0,0,0.4)"
									]
								}
							}
						}],
						"fonts": {
							"NomCampText": a[selectedOptions.variable] + "_{time?f=ISO}",
							"aspecte": [
								{
									"font": {
										"font": "12px Verdana",
										"color": "#B50000",
										"align": "center",
										"i": 0,
										"j": -5
									}
								}
							]
						}
					};
				}
				else {
					if (maximum < a[selectedOptions.value])
						maximum = a[selectedOptions.value];
				}
			}
			if (f >= 0)
				estil[f].simbols[0].simbol[0].icona.r = maximum > 0.001 ? 10 / maximum : 1;
			return estil;
		}

		function GetGeoJSONDates(data, selectedOptions) {
			var dataSorted = JSON.parse(JSON.stringify(data)), datetimes = [];

			//Sorted by date (older first).
			dataSorted.sort(function (a, b) {
				if (a[selectedOptions.time] < b[selectedOptions.time])
					return -1;
				if (a[selectedOptions.time] > b[selectedOptions.time])
					return 1;
				return 0;
			});
			var a, b;
			for (var i = 0; i < dataSorted.length; i++) {
				a = dataSorted[i], b = dataSorted[i == 0 ? 0 : i - 1];
				if (i == 0 || a[selectedOptions.time] != b[selectedOptions.time])
					datetimes.push(a[selectedOptions.time]);
			}
			return datetimes;
		}

		function ShowSaveTableDialog(nodeId) {
			;   //Nothing to do
		}

		function PopulateSelectSaveLayerDialog(id, dataAttributes, selectedOption) {
			var s = "<select id=\"" + id + "Select" + "\">";
			for (var a = 0; a < dataAttributes.length; a++)
				s += "<option value=\"" + dataAttributes[a] + "\"" + (dataAttributes[a] == selectedOption ? "selected=\"selected\"" : "") + ">" + dataAttributes[a] + "</option>";
			s += "</select>";
			document.getElementById(id).innerHTML = s;
		}

		function ShowSaveLayerDialogSelects(nodeId, descripUoM) {
			var nodeids = network.getConnectedNodes(nodeId, "from");
			if (nodeids && nodeids.length) {
				var data = networkNodes.get(nodeids[0]).STAdata;
				var dataAttributes = getDataAttributes(data), s, elem;
				PopulateSelectSaveLayerDialog("DialogSaveLayerPlace", dataAttributes, "FeatureOfInterest/description");
				PopulateSelectSaveLayerDialog("DialogSaveLayerLongitude", dataAttributes, "FeatureOfInterest/feature/coordinates_0");
				PopulateSelectSaveLayerDialog("DialogSaveLayerLatitude", dataAttributes, "FeatureOfInterest/feature/coordinates_1");
				PopulateSelectSaveLayerDialog("DialogSaveLayerTime", dataAttributes, "PhenomenonTime");
				PopulateSelectSaveLayerDialog("DialogSaveLayerVariable", dataAttributes, "Datastream/ObservedProperty/name");
				if (descripUoM) {
					document.getElementById("DialogSaveLayerVariableDescriptionUoM").style.display = "block";
					PopulateSelectSaveLayerDialog("DialogSaveLayerVariableDescription", dataAttributes, "Datastream/ObservedProperty/description");
					PopulateSelectSaveLayerDialog("DialogSaveLayerVariableDefinition", dataAttributes, "Datastream/ObservedProperty/definition");
					PopulateSelectSaveLayerDialog("DialogSaveLayerVariableUoM", dataAttributes, "Datastream/unitOfMeasurement/name");
					PopulateSelectSaveLayerDialog("DialogSaveLayerVariableUoMSymbol", dataAttributes, "Datastream/unitOfMeasurement/symbol");
					PopulateSelectSaveLayerDialog("DialogSaveLayerVariableUoMDefinition", dataAttributes, "Datastream/unitOfMeasurement/definition");
				}
				else
					document.getElementById("DialogSaveLayerVariableDescriptionUoM").style.display = "none";

				PopulateSelectSaveLayerDialog("DialogSaveLayerValue", dataAttributes, "result");
			}
		}

		function GetSelectedOptionsSaveLayer(descripUoM) {
			var selectedOptions = {};
			selectedOptions.place = document.getElementById("DialogSaveLayerPlaceSelect").value;
			selectedOptions.longitude = document.getElementById("DialogSaveLayerLongitudeSelect").value;
			selectedOptions.latitude = document.getElementById("DialogSaveLayerLatitudeSelect").value;
			selectedOptions.time = document.getElementById("DialogSaveLayerTimeSelect").value;
			selectedOptions.variable = document.getElementById("DialogSaveLayerVariableSelect").value;
			if (descripUoM) {
				selectedOptions.variableDescription = document.getElementById("DialogSaveLayerVariableDescriptionSelect").value;
				selectedOptions.variableDefinition = document.getElementById("DialogSaveLayerVariableDefinitionSelect").value;
				selectedOptions.variableUoM = document.getElementById("DialogSaveLayerVariableUoMSelect").value;
				selectedOptions.variableUoMSymbol = document.getElementById("DialogSaveLayerVariableUoMSymbolSelect").value;
				selectedOptions.variableUoMDefinition = document.getElementById("DialogSaveLayerVariableUoMDefinitionSelect").value;
			}
			selectedOptions.value = document.getElementById("DialogSaveLayerValueSelect").value;
			return selectedOptions;
		}

		function ShowSaveLayerDialog(nodeId) {
			ShowSaveLayerDialogSelects(nodeId, true);
			document.getElementById("DialogSaveLayerTitle").innerHTML = "Save table as GeoJSON";
			document.getElementById("DialogSaveLayerSave").innerHTML = "<button value=\"default\" onClick=\"SaveLayer(event)\">Save GeoJSON</button> " +
				"<button onClick=\"SaveLayerSchema(event)\">Save JSON Schema</button> " +
				"<button onClick=\"SaveLayerMetaschema(event)\">Save JSON Metaschema</button>";
		}

		function ShowOpenMapDialog(nodeId) {
			ShowSaveLayerDialogSelects(nodeId, true);
			document.getElementById("DialogSaveLayerTitle").innerHTML = "Open in the Map Browser";
			document.getElementById("DialogSaveLayerSave").innerHTML = "<button value=\"default\" onClick=\"OpenMap(event)\">Open</button>";
		}

		function SaveTable(event) {
			event.preventDefault(); // We don't want to submit this form
			var delimiter = document.getElementById("DialogSaveTableDelimiter").value;
			document.getElementById("DialogSaveTable").close();
			var nodeids = network.getConnectedNodes(currentNode.id, "from");
			if (nodeids && nodeids.length) {
				if (networkNodes.get(nodeids[0]))
					SaveLocalDataFile(Papa.unparse(StringifyObjectElements(networkNodes.get(nodeids[0]).STAdata), { quotes: false, quoteChar: '"', escapeChar: '"', delimiter: (delimiter ? delimiter : ";"), header: true, newline: "\r\n", skipEmptyLines: "greedy" }),
						(IdOfSTAEntity(networkNodes.get(nodeids[0])) == -1) ? "table" : STAEntitiesArray[IdOfSTAEntity(networkNodes.get(nodeids[0]))], ".csv", "application/vnd.ms-excel");   //https://stackoverflow.com/questions/7076042/what-mime-type-should-i-use-for-csv
			}
		}

		function SaveLayer(event) {
			event.preventDefault(); // We don't want to submit this form
			document.getElementById("DialogSaveLayer").close();
			var nodeids = network.getConnectedNodes(currentNode.id, "from");
			if (nodeids && nodeids.length) {
				if (networkNodes.get(nodeids[0]))
					SaveLocalDataFile(JSON.stringify(GetGeoJSON(networkNodes.get(nodeids[0]).STAdata, GetSelectedOptionsSaveLayer(false)), null, "\t"), "GeoJSON", ".geojson", "application/geo+json");
			}
		}

		function SaveLayerSchema(event) {
			event.preventDefault(); // We don't want to submit this form
			document.getElementById("DialogSaveLayer").close();
			var nodeids = network.getConnectedNodes(currentNode.id, "from");
			if (nodeids && nodeids.length) {
				if (networkNodes.get(nodeids[0]))
					SaveLocalDataFile(JSON.stringify(GetGeoJSONSchema(networkNodes.get(nodeids[0]).STAdata, GetSelectedOptionsSaveLayer(true)), null, "\t"), "JSON", ".json", "application/json");
			}
		}

		function SaveLayerMetaschema(event) {
			event.preventDefault(); // We don't want to submit this form
			document.getElementById("DialogSaveLayer").close();
			var nodeids = network.getConnectedNodes(currentNode.id, "from");
			if (nodeids && nodeids.length) {
				if (networkNodes.get(nodeids[0]))
					SaveLocalDataFile(JSON.stringify(GetGeoJSONMetaschema(), null, "\t"), "JSON", ".json", "application/json");
			}
		}


		function OpenMap(event) {
			event.preventDefault(); // We don't want to submit this form
			document.getElementById("DialogSaveLayer").close();
			var nodeids = network.getConnectedNodes(currentNode.id, "from");
			if (nodeids && nodeids.length) {
				if (networkNodes.get(nodeids[0])) {
					var selectedOptionsSaveLayer = GetSelectedOptionsSaveLayer(true);
					OpenMapMMN(location.href.substring(0, location.href.lastIndexOf("/")) + "/" + MMNpath + (MMNpath.indexOf('?') > 0 ? "&" : "?") + "reset=1", GetGeoJSON(networkNodes.get(nodeids[0]).STAdata, selectedOptionsSaveLayer), GetGeoJSONPropertiesSchema(networkNodes.get(nodeids[0]).STAdata, selectedOptionsSaveLayer), GetGeoJSONStyles(networkNodes.get(nodeids[0]).STAdata, selectedOptionsSaveLayer), GetGeoJSONDates(networkNodes.get(nodeids[0]).STAdata, selectedOptionsSaveLayer));
				}
			}
		}

		var MiraMonMapBrowserVars = {};

		function DisplayMapMMN() {
			MiraMonMapBrowserVars.mmn.postMessage("CommandMMNAddGeoJSONLayer('SensorThings API data', " + JSON.stringify(MiraMonMapBrowserVars.geojson) + ", " + JSON.stringify(MiraMonMapBrowserVars.geojsonSchema) + ", " + JSON.stringify(MiraMonMapBrowserVars.geojsonStyle) + ", " + JSON.stringify(MiraMonMapBrowserVars.geojsonDates) + ")", GetCleanURLMiraMonMapBrowser(MiraMonMapBrowserVars.mmnURL));
		}

		function OpenMapMMN(url, geojson, geojsonSchema, geojsonStyle, geojsonDates) {
			MiraMonMapBrowserVars.geojson = geojson;
			MiraMonMapBrowserVars.geojsonSchema = geojsonSchema;
			MiraMonMapBrowserVars.geojsonStyle = geojsonStyle;
			MiraMonMapBrowserVars.geojsonDates = geojsonDates;
			if (MiraMonMapBrowserVars.mmn)
				DisplayMapMMN();
			else {
				window.addEventListener("message", ProcessMessageFromMiraMonMapBrowser);
				MiraMonMapBrowserVars.mmnURL = url;
				MiraMonMapBrowserVars.mmn = window.open(url, "_blank", "width=1000,height=800");
			}
		}

		function ProcessMessageFromMiraMonMapBrowser(event) {
			if (!IsTrustedMiraMonMapBrowser(event, MiraMonMapBrowserVars.mmnURL))
				return;

			try {
				var data = JSON.parse(event.data);
			}
			catch (e) {
				document.getElementById("clarification").innerHTML = "JSON message parse error: " + e + " The response was:\n" + event.data;
				return;
			}

			if (data.msg === MMN_PM_IsListening) {
				document.getElementById("clarification").innerHTML = "MiraMon Map Browser is open and ready to show layers.";
				DisplayMapMMN();
				return;
			}

			if (data.msg === MMN_PM_Closed) {
				document.getElementById("clarification").innerHTML = "MiraMon Map Browser has been closed.";
				MiraMonMapBrowserVars.mmn = null;
				MiraMonMapBrowserVars.mmnURL = null;
				return;
			}
			/*if (data.msg === MMN_PM_CurrentLocationText)
			{
				MiraMonMapBrowserVars.currentLocText=data.text;
				return;
			}*/
		}

		function ShowTableSelectColumnsDialog(parentNodeId, nodeId) {
			var data = networkNodes.get(parentNodeId).STAdata,
				selectedColumns = networkNodes.get(nodeId).STASelectedColumns;

			if (!data || !data.length) {
				document.getElementById("DialogSelectColumnsHTML").innerHTML = "No data to show.";
				return;
			}
			var dataAttributes = getDataAttributes(data);

			var s = "<table>";
			for (var a = 0; a < dataAttributes.length; a++)
				s += "<tr><td><label><input type='checkbox'" + ((!selectedColumns || a >= selectedColumns.length || selectedColumns[a]) ? "checked='checked'" : "") + " id='SelectColumn_" + a + "' /> " + dataAttributes[a] + "</label></td></tr>";
			s += "</table>";
			document.getElementById("DialogSelectColumnsHTML").innerHTML = s;
		}

		function ShowTableSelectExpandsDialog(nodeId, expandCheckboxes) {
			var node = networkNodes.get(nodeId);
			if (expandCheckboxes) {
				var data = node.STAdata,
					entities = STAEntities[STAEntitiesArray[IdOfSTAEntity(node)]].entities,
					selectedExpands = node.STASelectedExpands;

				if (!data || !data.length) {
					document.getElementById("DialogSelectExpandsCheckBoxes").innerHTML = "No data to show.";
					return;
				}

				var dataAttributes = selectedExpands ? selectedExpands.dataAttributesUnexpanded : getDataAttributes(data);

				var s = "<table>";
				for (var a = 0; a < dataAttributes.length; a++) {
					if (dataAttributes[a].endsWith("@iot.navigationLink")) {
						var da = dataAttributes[a].substring(0, dataAttributes[a].length - "@iot.navigationLink".length);
						for (var e = 0; e < entities.length; e++) {
							if (entities[e] == da) {
								s += "<tr><td><label><input type='checkbox'" + ((selectedExpands && a < selectedExpands.selected.length && selectedExpands.selected[a]) ? "checked='checked'" : "") + " id='SelectExpand_" + a + "' /> " + da + "</label></td></tr>";
								break;
							}
						}
					}
				}
				s += "</table>";
				document.getElementById("DialogSelectExpandsCheckBoxes").innerHTML = s;
				document.getElementById("DialogSelectExpandsHTML").style.display = "block";
			}
			else
				document.getElementById("DialogSelectExpandsHTML").style.display = "none";
			document.getElementById("SelectExpandsNumberOfRecords").value = node.STAExpectedLength;

		}

		function ShowTableSelectRowsDialog(nodeId) {
			var data = networkNodes.get(nodeId).STAdata;

			if (!data || !data.length) {
				document.getElementById("DialogSelectColumnsHTML").innerHTML = "No data to show.";
				return;
			}

			document.getElementById("DialogSelectRowsTableRadio").checked = true;
			document.getElementById("DialogSelectRowsTable").innerHTML = GetHTMLTable(data, false, true);

			document.getElementById("DialogSelectRowsFilterRadio").checked = false;
			document.getElementById("DialogSelectRowsFilter").innerHTML = "";
		}

		function ShowTableFilterRowsDialog(nodeId) {
			var data = networkNodes.get(nodeId).STAdata;
			var dataAttributes = getDataAttributes(data);

			if (!data || !data.length) {
				document.getElementById("DialogSelectRowsTable").innerHTML = "No data to show.";
				return;
			}

			document.getElementById("DialogSelectRowsTableRadio").checked = false;
			document.getElementById("DialogSelectRowsTable").innerHTML = "";

			document.getElementById("DialogSelectRowsFilterRadio").checked = true;
			document.getElementById("DialogSelectRowsFilter").innerHTML = GetSelectorsForRowFilter(nodeId); //funció al marcar el radiobutton del Filter

			// createSelectorRowFilterInterval(dataAttributes, nodeId);
			// createSelectorRowFilterParticular(dataAttributes, nodeId);
			createSelectorRowFilters(dataAttributes, nodeId, "Particular", 1);
			createSelectorRowFilters(dataAttributes, nodeId, "Interval", 1);
		}

		function ChangeTableFilterRowsDialog(nodeId) {
			if (document.getElementById("DialogSelectRowsTableRadio").checked)
				ShowTableSelectRowsDialog(nodeId);
			else
				ShowTableFilterRowsDialog(nodeId);
		}

		function SeparatePropertyIfNeeded(record, property, baseName) {
			if (typeof property === "object" && property !== null)  //"arrays" and 'null' are also objects.
			{
				if (Array.isArray(property)) {
					//Array: creating multifields
					for (var j = 0; j < property.length; j++) {
						if (typeof property[j] === "object") {
							if (Array.isArray(property[j])) {
								for (var jj = 0; jj < property[j].length; jj++)
									SeparatePropertyIfNeeded(record, property[j][jj], baseName + "_" + j + "_" + jj);
							}
							else {
								var subkeys = Object.keys(property[j]);
								for (var kk = 0; kk < subkeys.length; kk++)
									SeparatePropertyIfNeeded(record, property[j][subkeys[kk]], baseName + "/" + subkeys[kk] + "_" + j)
							}
						}
						else
							record[baseName + "_" + j] = property[j];
					}
				}
				else {
					//Object; lets separate it.
					var subkeys = Object.keys(property);
					for (var kk = 0; kk < subkeys.length; kk++)
						SeparatePropertyIfNeeded(record, property[subkeys[kk]], baseName + "/" + subkeys[kk])
				}
			}
			else
				record[baseName] = property;
		}

		function SeparateColumns(node, parentNode) {
			var data = parentNode.STAdata, record, recordParent;
			node.STAURL = parentNode.STAURL;
			node.STAExpectedLength = parentNode.STAExpectedLength;
			node.STAdata = [];
			for (var i = 0; i < data.length; i++) {
				record = node.STAdata[i] = {};
				recordParent = data[i]
				var keys = Object.keys(recordParent);
				for (var k = 0; k < keys.length; k++)
					SeparatePropertyIfNeeded(record, recordParent[keys[k]], keys[k]);
			}
			networkNodes.update(node);
		}

		function StartCircularImage(nodeTo, nodeFrom, calUnir) {
			if (nodeFrom.STAURL && IdOfSTAEntity(nodeTo) != -1) {
				nodeTo.STAURL = nodeFrom.STAURL + "/" + STAEntitiesArray[IdOfSTAEntity(nodeTo)];
				nodeTo.STAExpectedLength = nodeFrom.STAExpectedLength;

				networkNodes.update(nodeTo);
				if (calUnir)
					networkEdges.add([{ from: nodeFrom.id, to: nodeTo.id }]);
				LoadJSONData(nodeTo);
				return true;
			}
			if (nodeFrom.STAURL && IdOfSTASpecialQueries(nodeTo) != -1) {
				nodeTo.STAURL = nodeFrom.STAURL + "/" + STASpecialQueries[STASpecialQueriesArray[IdOfSTASpecialQueries(nodeTo)]].query;
				nodeTo.STAExpectedLength = nodeFrom.STAExpectedLength;
				networkNodes.update(nodeTo);
				if (calUnir)
					networkEdges.add([{ from: nodeFrom.id, to: nodeTo.id }]);
				LoadJSONData(nodeTo);
				return true;
			}
			if (nodeFrom.STAURL && (nodeTo.image == "SelectColumns.png" || nodeTo.image == "SelectRows.png")) {
				nodeTo.STAURL = nodeFrom.STAURL;
				nodeTo.STAExpectedLength = nodeFrom.STAExpectedLength;
				networkNodes.update(nodeTo);
				if (calUnir)
					networkEdges.add([{ from: nodeFrom.id, to: nodeTo.id }]);
				LoadJSONData(nodeTo);
				return true;
			}
			if (nodeFrom.STAURL && (nodeTo.image == "SeparateColumns.png")) {
				if (calUnir)
					networkEdges.add([{ from: nodeFrom.id, to: nodeTo.id }]);
				SeparateColumns(nodeTo, nodeFrom);
				return true;
			}
			return false;
		}

		// create an array with nodes
		var networkNodes = new vis.DataSet([]);

		// create an array with edges
		var networkEdges = new vis.DataSet([]);

		var network = new vis.Network(document.getElementById("mynetwork"), {
			nodes: networkNodes,
			edges: networkEdges
		},
			{
				interaction: { hover: true },
				manipulation: {  //https://stackoverflow.com/questions/39701703/add-edge-dynamically-visjs
					enabled: false,
					addEdge: function (data, callback) {
						console.log('add edge', data);
						if (data.from == data.to)
							alert("Connection to the same node is not allowed");
						else {
							networkEdges.add([{ from: data.from, to: data.to }]);
							StartCircularImage(networkNodes.get(data.to), networkNodes.get(data.from), false);
						}
						connectionInProcess = false;
						document.getElementById("clarification").innerHTML = "";
					}
				}
			});

		/*network.on("click", function (params) {
			params.event = "[original event]";
			document.getElementById("eventSpanHeading").innerText = "Click event:";
			document.getElementById("eventSpanContent").innerText = JSON.stringify(params, null, 4);
			console.log("click event, getNodeAt returns: " + this.getNodeAt(params.pointer.DOM));
		});*/
		network.on("doubleClick", function (params) {
			/*params.event = "[original event]";
			document.getElementById("eventSpanHeading").innerText = "doubleClick event:";
			document.getElementById("eventSpanContent").innerText = JSON.stringify(params, null, 4);*/
			if (params.nodes && params.nodes.length && !connectionInProcess) {
				currentNode = networkNodes.get(params.nodes[0])
				if (currentNode.image == "ogc.png") {
					document.getElementById("DialogSTAURLInput").value = currentNode.STAURL;
					document.getElementById("DialogSTAURLInput").readOnly = false;
					document.getElementById("DialogSTAURL").showModal();
				}
				else if (currentNode.image == "ViewQuery.png") {
					document.getElementById("DialogSTAURLInput").value = "";
					var nodeids = network.getConnectedNodes(currentNode.id, "from");
					if (nodeids && nodeids.length) {
						if (networkNodes.get(nodeids[0]))
							document.getElementById("DialogSTAURLInput").value = networkNodes.get(nodeids[0]).STAURL;
					}
					document.getElementById("DialogSTAURLInput").readOnly = true;
					document.getElementById("DialogSTAURL").showModal();
				}
				else if (currentNode.image == "Table.png") {
					///Determining the parent node.
					var nodeids = network.getConnectedNodes(currentNode.id, "from");
					if (nodeids && nodeids.length) {
						if (networkNodes.get(nodeids[0])) {
							var data = networkNodes.get(nodeids[0]).STAdata;
							if (data && data.length)
								document.getElementById("DialogOKOptions").innerHTML = "<label><input type='checkbox' checked='checked' id='ShowTableRowNumberDialogOK' onChange='ShowTableDialog(\"" + nodeids[0] + "\");'/> Show row numbers</label>";
							else
								document.getElementById("DialogOKOptions").innerHTML = "";
							ShowTableDialog(nodeids[0]);
						}
						document.getElementById("DialogOK").showModal();
					}
				}
				else if (currentNode.image == "SaveTable.png") {
					ShowSaveTableDialog(currentNode.id);
					document.getElementById("DialogSaveTable").showModal();
				}
				else if (currentNode.image == "SaveLayer.png") {
					ShowSaveLayerDialog(currentNode.id);
					document.getElementById("DialogSaveLayer").showModal();
				}
				else if (currentNode.image == "OpenMap.png") {
					ShowOpenMapDialog(currentNode.id);
					document.getElementById("DialogSaveLayer").showModal();
				}
				else if (currentNode.image == "SelectColumns.png") {
					//Determining the parent node.
					var nodeids = network.getConnectedNodes(currentNode.id, "from");
					if (nodeids && nodeids.length) {
						if (networkNodes.get(nodeids[0]) && networkNodes.get(nodeids[0]).STAURL)
							ShowTableSelectColumnsDialog(nodeids[0], currentNode.id);

						document.getElementById("DialogSelectColumns").showModal();
					}
				}
				else if (currentNode.image == "SelectRows.png") {
					//Determining the parent node.
					var nodeids = network.getConnectedNodes(currentNode.id, "from");
					if (nodeids && nodeids.length) {
						if (networkNodes.get(nodeids[0]) && networkNodes.get(nodeids[0]).STAURL) {
							document.getElementById("DialogSelectRowsTableInputSpan").innerHTML = "<label><input type='radio' name='DialogSelectRowsRadio' id='DialogSelectRowsTableRadio' checked='checked' onClick='ChangeTableFilterRowsDialog(\"" + nodeids[0] + "\")'/> Select an element:</label>";
							document.getElementById("DialogSelectRowsFilterInputSpan").innerHTML = "<label><input type='radio' name='DialogSelectRowsRadio' id='DialogSelectRowsFilterRadio' onClick='ChangeTableFilterRowsDialog(\"" + nodeids[0] + "\")'/>  Filter:</label>";
							ShowTableSelectRowsDialog(nodeids[0]);
						}
						document.getElementById("DialogSelectRows").showModal();
					}
				}
				else if (IdOfSTAEntity(currentNode) != -1) {
					//Offering expand
					ShowTableSelectExpandsDialog(currentNode.id, true);
					document.getElementById("DialogSelectExpands").showModal();
				}
				else if (IdOfSTASpecialQueries(currentNode) != -1) {
					ShowTableSelectExpandsDialog(currentNode.id, false);
					document.getElementById("DialogSelectExpands").showModal();
				}
			}
		});
		network.on("oncontext", function (params) {
			params.event.preventDefault();  //https://stackoverflow.com/questions/38258940/open-an-extension-popup-html-list-on-right-click-of-node-contextmenu-in-visj

			var nodeId = network.getNodeAt(params.pointer.DOM); //params.nodes is not useful here as params.nodes are the selected ones and not the ones rightclicked.
			if (nodeId) {
				startingNodeContextId = nodeId;
				document.getElementById("DialogContextMenu").showModal();
			}
			/*params.event = "[original event]";
			document.getElementById("eventSpanHeading").innerText = "oncontext (right click) event:";
			document.getElementById("eventSpanContent").innerText = JSON.stringify(params, null, 4);*/
		});
		/*network.on("dragStart", function (params) {
			// There's no point in displaying this event on screen, it gets immediately overwritten
			params.event = "[original event]";
			console.log("dragStart Event:", params);
			console.log("dragStart event, getNodeAt returns: " + this.getNodeAt(params.pointer.DOM));
		});
		network.on("dragging", function (params) {
			params.event = "[original event]";
			document.getElementById("eventSpanHeading").innerText = "dragging event:";
			document.getElementById("eventSpanContent").innerText = JSON.stringify(params, null, 4);
		});
		network.on("dragEnd", function (params) {
			params.event = "[original event]";
			document.getElementById("eventSpanHeading").innerText = "dragEnd event:";
			document.getElementById("eventSpanContent").innerText = JSON.stringify(params, null, 4);
			console.log("dragEnd Event:", params);
			console.log("dragEnd event, getNodeAt returns: " + this.getNodeAt(params.pointer.DOM));
		});
		network.on("controlNodeDragging", function (params) {
			params.event = "[original event]";
			document.getElementById("eventSpanHeading").innerText = "control node dragging event:";
			document.getElementById("eventSpanContent").innerText = JSON.stringify(params, null, 4);
		});
		network.on("controlNodeDragEnd", function (params) {
			params.event = "[original event]";
			document.getElementById("eventSpanHeading").innerText = "control node drag end event:";
			document.getElementById("eventSpanContent").innerText = JSON.stringify(params, null, 4);
			console.log("controlNodeDragEnd Event:", params);
		});
		network.on("zoom", function (params) {
			document.getElementById("eventSpanHeading").innerText = "zoom event:";
			document.getElementById("eventSpanContent").innerText = JSON.stringify(params, null, 4);
		});
		network.on("showPopup", function (params) {
			document.getElementById("eventSpanHeading").innerText = "showPopup event: ";
			document.getElementById("eventSpanContent").innerText = JSON.stringify(params, null, 4);
		});
		network.on("hidePopup", function () {
			console.log("hidePopup Event");
		});
		network.on("select", function (params) {
			console.log("select Event:", params);
		});
		network.on("selectNode", function (params) {
			console.log("selectNode Event:", params);
		});
		network.on("selectEdge", function (params) {
			console.log("selectEdge Event:", params);
		});
		network.on("deselectNode", function (params) {
			console.log("deselectNode Event:", params);
		});
		network.on("deselectEdge", function (params) {
			console.log("deselectEdge Event:", params);
		});
		network.on("hoverNode", function (params) {
			console.log("hoverNode Event:", params);
		});
		network.on("hoverEdge", function (params) {
			console.log("hoverEdge Event:", params);
		});
		network.on("blurNode", function (params) {
			console.log("blurNode Event:", params);
		});
		network.on("blurEdge", function (params) {
			console.log("blurEdge Event:", params);
		});*/


		function addCircularImage(event, dialog, label, image) {
			if (event)
				event.preventDefault(); // We don't want to submit this form
			if (dialog)
				document.getElementById(dialog).close();
			var newId = (Math.random() * 1e7).toString(32);
			var node = { id: newId, label: label, image: image, shape: "circularImage" };

			if (image == "ogc.png") {
				node.STAURL = STAurl;
				node.STAExpectedLength = 100;
				networkNodes.add(node);
				LoadJSONData(node);
			}
			else if (!startingNodeContextId || !StartCircularImage(node, networkNodes.get(startingNodeContextId), true)) {
				networkNodes.add(node);
				networkEdges.add([{ from: startingNodeContextId, to: newId }]);
			}

			if (startingNodeContextId)
				startingNodeContextId = null;

			network.selectNodes([newId]);
		}

		function removeCircularImage(event, dialog) {
			if (event)
				event.preventDefault(); // We don't want to submit this form
			if (dialog)
				document.getElementById(dialog).close();
			if (startingNodeContextId) {
				networkNodes.remove(startingNodeContextId);
				startingNodeContextId = null;
			}
		}

		function addEdge() {
			network.addEdgeMode();
			connectionInProcess = true;
			document.getElementById("clarification").innerHTML = "Press the mouse botton on the starting node, and drag and drop the mouse on the end node.";
		}
		function giveMeNodeInformation(event) {
			console.log(event);
			if (event)
				event.preventDefault(); // We don't want to submit this form
			document.getElementById("DialogSelectColumns").close();

			if (startingNodeContextId) {
				console.log(startingNodeContextId);
				console.log(currentNode);

			}
		}

		function giveMeNetworkInformation(event) {
			if (event)
				event.preventDefault(); // We don't want to submit this form
			document.getElementById("DialogSelectColumns").close();
			console.log(networkNodes);
		}

	</script>

</body>

</html>