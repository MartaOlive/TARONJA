<!-- https://citiobs.demo.secure-dimensions.de/staplus/v1.1/Observations?$select=result&$orderby=phenomenonTime%20desc&$filter=phenomenonTime%20ge%202023-09-04T00:00:00.000Z%20and%20phenomenonTime%20le%202023-09-04T00:59:59.999Z%20and%20Datastream/Party/displayName%20eq%20%27Joan%20Mas%C3%B3%27&$count=true -->
<!-- https://citiobs.demo.secure-dimensions.de/staplus/v1.1/Datastreams(17)/Observations?$orderby=phenomenonTime%20desc&$filter=phenomenonTime%20ge%202023-09-04T00:00:00.000Z%20and%20phenomenonTime%20le%202023-09-04T23:59:59.999Z
(recorda que un %20 Ã©s un espai). -->


<!DOCTYPE html>
<html lang="en">

<head>
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
	<title>TAPIS: Tables from APIs for Sensors (Sensor Things API plus Explorer)</title>
	<link rel="icon" type="image/x-icon" href="favicon.ico">
	<script type="text/javascript" src="vis.min.js"></script>
	<script type="text/javascript" src="papaparse.min.js"></script>
	<script type="text/javascript" src="mmn_postmessage.js"></script>

	<style type="text/css">
		#mynetwork {
			width: 100%;
			height: 400px;
			border: 1px solid lightgray;
		}

		body {
			font-family: Arial
		}

		.tablesmall {
			font-size: 0.5em;
			border-collapse: collapse;
			border-spacing: 0px;
		}

		.tablesmall th {
			padding-top: 1px;
			padding-bottom: 1px;
		}

		.tablesmall td {
			padding-top: 1px;
			padding-bottom: 1px;
		}

		.tablesmall tr:nth-child(even) {
			background-color: #DCDCCA;
		}

		.tablesmall tr:nth-child(odd) {
			background-color: #EEEEEB;
		}

		.center {
			margin: 0 auto;
			text-align: center;
		}

		#divSelectorRowsFilter {
			min-width: 1750px;
			height: 300px;
			border: black 1px solid;

		}

		#selectorRowsContainer {
			min-width: 1500px;
			min-height: 400px;
		}

		.hidden {
			display: none;
		}

		.instructions {
			font-size: 12px;
			font-style: italic;
		}


		.objectInSelect {
			background-color: rgba(255, 153, 0, 0.87);
		}

		#imageIsAnObject {
			display: block;
			/* height:400; */
			position: absolute;
			/* left:20; */
		}

		.borderTable {
			border: black 1px solid;
		}

		th.borderTable {
			min-width: 100px;
			padding-left: 10px;
			padding-right: 10px;
		}

		#divSelectorRowsFilter {
			margin-top: 20px;
			min-height: 300px;
			min-width: 800px;
			border: black 1px solid;
		}

		.divResultBox {
			margin-top: 20px;
			height: 300px;
			border: black 1px solid;
		}



		.inblock {
			display: inline-block;
		}
	</style>
	<link rel="stylesheet" href="vis.min.css">


</head>

<body onLoad="StartSTAPage();">
	<table border="0">
		<tr>
			<td><img src="logo.png" height="70"></td>
			<td>
				<div style="font-size: 30px; font-weight: bold;">TAPIS</div>
				<div style="font-size: 20px; font-weight: bold;">Tables from OGC APIs for Sensors</div>
				<div style="font-size: 10px; font-weight: normal;"> or a Sensor Things API plus Explorer</div>
			</td>
		</tr>
	</table>

	<button onclick='addCircularImage(null, null, "STAplus", "ogc.png");'><img src="ogc.png" height="20"
			valign="middle"> Add a STA service</button><br>
	<span id="ButtonsSTAEntities"></span>
	<button onclick="addEdge();">Connect two nodes</button><br>

	<div id="clarification"></div>

	<div id="mynetwork"></div>

	<dialog id="DialogSTAURL">
		<form>
			<p>
				<label>STA service URL:
					<input type="text" id="DialogSTAURLInput" size="100"></input>
				</label>
			</p>
			<div class="center">
				<button value="default" onClick="GetSTAURL(event)">OK</button>
				<button value="cancel" formmethod="dialog">Cancel</button>
			</div>
		</form>
	</dialog>

	<dialog id="DialogSelectColumns">
		<form>
			Select columns:
			<span id="DialogSelectColumnsHTML">
			</span>
			<div class="center">
				<button value="default" onClick="GetSelectColumns(event)">OK</button>
				<button value="cancel" formmethod="dialog">Cancel</button>
			</div>
		</form>
	</dialog>

	<dialog id="DialogSelectExpands">
		<form>
			<fieldset id="DialogSelectExpandsHTML">
				<legend>Select what do you want to expand:</legend>
				<span id="DialogSelectExpandsCheckBoxes">
				</span>
			</fieldset>
			<label>Number records to request:
				<input type="text" id="SelectExpandsNumberOfRecords" size="6" maxlength="6" value="100"></input>
			</label>
			<div class="center">
				<button value="default" onClick="GetSelectExpands(event)">OK</button>
				<button value="cancel" formmethod="dialog">Cancel</button>
			</div>
		</form>
	</dialog>

	<dialog id="DialogSelectRows">
		<form>
			<span id="DialogSelectRowsTableInputSpan">
			</span>
			<span id="DialogSelectRowsTable">
			</span>
			<br>
			<span id="DialogSelectRowsFilterInputSpan">
			</span>
			<span id="DialogSelectRowsFilter">
			</span>
			<div class="center">
				<button value="default" onClick="GetSelectRows(event)">OK</button>
				<button value="cancel" formmethod="dialog">Cancel</button>
			</div>
		</form>
	</dialog>

	<dialog id="DialogContextMenu">
		<form>
			<p>
				<button onclick='addCircularImage(event, "DialogContextMenu", "STAplus", "ogc.png");'><img src="ogc.png"
						height="20" valign="middle"> Add a STA service</button><br>
				<span id="ButtonsContextMenuObjects"></span>
				<button onclick='removeCircularImage(event, "DialogContextMenu")'>Remove</button><br>
				<button onclick='giveMeNodeInformation(event, "DialogContextMenu")'>Node Info</button><br>
				<button onclick='giveMeNetworkInformation(event, "DialogContextMenu")'>Network Info</button><br>
			</p>
			<div class="center">
				<button value="cancel" onClick="startingNodeContextId=null;" formmethod="dialog">Cancel</button>
			</div>
		</form>
	</dialog>


	<dialog id="DialogOK">
		<form>
			<span id="DialogOKOptions"></span><br>
			<span id="DialogOKHTML">
			</span>
			<div class="center">
				<button value="cancel" formmethod="dialog">Close</button>
			</div>
		</form>
	</dialog>

	<dialog id="DialogSaveTable">
		<form>
			Save the table as CSV.
			<br>
			<label>CSV delimiter:
				<input type="text" id="DialogSaveTableDelimiter" size="2" maxlength="1" value=";"></input>
			</label>
			<!--span id="DialogSaveTableOptions"></span--><br>
			</span>
			<div class="center">
				<button value="default" onClick="SaveTable(event)">Save CSV</button>
				<button value="csvw" onClick="SaveCSVW(event)">Save CSVW</button>
				<button value="cancel" formmethod="dialog">Cancel</button>
			</div>
		</form>
	</dialog>

	<dialog id="DialogSaveLayer">
		<form>
			<span id="DialogSaveLayerTitle"></span>
			<fieldset>
				<legend>Position:</legend>
				<label>Place description:
					<span id="DialogSaveLayerPlace"></span>
				</label>
				<br>
				<label>Longitude:
					<span id="DialogSaveLayerLongitude"></span>
				</label>
				<br>
				<label>Latitude:
					<span id="DialogSaveLayerLatitude"></span>
				</label>
			</fieldset>
			<br>
			<label>Date and time:
				<span id="DialogSaveLayerTime"></span>
			</label>
			<fieldset>
				<legend>Observed properties:</legend>
				<label>Name:
					<span id="DialogSaveLayerVariable"></span>
				</label>
				<br>
				<span id="DialogSaveLayerVariableDescriptionUoM">
					<label>Description:
						<span id="DialogSaveLayerVariableDescription"></span>
					</label>
					<br>
					<label>Definition:
						<span id="DialogSaveLayerVariableDefinition"></span>
					</label>
					<br>
					<fieldset>
						<legend>Units of measurement:</legend>
						<label>Name:
							<span id="DialogSaveLayerVariableUoM"></span>
						</label>
						<br>
						<label>Symbol:
							<span id="DialogSaveLayerVariableUoMSymbol"></span>
						</label>
						<br>
						<label>Definition:
							<span id="DialogSaveLayerVariableUoMDefinition"></span>
						</label>
					</fieldset>
					<br>
				</span>
				<label>Value:
					<span id="DialogSaveLayerValue"></span>
				</label>
			</fieldset>
			<br>
			<div class="center">
				<span id="DialogSaveLayerSave"></span>
				<button value="cancel" formmethod="dialog">Cancel</button>
			</div>
		</form>
	</dialog>

	<!--h2 id="eventSpanHeading"></h2>
	<pre id="eventSpanContent"></pre-->

	<script type="text/javascript">
		"use strict"


		//var STAurl = "https://citiobs.demo.secure-dimensions.de/inaturalist/v1.1";
		var STAurl = "https://citiobs.demo.secure-dimensions.de/staplus/v1.1";
		var MMNpath = "../osm";

		const STAEntities = {
			ObservedProperties: { singular: "ObservedProperty", entities: ["Datastreams", "MultiDatastreams"], properties: ["name", "definition", "description", "properties"] },
			Observations: { singular: "Observation", entities: ["Datastream", "MultiDatastream", "FeatureOfInterest", "ObservationGroups", "Subjects", "Objects"], properties: ["phenomenonTime", "resultTime", "result", "resultQuality", "validTime", "parameters"] },
			FeaturesOfInterest: { singular: "FeatureOfInterest", entities: ["Observations"], properties: ["name", "description", "encodingType", "feature", "properties"] },
			Sensors: { singular: "Sensor", entities: ["Datastreams", "MultiDatastreams"], properties: ["name", "description", "encodingType", "metadata", "properties"] },
			Things: { singular: "Thing", entities: ["Datastreams", "MultiDatastreams", "Party", "Locations", "HistoricalLocations"], properties: ["name", "description", "properties"] },
			Locations: { singular: "Location", entities: ["Things", "HistoricalLocations"], properties: ["name", "description", "encodingType", "location", "properties"] },
			HistoricalLocations: { singular: "HistoricalLocation", entities: ["Things", "Location"], properties: ["time"] },
			Datastreams: { singular: "Datastream", entities: ["Party", "Sensor", "ObservedProperty", "Campaigns", "License", "Observations", "Thing"], properties: ["name", "description", "unitOfMeasurement", "observationType", "observedArea", "phenomenonTime", "resultTime", "properties"] },
			MultiDatastreams: { singular: "MultiDatastream", entities: ["Party", "Sensor", "ObservedProperties", "Campaigns", "License", "Observations", "Thing"], properties: ["name", "description", "unitOfMeasurements", "observationType", "observedArea", "phenomenonTime", "resultTime", "multiObservationDataTypes", "properties"] },
			Parties: { singular: "Party", entities: ["Datastreams", "MultiDatastreams", "Campaigns", "ObservationGroups", "Things"], properties: ["description", "authId", "role", "displayName"] },
			Campaigns: { singular: "Campaign", entities: ["Datastreams", "MultiDatastreams", "Party", "License"], properties: ["name", "description", "classification", "termsOfUse", "privacyPolicy", "creationTime", "startTime", "endTime", "url", "properties"] },
			Licenses: { singular: "License", entities: ["Datastreams", "MultiDatastreams", "Campaigns", "ObservationGroups"], properties: ["name", "description", "definition", "logo", "attributionText"] },
			ObservationGroups: { singular: "ObservationGroup", entities: ["Party", "Campaigns", "License", "Observations", "Relations"], properties: ["name", "description", "purpose", "creationTime", "endTime", "termsOfUsed", "privacyPolicy", "properties", "dataQuality"] },
			Relations: { singular: "Relation", entities: ["Object", "Subject", "ObservationGroups"], properties: ["role", "description", "externalObject", "properties"] }
		};
		const STAEntitiesArray = Object.keys(STAEntities);
		const STASpecialQueries = { ObsLayer: { description: "Observations Layer", query: "Observations?$orderby=phenomenonTime%20desc&$expand=Datastream($select=unitOfMeasurement),Datastream/ObservedProperty($select=name,description,definition),FeatureOfInterest($select=description,feature)&$select=phenomenonTime,result" } }
		const STASpecialQueriesArray = Object.keys(STASpecialQueries);
		const TableOperations = {
			Table: { description: "View Table" },
			SelectColumns: { description: "Select Columns" },
			SelectRows: { description: "Select Rows" },
			SeparateColumns: { description: "Separate Columns" },
			ViewQuery: { description: "View Query" },
			SaveTable: { description: "Save Table" },
			SaveLayer: { description: "Save Layer" },
			OpenMap: { description: "Open Map" }
		};
		const TableOperationsArray = Object.keys(TableOperations);


		window.onbeforeunload = function () { return "Your work will be lost."; }

		function AddKVPToURL(url, kvp) {
			if (url.indexOf('?') == -1)
				return url + "?" + kvp;
			return url + "&" + kvp;
		}

		var currentNode = null, connectionInProcess = false, startingNodeContextId = null;

		function StartSTAPage() {
			var s = "";

			for (var i = 0; i < STAEntitiesArray.length; i++)
				s += "<button onclick='addCircularImage(null, null, \"" + STAEntitiesArray[i] + "\", \"" + STAEntitiesArray[i] + ".png\");'><img src='" + STAEntitiesArray[i] + ".png' height='20' valign='middle'> " + STAEntitiesArray[i] + "</button> ";
			s += "<br>";

			for (var i = 0; i < STASpecialQueriesArray.length; i++)
				s += "<button onclick='addCircularImage(null, null, \"" + STASpecialQueriesArray[i] + "\", \"" + STASpecialQueriesArray[i] + ".png\");'><img src='" + STASpecialQueriesArray[i] + ".png' height='20' valign='middle'> " + STASpecialQueries[STASpecialQueriesArray[i]].description + "</button> ";
			s += "<br>";

			for (var i = 0; i < TableOperationsArray.length; i++)
				s += "<button onclick='addCircularImage(null, null, \"" + TableOperationsArray[i] + "\", \"" + TableOperationsArray[i] + ".png\");'><img src='" + TableOperationsArray[i] + ".png' height='20' valign='middle'> " + TableOperations[TableOperationsArray[i]].description + "</button> ";
			s += "<br>";

			document.getElementById("ButtonsSTAEntities").innerHTML = s;

			s = "";
			for (var i = 0; i < STAEntitiesArray.length; i++)
				s += "<button onclick='addCircularImage(event, \"DialogContextMenu\", \"" + STAEntitiesArray[i] + "\", \"" + STAEntitiesArray[i] + ".png\");'><img src='" + STAEntitiesArray[i] + ".png' height='20' valign='middle'> " + STAEntitiesArray[i] + "</button><br>";
			s += "<br>";
			for (var i = 0; i < STASpecialQueriesArray.length; i++)
				s += "<button onclick='addCircularImage(event, \"DialogContextMenu\", \"" + STASpecialQueriesArray[i] + "\", \"" + STASpecialQueriesArray[i] + ".png\");'><img src='" + STASpecialQueriesArray[i] + ".png' height='20' valign='middle'> " + STASpecialQueries[STASpecialQueriesArray[i]].description + "</button><br>";
			s += "<br>";
			for (var i = 0; i < TableOperationsArray.length; i++)
				s += "<button onclick='addCircularImage(event, \"DialogContextMenu\", \"" + TableOperationsArray[i] + "\", \"" + TableOperationsArray[i] + ".png\");'><img src='" + TableOperationsArray[i] + ".png' height='20' valign='middle'> " + TableOperations[TableOperationsArray[i]].description + "</button><br>";

			document.getElementById("ButtonsContextMenuObjects").innerHTML = s;
		}

		//https://web.dev/fetch-api-error-handling/
		async function LoadJSONData(node, callback, url) {
			var response, jsonData;
			try {
				var url_fetch;
				if (url)
					url_fetch = url;
				else if (typeof node.STAExpectedLength === "undefined")
					url_fetch = AddKVPToURL(node.STAURL);
				else
					url_fetch = AddKVPToURL(node.STAURL, "$top=" + node.STAExpectedLength);

				response = await fetch(url_fetch);
			}
			catch (error) {
				document.getElementById("clarification").innerHTML = 'Error getting ' + node.STAURL + ": " + error.message;
				console.log('There was an error', error);
				node.STAdata = null;
				networkNodes.update(node);
				return;
			}
			// Uses the 'optional chaining' operator
			if (!(response?.ok)) {
				document.getElementById("clarification").innerHTML = "HTTP Response Code: " + response?.status + " reading <small>" + node.STAURL + "</small>: " + response?.statusText;
				console.log("HTTP Response Code: " + response?.status + ": " + response?.statusText);
				node.STAdata = null;
				networkNodes.update(node);
				return;
			}
			try {
				jsonData = await response.json();
			} catch (error) {
				if (error instanceof SyntaxError) {
					document.getElementById("clarification").innerHTML = 'Syntax error reading ' + node.STAURL + ": " + error.message;
					console.log('There was a SyntaxError', error);
					node.STAdata = null;
					networkNodes.update(node);
					return;
				}
				else {
					document.getElementById("clarification").innerHTML = 'Error interpreting ' + node.STAURL + ": " + error.message;
					console.log('There was an error', error);
					node.STAdata = null;
					networkNodes.update(node);
					return;
				}
			}
			if (url && typeof node.STAExpectedLength)  //node.STAExpectedLength
			{
				node.STAdata = node.STAdata.concat(jsonData.value);
				if (node.STAdata.length > node.STAExpectedLength)  //too much data. Trucating
					node.STAdata.length = node.STAExpectedLength;
			}
			else
				node.STAdata = (typeof jsonData.value !== "undefined") ? jsonData.value : [jsonData];
			networkNodes.update(node);
			if (jsonData.value && node.STAExpectedLength && node.STAdata.length < node.STAExpectedLength && jsonData["@iot.nextLink"])
				LoadJSONData(node, callback, jsonData["@iot.nextLink"]);
			else {
				UpdateChildenLoadJSONCallback(node);
				if (callback)
					callback(node);  //The callback function is never used yet.
			}
		}

		var savedFile = null;

		function MakeHrefData(data, mediatype) {
			var blobData = new Blob([data], { type: mediatype });

			// If we are replacing a previously generated file we need to
			// manually revoke the object URL to avoid memory leaks.
			if (savedFile !== null)
				window.URL.revokeObjectURL(savedFile);

			savedFile = window.URL.createObjectURL(blobData);
			return savedFile;
		}

		function SaveLocalDataFile(data, fileName, extension, mediatype)   //Saves a memory data structure to a local file
		{
			const link = document.createElement('a');
			if (fileName.substring(fileName.length - extension.length) != extension)
				fileName += extension;
			link.setAttribute('download', fileName);
			link.setAttribute('href', MakeHrefData(data));
			document.body.appendChild(link);

			// wait for the link to be added to the document
			window.requestAnimationFrame(function () {
				var event = new MouseEvent('click');
				link.dispatchEvent(event);
				document.body.removeChild(link);
			});

			return false;
		}

		function GetSTAURL(event) {
			event.preventDefault(); // We don't want to submit this form
			document.getElementById("DialogSTAURL").close(document.getElementById("DialogSTAURLInput").value);

			if (currentNode.STAURL == document.getElementById("DialogSTAURLInput").value)
				return;
			var previousSTAURL = currentNode.STAURL;
			currentNode.STAURL = document.getElementById("DialogSTAURLInput").value; // Have to send the select box value here.
			if (currentNode.STAURL.charAt(currentNode.STAURL.length - 1) == '/')
				currentNode.STAURL = currentNode.STAURL.slice(0, -1);  //remove last character
			networkNodes.update(currentNode);	//https://visjs.github.io/vis-data/data/dataset.html#Data_Manipulation
			LoadJSONData(currentNode);

			//if childen nodes have also STAURL
			UpdateChildenSTAURL(currentNode, currentNode.STAURL, previousSTAURL);
		}

		function GetSelectColumns(event) {
			event.preventDefault(); // We don't want to submit this form
			document.getElementById("DialogSelectColumns").close();

			var nodeids = network.getConnectedNodes(currentNode.id, "from");
			if (nodeids && nodeids.length && networkNodes.get(nodeids[0])) {
				var node = networkNodes.get(nodeids[0]);
				if (node.STAURL)
					currentNode.STAURL = node.STAURL;
				if (node.STAdata)
					currentNode.STAdata = node.STAdata;
			}
			currentNode.STASelectedColumns = [];
			var dataAttributes = getDataAttributes(currentNode.STAdata);
			for (var a = 0; a < dataAttributes.length; a++) {
				if (!document.getElementById("SelectColumn_" + a).checked)
					break;
			}
			if (a < dataAttributes.length) //A checked attribute has been found ("for" breaks before ending).
			{
				var s;
				currentNode.STAURL = AddKVPToURL(currentNode.STAURL, "$select=");
				for (var a = 0; a < dataAttributes.length; a++) {
					if (document.getElementById("SelectColumn_" + a).checked) {
						if (dataAttributes[a].name.startsWith("@iot."))
							s = dataAttributes[a].name.substring(5);
						else
							s = dataAttributes[a].name.replace("@iot.", "/");  //Changes Datastreams@iot.navigationLink to Datastreams/navigationLink
						currentNode.STAURL += s + ",";
						currentNode.STASelectedColumns[a] = true;
					}
					else
						currentNode.STASelectedColumns[a] = false;
				}
				currentNode.STAURL = currentNode.STAURL.slice(0, -1); //remove the last coma.
				currentNode.STAExpectedLength = node.STAExpectedLength;
				networkNodes.update(currentNode);
				LoadJSONData(currentNode);
				UpdateChildenSTAURL(currentNode);
			}
			else   //If no selected collumn has been found, no filter is done and all collumns are selected
			{
				for (var a = 0; a < dataAttributes.length; a++) {
					currentNode.STASelectedColumns[a] = true;
				}
			}
		}

		function GetSelectExpands(event) {
			event.preventDefault(); // We don't want to submit this form
			document.getElementById("DialogSelectExpands").close();

			var dataAttributes = getDataAttributes(currentNode.STAdata);
			if (!currentNode.STASelectedExpands)
				currentNode.STASelectedExpands = { STAURLUnexpanded: currentNode.STAURL, dataAttributesUnexpanded: dataAttributes.slice(), selected: [] };
			else
				currentNode.STAURL = currentNode.STASelectedExpands.STAURLUnexpanded;

			if (document.getElementById("DialogSelectExpandsHTML").style.display != "none") {
				var dataAttr = currentNode.STASelectedExpands.dataAttributesUnexpanded;
				for (var a = 0; a < dataAttr.length; a++) {
					if (document.getElementById("SelectExpand_" + a) && document.getElementById("SelectExpand_" + a).checked)
						break;
				}
				if (a < dataAttr.length) //A checked attribute has been found ("for" breaks before ending).
				{
					var s;
					currentNode.STAURL = AddKVPToURL(currentNode.STAURL, "$expand=");
					for (var a = 0; a < dataAttr.length; a++) {
						if (document.getElementById("SelectExpand_" + a) &&
							document.getElementById("SelectExpand_" + a).checked &&
							dataAttr[a].endsWith("@iot.navigationLink")) {
							s = dataAttr[a].substring(0, dataAttr[a].length - "@iot.navigationLink".length);
							currentNode.STAURL += s + ",";
							currentNode.STASelectedExpands.selected[a] = true;
						}
						else
							currentNode.STASelectedExpands.selected[a] = false;
					}
					currentNode.STAURL = currentNode.STAURL.slice(0, -1); //remove the last coma.
				}
				/*else   //If no selected collumn has been found, no expand is needed and the previous request is fine
					;*/
			}
			if (!isNaN(parseInt(document.getElementById("SelectExpandsNumberOfRecords").value)))
				currentNode.STAExpectedLength = parseInt(document.getElementById("SelectExpandsNumberOfRecords").value);
			networkNodes.update(currentNode);
			LoadJSONData(currentNode);
			UpdateChildenSTAURL(currentNode);
		}

		function isNumeric(str) {
			if (typeof str != "string") return false // we only process strings!
			return !isNaN(str) && // use type coercion to parse the _entirety_ of the string (`parseFloat` alone does not do this)...
				!isNaN(parseFloat(str)) // ...and ensure strings of whitespace fail
		}


		const selectConditionContent = [' = ', ' &ne; ', ' &ge; ', ' > ', ' &le; ', ' < ', ' [a,b] ', ' (a,b] ', ' [a,b) ', ' (a,b) '];

		function GetSelectRows(event) { //Al apretar el ok
			event.preventDefault(); // We don't want to submit this form
			document.getElementById("DialogSelectRows").close();

			var nodeids = network.getConnectedNodes(currentNode.id, "from");
			if (nodeids && nodeids.length && networkNodes.get(nodeids[0])) {
				var node = networkNodes.get(nodeids[0]);
				if (node.STAURL)
					currentNode.STAURL = node.STAURL;
				if (node.STAdata)
					currentNode.STAdata = node.STAdata;
			}
			else
				return;

			if (document.getElementById("DialogSelectRowsTableRadio").checked) {
				var elems = document.getElementsByName("SelectRowRadio");
				for (var i = 0; i < elems.length; i++) {
					if (elems[i].checked)
						break;
				}
				if (i < elems.length) {
					const s = elems[i].id.substring("SelectRow_".length);
					const n = Number(s);
					if (Number.isInteger(n))
						currentNode.STAURL += "(" + n + ")";
					else
						currentNode.STAURL += "(\"" + s + "\")";
				}
			}
			else { //El filter estÃ  seleccionat
				var divSelectorRowsFilter = document.getElementById("divSelectorRowsFilter");
				var table = document.getElementById("tableResult_"+nodeId);
				var tableResults = []; //on es guarden els valors de la taula
				var rowsNumber = table.rows.length;
				if (rowsNumber > 1) {
					for (var r = 1; r < rowsNumber; r++) {
						var property = document.getElementById("th_" + nodeids + "_" + (r) + "_property");
						var value = document.getElementById("th_" + nodeids + "_" + (r) + "_value");

						if (r == 1) {
							tableResults.push("0");
							var propertyText = property.innerHTML;
							var valueText = value.innerHTML;
							tableResults.push(propertyText);
							tableResults.push(valueText);
						} else {
							//resultat del select
							var select = document.getElementById("select_" + nodeids + "_" + (r));
							tableResults.push(select.options[select.selectedIndex].value);
							var propertyText = property.innerHTML;
							var valueText = value.innerHTML;
							tableResults.push(propertyText);
							tableResults.push(valueText);
						}

					}
					console.log(tableResults);
				} else { //cap selecciÃ³
					alert("There is nothing selected! The filter will not be applied.");
				}





				//////////////////////////////////////////////Per treure el @iot. No borrar 
				// var node = networkNodes.get(nodeids[0]);
				// var selectInformationWithoutAt = selectInformation.map((element) => { //Falla en el SelfLink, observations/navigationLink... Amb l'@tampoc funciona
				// 	if (element.startsWith("@iot.")) {
				// 		return element.substring(5);
				// 	} else {
				// 		return element.replace("@iot.", "/");
				// 	}
				// });
				// console.log(selectInformationWithoutAt);
				/////////////////////////////////////////////////////////////////////////////

				// Es posa la info al STAURL
				for (var i = 0; i < tableResults.length; i += 3) {  //o 3 o 6
					if (i == 0) { //tÃ© segona opciÃ³ And o or
						currentNode.STAURL += "?$filter=" + tableResults[i + 1] + " eq '" + tableResults[i + 2] + "' ";
					} else {
						currentNode.STAURL += tableResults[i] + " " + tableResults[i + 1] + " eq '" + tableResults[i + 2] + "'";
					}

				}

				console.log(currentNode.STAURL);
			}
			currentNode.STAExpectedLength = node.STAExpectedLength;
			networkNodes.update(currentNode);
			LoadJSONData(currentNode);
			UpdateChildenSTAURL(currentNode);
		}


		function IdOfSTAEntity(node) {
			for (var i = 0; i < STAEntitiesArray.length; i++) {
				if (node.image == STAEntitiesArray[i] + ".png")
					return i;
			}
			return -1;
		}

		function IdOfSTASpecialQueries(node) {
			for (var i = 0; i < STASpecialQueriesArray.length; i++) {
				if (node.image == STASpecialQueriesArray[i] + ".png")
					return i;
			}
			return -1;
		}

		function UpdateChildenSTAURL(parentNode, currentSTAURLroot, previousSTAURLroot) {
			var nodeIds = network.getConnectedNodes(parentNode.id, 'to');
			for (var i = 0; i < nodeIds.length; i++) {
				var node = networkNodes.get(nodeIds[i])
				if (node.STAURL && currentSTAURLroot && previousSTAURLroot) {
					if (node.STAURL.substring(0, previousSTAURLroot.length) == previousSTAURLroot)
						node.STAURL = currentSTAURLroot + node.STAURL.substring(previousSTAURLroot.length);
					if (IdOfSTAEntity(node) != -1 || IdOfSTASpecialQueries(node) != -1 || node.image == "SelectColumns.png" || node.image == "SelectRows.png") {
						networkNodes.update(node);
						LoadJSONData(node);
					}
				}
				UpdateChildenSTAURL(node);
			}
		}

		function UpdateChildenLoadJSONCallback(parentNode) {
			var nodeIds = network.getConnectedNodes(parentNode.id, 'to');
			for (var i = 0; i < nodeIds.length; i++) {
				var node = networkNodes.get(nodeIds[i])
				if (node.image == "SeparateColumns.png")
					SeparateColumns(node, parentNode);
			}
		}

		function getCSVWTypeFromAttributeType(t) {
			if (t == "array" || t == "null" || t == "object" || t == "undefined")
				return "json";
			return t;
		}

		function getJSONSchemaTypeFromAttributeType(t) {
			if (t == "anyURI")
				return "string";
			return t;
		}

		function getJSONType(a) {
			if (typeof a === "string")
				return "string";
			if (typeof a === "boolean")
				return "boolean";
			if (Array.isArray(a))
				return "array";
			if (a === null)
				return "null";
			if (typeof a === "object")
				return "object";
			if (typeof a === "undefined")
				return "undefined";
			if (Number.isInteger(a))
				return "integer";
			if (parseFloat(a))
				return "number"
			else
				return "string";
		}

		function getDataAttributes(data) {
			var dataAttributes = [], type;

			for (var i = 0; i < data.length; i++) {
				var keys = Object.keys(data[i]);
				for (var k = 0; k < keys.length; k++) {
					for (var a = 0; a < dataAttributes.length; a++) {
						if (dataAttributes[a].name == keys[k]) {
							if (!isAttributeAnyURI(dataAttributes[a].name)) {
								type = getJSONType(data[i][keys[k]]);
								if (dataAttributes[a].type == "null" || dataAttributes[a].type == "undefined")
									dataAttributes[a].type = type;
								if (type != "null" && type != "undefined") {
									if ((dataAttributes[a].type == "boolean" && type != "boolean") ||
										((dataAttributes[a].type == "integer" || dataAttributes[a].type == "number") && (type == "object" || type == "array" || type == "string")) ||
										(dataAttributes[a].type == "string" && (type == "object" || type == "array")) ||
										(dataAttributes[a].type == "array" && type == "object"))
										dataAttributes[a].type = type;
									else if (dataAttributes[a].type == "integer" && type == "number")
										dataAttributes[a].type = "number";
								}
							}
							break;
						}
					}
					if (a == dataAttributes.length)
						dataAttributes.push({
							name: keys[k],
							type: isAttributeAnyURI(keys[k]) ? "anyURI" : getJSONType(data[i][keys[k]])
						});
				}
			}
			return dataAttributes;
		}

		function isAttributeAnyURI(s) {
			return (s == "url" || s == "definition" || s.endsWith("@iot.selfLink") || s.endsWith("@iot.navigationLink"));
		}

		function fillValueSelector(nodeId, place) {
			var data = networkNodes.get(nodeId).STAdata;
			var select;
			select = document.getElementById("selectorProperty" + place);
			var selectedProperty = select.options[select.selectedIndex].value;
			var selectedElement;
			selectedElement = document.getElementById("selectorValue" + place);
			selectedElement.innerHTML = "";

			var valor;
			var arrayValors = [];
			var isAnObject;

			// s'ha de filtrar
			for (let index = 0; index < data.length; index++) {
				valor = data[index][selectedProperty];
				// console.log(typeof valor);
				if (typeof valor === "object") isAnObject = "yes";
				if (!arrayValors.find(element => element == valor)) {
					var opcio = document.createElement("option");
					opcio.setAttribute("value", valor);
					opcio.innerHTML = valor;
					selectedElement.appendChild(opcio);
					arrayValors.push(valor);
				} else {
					// console.log("en el else");
				}
			}

			var divIsAnObject = document.getElementById("divIsAnObject");
			var addButton = document.getElementById("addButton");
			var table = document.getElementById("tableResult_"+nodeId);
			var rowsNumbers = table.rows.length;
			var buttonSave;

			if (isAnObject === "yes") {
				selectedElement.setAttribute("class", "objectInSelect");
				divIsAnObject.classList.remove("hidden");
				addButton.disabled = true;


				for (var i = 1; i < rowsNumbers; i++) {

					// if (row == i) {
					// 	buttonSave = document.getElementById("buttonSave" + i);
					// 	if (!buttonSave.contains("hidden")) {
					// 		buttonSave.disabled = true;
					// 	};
					// }

				}



			} else {
				selectedElement.classList.remove("objectInSelect");
				divIsAnObject.classList.add("hidden");
				addButton.disabled = false;
				for (var i = 1; i < rowsNumbers; i++) {
					// if (row == i) {
					// 	buttonSave = document.getElementById("buttonSave" + i);
					// 	if (!buttonSave.contains("hidden")) {
					// 		buttonSave.disabled = false;
					// 	};
					// }
				}
			}
		}

		function closeModalSelect(place, button, row) {
			event.preventDefault();
			var textInput = document.getElementById("textInput" + place);
			var divFilterContainer = document.getElementById("divFilterContainer" + place);
			var displaySelectButton = document.getElementById("displaySelect" + place);
			var addButton = document.getElementById("addButton");
			var saveButton = document.getElementById("buttonSave" + row);

			divFilterContainer.classList.add("hidden");
			divFilterContainer.classList.remove("inblock");
			displaySelectButton.classList.remove("hidden");
			textInput.classList.remove("hidden");

			addButton.disabled = false;
			if (place != "_optionsRow") {
				saveButton.disabled = false;
			}


			//Falta escriure l'opcio del select
			if (button == "ok") {
				var selectorValue = document.getElementById("selectorValue" + place);
				textInput.value = selectorValue.options[selectorValue.selectedIndex].value;
				adjustWidth(place);
			}


		}

		function changeWriteToSelect(nodeId, place) {  //Que pugui recollir el text del input
			event.preventDefault();
			var textInput = document.getElementById("textInput" + place);
			var divFilterContainer = document.getElementById("divFilterContainer" + place);
			var displaySelectButton = document.getElementById("displaySelect" + place);
			var addButton = document.getElementById("addButton");

			textInput.classList.add("hidden");
			divFilterContainer.classList.remove("hidden");
			divFilterContainer.classList.add("inblock");
			displaySelectButton.classList.add("hidden");
			addButton.disabled = true;

			var table = document.getElementById("tableResult_"+nodeId);
			var rowsNumbers = table.rows.length;
			var saveButton;

			for (var i = 1; i < rowsNumbers; i++) {
				saveButton = document.getElementById("buttonSave" + i);
				if (saveButton.classList.contains("hidden") == false) {
					saveButton.disabled = true;
				}
			}

		}

		function isAnObject(nodeId, place) {
			var select = document.getElementById("selectorValue" + place);
			var selectOption = select.options[select.selectedIndex].value;
			if (selectOption === "[object Object]") {
				console.log("object!!!!");
			}
			// else {
			// 	console.log(selectOption);
			// 	console.log(typeof selectOption);
			// }
		}
		function adjustWidth(place) {
			var textInput = document.getElementById("textInput" + place);
			var value1 = textInput.value;
			var valueLength = value1.length;
			var width = 100;
			if (valueLength > 20) {
				width = valueLength * 8; // 8px per character
				textInput.style.width = width + "px";
			} else if (valueLength <= 20) {
				textInput.style.width = "100px";
			}

		}

		function createSelectorRowFilters(dataAttributes, nodeId) {
			var data = networkNodes.get(nodeId).STAdata;
			var selectorStructureRow;
			var divFilterBox = document.getElementById("divSelectorRowsFilter");

			var optionsRow = document.createElement("div");
			optionsRow.setAttribute("id", "optionsRow");
			divFilterBox.appendChild(optionsRow);
			var label1 = document.createElement("label");
			label1.innerHTML = "Choose a Property";
			optionsRow.appendChild(label1);


			createSelect(1, "_optionsRow", "optionsRow", nodeId, dataAttributes, "no", "initial", "no");
			createSelect(2, "_optionsRow", "optionsRow", nodeId, dataAttributes, "no", "initial", "no");

			var label2 = document.createElement("label");
			label2.setAttribute("id", "label2");
			label2.innerHTML = "a Value";
			optionsRow.appendChild(label2);

			createSelect(3, "_optionsRow", "optionsRow", nodeId, dataAttributes, "no", "initial", "no");

			var instructions = document.createElement("div");
			instructions.setAttribute("id", "instructions");
			instructions.innerHTML = "Is not your value on the list? You can write it, click the button";
			instructions.setAttribute("class", "instructions");
			optionsRow.appendChild(instructions);

			var addButton = document.createElement("button");
			addButton.setAttribute("id", "addButton");
			addButton.setAttribute("onclick", "addSelected('" + nodeId + "','_optionsRow')");
			addButton.innerHTML = "add";
			optionsRow.appendChild(addButton);

			var divResult = document.createElement("div");
			divResult.setAttribute("id", "divResult");
			divResult.setAttribute("class", "divResultBox")
			divResult.innerHTML = "These are your values selected to filter ";
			divFilterBox.appendChild(divResult);

			var divIsAnObject = document.createElement("div"); //es veurÃ  quan la property seleccionada sigui un objecte
			divIsAnObject.setAttribute("id", "divIsAnObject");
			divIsAnObject.setAttribute("class", "hidden");
			var textIsAnObject = document.createElement("h5");
			textIsAnObject.setAttribute("id", "textIsAnObject");
			textIsAnObject.innerHTML = 'This property contains a set of values, if you want to sail inside it to choose one value, please use "separate colums" option before using "Row filter" option to unfold the values. Follow example below';
			divIsAnObject.appendChild(textIsAnObject);
			var imageIsAnObject = document.createElement("img");
			imageIsAnObject.setAttribute("src", "SeparateColumsExample.png");
			imageIsAnObject.setAttribute("height", "300");
			imageIsAnObject.setAttribute("id", "imageIsAnObject");

			divIsAnObject.appendChild(imageIsAnObject);
			divFilterBox.appendChild(divIsAnObject);




			var table = document.createElement("table");
			table.setAttribute("id", "tableResult");
			table.setAttribute("class", "borderTable");
			var tableTr = document.createElement("tr");
			tableTr.setAttribute("id", "tableTr0");
			tableTr.setAttribute("class", "borderTable");
			table.appendChild(tableTr);
			for (var i = 0; i < 5; i++) {
				var tableTh = document.createElement("th");
				tableTh.setAttribute("class", "borderTable");
				if (i == 1) {
					tableTh.innerHTML = "Property";

				} else if (i == 3) {
					tableTh.innerHTML = "Value";
				}
				tableTr.appendChild(tableTh)
			}

			divResult.appendChild(table);


		}


		function addSelected(nodeId, place) {
			event.preventDefault();
			var table = document.getElementById("tableResult_"+nodeId);
			// var seÃ±ectorAndOrNot=document.getElementById("select_"+nodeId+"_"+(table.length-1));
			var selectorProperty = document.getElementById("selectorProperty" + place);
			var selectorCondition = document.getElementById("selectorCondition" + place);
			var textInput = document.getElementById("textInput" + place);

			//llegir taula
			var tableContent = [];
			tableContent = readTableFilterRow(nodeId, 0);
			// console.log("abans d'afegir: " + tableContent);

			//afegir els valors nous

			if (tableContent.length == 0) {
				tableContent.push("nothing");
			}
			else {
				tableContent.push("and");
			}
			tableContent.push(selectorProperty.options[selectorProperty.selectedIndex].value);
			tableContent.push(selectorCondition.options[selectorCondition.selectedIndex].value);
			tableContent.push(textInput.value);
			// console.log("despres d'afegir: " + tableContent);


			//borrar taula
			var a = 1;
			var rowsNumbers2 = table.rows.length;

			while (rowsNumbers2 > 1) { //borrem la taula menys la primera fila
				table.deleteRow(a);
				rowsNumbers2 = table.rows.length;
			}
			//pintar taula 
			drawTable(nodeId, tableContent, "add");

		}

		function createSelect(number, place, place_Id, nodeId, dataAttributes, tableContent, button, editRowContent) {
			var placeId = document.getElementById(place_Id);
			var select = document.createElement("select");
			var data = networkNodes.get(nodeId).STAdata;
			var dataAttributes2;
			if (button != "initial") {
				var table = document.getElementById("tableResult_"+nodeId);
				var rowsNumbers = table.rows.length;
			}

			if (dataAttributes === "no") {
				dataAttributes2 = getDataAttributes(data);
			} else {
				dataAttributes2 = dataAttributes;
			};

			//dataAttributes3
			var dataAttributes3 = dataAttributes2.filter((element) => element.name != "@iot.selfLink"
			);
			// console.log(dataAttributes3);



			if (number == 1) {
				select.setAttribute("id", "selectorProperty" + place);
				select.setAttribute("onChange", "fillValueSelector('" + nodeId + "','" + place + "')");

				for (let i = 0; i < dataAttributes3.length; i++) {// per omplir el de property/property
					//if (dataAttributes3[i].name != "@iot.selfLink") {
					var option = document.createElement("option");
					option.setAttribute("value", dataAttributes3[i].name);
					option.innerHTML = dataAttributes3[i].name;
					if (editRowContent !== 'undefined' & button == "edit") {
						if (dataAttributes3[i].name == editRowContent[number]) {
							option.setAttribute("selected", true);
						}
					}
					select.appendChild(option);
					//}
				}
				placeId.appendChild(select);
			}
			else if (number == 2) {
				select.setAttribute("id", "selectorCondition" + place);
				for (var i = 0; i < selectConditionContent.length; i++) { //crear les opcions del selector de condiciÃ³
					var opcioCondicio = document.createElement("option");
					opcioCondicio.setAttribute("value", i);
					opcioCondicio.innerHTML = selectConditionContent[i];

					if (editRowContent !== 'undefined' & button == "edit") {
						console.log("i: " + i + ", editRow[2]: " + editRowContent[2]);
						if (i == editRowContent[2]) {
							option.setAttribute("selected", true);
						}
					}
					select.appendChild(opcioCondicio);
				}
				placeId.appendChild(select);

			}
			else if (number == 3) { //la caixa de select, ok i butÃ³ de canvi
				var divFilterContainer = document.createElement("div");
				divFilterContainer.setAttribute("id", "divFilterContainer" + place);
				divFilterContainer.setAttribute("class", "hidden");
				placeId.appendChild(divFilterContainer);

				select.setAttribute("id", "selectorValue" + place);
				select.setAttribute("onChange", "isAnObject('" + nodeId + "','" + place + "')");

				var valor;
				var arrayValors = [];

				for (let index = 0; index < data.length; index++) {
					if (button == "edit") {
						valor = data[index][editRowContent[1]];
					}
					else {
						valor = data[index][dataAttributes3[0].name];

					}

					if (!arrayValors.find(element => element == valor)) {
						var option = document.createElement("option");
						option.setAttribute("value", valor);
						option.innerHTML = valor;
						select.appendChild(option);
						arrayValors.push(valor);
					} else {
						console.log("en el else");
					}
				}

				divFilterContainer.appendChild(select);

				var textInput = document.createElement("input");
				textInput.setAttribute("id", "textInput" + place);
				textInput.setAttribute("type", "text");
				textInput.addEventListener("input", function () {
					adjustWidth(place)
				});

				placeId.appendChild(textInput);
				if (button == "edit") {
					textInput.value = editRowContent[3];
					adjustWidth(place);
				}


				var row = rowsNumbers - 1;

				var okButton = document.createElement("button");
				okButton.setAttribute("onclick", "closeModalSelect('" + place + "','ok'," + row + ")");
				okButton.setAttribute("id", "okButton" + place);
				okButton.innerHTML = "Ok";


				divFilterContainer.appendChild(select);
				var cancelButton = document.createElement("button");
				cancelButton.setAttribute("onclick", "closeModalSelect('" + place + "','cancel'," + row + ")");
				cancelButton.setAttribute("id", "cancelButton" + place);
				cancelButton.innerHTML = "Cancel";



				var writeButton = document.createElement("button");
				writeButton.innerHTML = "...";
				writeButton.setAttribute("id", "displaySelect" + place);
				writeButton.setAttribute("onclick", "changeWriteToSelect('" + nodeId + "','" + place + "')");
				placeId.appendChild(writeButton);
				divFilterContainer.appendChild(okButton);
				divFilterContainer.appendChild(cancelButton);

			}

		}
		function movingRow(row, nodeId, arrow) {
			event.preventDefault();
			var tableContent = readTableFilterRow(nodeId, 0);

			var row2 = parseInt(row);
			console.log(typeof row2);
			var position = (row2 - 1) * 4;

			//Copiar la fila
			var rowValuesToKeep = []

			for (var i = 0; i < tableContent.length; i += 4) {
				if (i == position) {
					rowValuesToKeep.push(tableContent[i]);
					rowValuesToKeep.push(tableContent[i + 1]);
					rowValuesToKeep.push(tableContent[i + 2]);
					rowValuesToKeep.push(tableContent[i + 3]);
				}
			}
			//console.log("fila que s'ha de moure    " + rowValuesToKeep);

			tableContent.splice((position), 4); //treure els valors
			console.log("despres del splice    " + tableContent);

			if (arrow == "up") {
				if (position - 4 < 0) {
					position = 0;
				} else {
					position = position - 4;
				}
				console.log("position:  " + position);
				tableContent.splice((position), 0, ...rowValuesToKeep); //funciona
			} else if (arrow == "down") {
				if (position + 4 > tableContent.length) {
					position = position;
				} else {
					position = position + 4;
				}

				console.log("position:  " + position);
				tableContent.splice((position), 0, ...rowValuesToKeep);
			}

			console.log(tableContent);
			//borrar taula
			var table = document.getElementById("tableResult_"+nodeId);
			var a = 1;
			var rowsNumbers = table.rows.length;
			while (rowsNumbers > 1) { //borrem la taula menys la primera fila
				table.deleteRow(a);
				rowsNumbers = table.rows.length;
			}
			//dibuixar taula
			drawTable(nodeId, tableContent, "arrow", row, "no");
		}


		function readTableFilterRow(nodeId, row) {
			var table = document.getElementById("tableResult_"+nodeId);
			var tableResults = []; //on es guarden els valors de la taula
			var rowsNumber = table.rows.length;
			var property, propertyText, condition, conditionText, value, valueText, selectorProperty, selectorCondition, inputValue;

			if (rowsNumber > 1) {
				for (var r = 1; r < rowsNumber; r++) {
					if (row !== 0) {
						r = row
					}
					property = document.getElementById("th_" + nodeId + "_" + (r) + "_property");
					if (property.children.length > 0) {
						selectorProperty = document.getElementById("selectorProperty_tableResult");
						propertyText = selectorProperty.options[selectorProperty.selectedIndex].value;

					} else {
						propertyText = property.innerHTML;
					}

					condition = document.getElementById("th_" + nodeId + "_" + (r) + "_condition");
					if (condition.children.length > 0) {
						selectorCondition = document.getElementById("selectorCondition_tableResult");
						conditionText = selectorCondition.options[selectorCondition.selectedIndex].value;
					} else {
						conditionText = condition.getAttribute("value");
					}

					value = document.getElementById("th_" + nodeId + "_" + (r) + "_value");
					if (value.children.length > 0) {
						inputValue = document.getElementById("textInput_tableResult");
						valueText = inputValue.value;
					} else {
						valueText = value.innerHTML;
					}

					if (r == 1) {
						tableResults.push("nothing");
					} else {
						var selectAndOrNot = document.getElementById("select_" + nodeId + "_" + r);
						tableResults.push(selectAndOrNot.options[selectAndOrNot.selectedIndex].value);
					}
					tableResults.push(propertyText);
					tableResults.push(conditionText);
					tableResults.push(valueText);
					// console.log("tableResults:  " + tableResults);
					if (row !== 0) {
						r = rowsNumber;
					}
				}

			}
			return tableResults;
		}


		function drawTable(nodeId, tableContentNew, button, row, editRowContent) {
			var contador = 1;
			var table = document.getElementById("tableResult_"+nodeId);
			// console.log("el q escriu: " + tableContentNew);


			if (tableContentNew.length != 0) {
				for (var r = 0; r < tableContentNew.length; r += 4) { //recorrerem tot l'arrai dels elements guardats, de 4 en 4 (4valors a guardar per linea)
					var tableTr = document.createElement("tr");
					tableTr.setAttribute("id", "tableTr_" + contador); //Fila 1, 2, 3, 4.. (contador suma 1 per volta)
					table.appendChild(tableTr);

					for (var a = 0; a < 5; a++) { //5 columnes (crearem cada fila, columna a columna. La a indica la columna)comenÃ§a al 0 perque l'arrai comenÃ§a en [0]
						var tableTh = document.createElement("th");
						tableTh.setAttribute("class", "borderTable");


						if (a == 0) { //Columna del ar or not ()
							tableTr.appendChild(tableTh);
							if (contador != 1) { //no hi ha select en la primera. Al comenÃ§ar per 1 nomes no posarÃ  el primer
								var selectAndOr = document.createElement("select");
								selectAndOr.setAttribute("id", "select_" + nodeId + "_" + (contador));
								tableTh.appendChild(selectAndOr);
								for (var s = 0; s < 3; s++) { //omplim select (3 opcions: and, or, not) FUNCIONA BÃ AMB ADD
									var optionSelect = document.createElement("option");
									if (s == 0) {
										if (button == "edit" || button == "delete" || button == "add" || button == "save") { //no insert 
											if (tableContentNew[r] == "and") { //r= 0,3,7,11...
												optionSelect.setAttribute("selected", true);
											}
										}
										optionSelect.setAttribute("value", "and");
										optionSelect.innerHTML = "And";
									}
									else if (s == 1) {
										if (button == "edit" || button == "delete" || button == "add" || button == "save") {
											if (tableContentNew[r] == "or") {
												optionSelect.setAttribute("selected", true);
											}
										}

										optionSelect.setAttribute("value", "or");
										optionSelect.innerHTML = "Or";
									}
									else if (s == 2) {
										if (button == "edit" || button == "delete" || button == "add" || button == "save") {
											if (tableContentNew[r] == "not") {
												optionSelect.setAttribute("selected", true);
											}
											optionSelect.setAttribute("value", "not");
											optionSelect.innerHTML = "Not";
										}
									}

									selectAndOr.appendChild(optionSelect);
								}
							}

						}
						else if (a == 1) { //2a columna, property
							var idProperty = "th_" + nodeId + "_" + (contador) + "_property";
							tableTh.setAttribute("id", idProperty);

							tableTr.appendChild(tableTh);

							if (button == "delete" || button == "add" || (button == "edit" & contador != row) || button == "save" || (button == "insert" & tableContentNew[(r + 1)] != "insertSelect") || button == "arrow") {
								tableTh.innerHTML = tableContentNew[(r + 1)]; //es la r +1 xq son les posicions del array 1,4,7... 
							}
							else if ((button == "edit" & contador == row) || (button == "insert" & tableContentNew[(r + 1)] == "insertSelect")) {
								// 	//muntar input/select amb opicio seleccionada

								// console.log(tableContentNew[(r + 1)]);

								createSelect(1, "_tableResult", idProperty, nodeId, "no", tableContentNew, button, editRowContent);

							}

						}
						else if (a == 2) {
							var idCondition = "th_" + nodeId + "_" + (contador) + "_condition";
							tableTh.setAttribute("id", idCondition);
							tableTr.appendChild(tableTh);

							if (button === "delete" || button == "add" || (button == "edit" & contador != row) || button == "save" || (button == "insert" & tableContentNew[(r + 1)] != "insertSelect") || button == "arrow") {
								tableTh.innerHTML = selectConditionContent[tableContentNew[r + 2]];
								tableTh.setAttribute("value", tableContentNew[r + 2]);

							}
							else if ((button == "edit" & contador == row) || (button == "insert" & tableContentNew[(r + 1)] == "insertSelect")) {
								// 	//muntar input/select amb opicio seleccionada

								createSelect(2, "_tableResult", idCondition, nodeId, tableContentNew, button, editRowContent);


							}

						}
						else if (a == 3) {
							var idValue = "th_" + nodeId + "_" + (contador) + "_value";
							tableTr.appendChild(tableTh);
							tableTh.setAttribute("id", idValue);
							if (button === "delete" || button == "add" || (button == "edit" & contador != row) || button == "save" || (button == "insert" & tableContentNew[(r + 1)] != "insertSelect") || button == "arrow") {

								tableTh.innerHTML = tableContentNew[(r + 3)];
							}
							else if ((button == "edit" & contador == row) || (button == "insert" & tableContentNew[(r + 1)] == "insertSelect")) {
								// 	//muntar input/select amb opicio seleccionada
								console.log(tableContentNew[(r + 3)]);
								createSelect(3, "_tableResult", idValue, nodeId, "no", tableContentNew, button, editRowContent);


							}


						} else if (a == 4) {
							tableTr.appendChild(tableTh);
							var buttonDelete = document.createElement("button");
							buttonDelete.setAttribute("value", contador);
							buttonDelete.setAttribute("id", "buttonDelete" + contador);
							buttonDelete.setAttribute("onclick", "deleteRow(" + (contador) + ",'" + nodeId + "')");
							buttonDelete.innerHTML = "Delete ";
							tableTh.appendChild(buttonDelete);
							var buttonEdit = document.createElement("button");
							buttonEdit.setAttribute("value", contador);
							buttonEdit.setAttribute("id", "buttonEdit" + contador);
							buttonEdit.setAttribute("onclick", "editRow(" + (contador) + ",'" + nodeId + "')");
							buttonEdit.innerHTML = "Edit ";
							tableTh.appendChild(buttonEdit);
							var buttonInsert = document.createElement("button");
							buttonInsert.setAttribute("value", contador);
							buttonInsert.setAttribute("id", "buttonInsert" + contador);
							buttonInsert.setAttribute("onclick", "insertRow(" + (contador) + ",'" + nodeId + "')");
							buttonInsert.innerHTML = "Insert ";
							tableTh.appendChild(buttonInsert);
							var buttonSave = document.createElement("button");
							buttonSave.setAttribute("value", contador);
							buttonSave.setAttribute("class", "hidden");
							buttonSave.setAttribute("id", "buttonSave" + contador);
							buttonSave.setAttribute("onclick", "saveRow(" + (contador) + ",'" + nodeId + "')");
							buttonSave.innerHTML = "Save ";
							tableTh.appendChild(buttonSave);
							var buttonUp = document.createElement("button");
							buttonUp.setAttribute("id", "buttonUp" + contador);
							buttonUp.setAttribute("onclick", "movingRow(" + (contador) + ",'" + nodeId + "','up')");
							buttonUp.innerHTML = "&#9650;";
							tableTh.appendChild(buttonUp);
							var buttonDown = document.createElement("button");
							buttonDown.setAttribute("id", "buttonDown" + contador);
							buttonDown.setAttribute("onclick", "movingRow(" + (contador) + ",'" + nodeId + "','down')");
							buttonDown.innerHTML = "&#9660;";
							tableTh.appendChild(buttonDown);


						}

					}

					contador++;
				}
			}


		}
		function insertRow(row, nodeId) {
			event.preventDefault();
			var tableContent = readTableFilterRow(nodeId, 0);
			//agafar el contingut, i afegir " " en el lloc on toqui.PEr ccrear una fila buida on somplirÃ  amb selects
			var row2 = parseInt(row);
			console.log(typeof row2);
			var position = (row2 - 1) * 4;
			console.log(position);
			console.log(tableContent);
			tableContent.splice(position, 0, "insertSelect", "insertSelect", "insertSelect", "insertSelect");
			console.log(tableContent);
			//borrar taula
			var table = document.getElementById("tableResult_"+nodeId);
			var a = 1;
			var rowsNumbers = table.rows.length;
			while (rowsNumbers > 1) { //borrem la taula menys la primera fila
				table.deleteRow(a);
				rowsNumbers = table.rows.length;
			}
			//drawTable(....)
			drawTable(nodeId, tableContent, "insert", row, "no");

			//amagar els botons de edit,Insert, mostrar botÃ³ save i mantenir suprimir
			rowsNumbers = table.rows.length;
			//desabilitar el add
			var addButton = document.getElementById("addButton");
			addButton.disabled = true;
			var buttonEdit, buttonDelete, buttonInsert, buttonSave, buttonUp, buttonDown;

			for (var i = 1; i < rowsNumbers; i++) {
				buttonEdit = document.getElementById("buttonEdit" + i);
				buttonDelete = document.getElementById("buttonDelete" + i);
				buttonInsert = document.getElementById("buttonInsert" + i);
				buttonUp = document.getElementById("buttonUp" + i);
				buttonDown = document.getElementById("buttonDown" + i);

				buttonEdit.classList.add("hidden");
				buttonDelete.classList.add("hidden");
				buttonInsert.classList.add("hidden");
				buttonUp.classList.add("hidden");
				buttonDown.classList.add("hidden");

				if (row == i) {
					buttonSave = document.getElementById("buttonSave" + i);
					buttonSave.classList.remove("hidden");
				}

			}
		}

		function saveRow(row, nodeId) {
			event.preventDefault();
			var tableContent = readTableFilterRow(nodeId, 0);
			var table = document.getElementById("tableResult_"+nodeId);
			var a = 1;
			var rowsNumbers = table.rows.length;
			while (rowsNumbers > 1) { //borrem la taula menys la primera fila
				table.deleteRow(a);
				rowsNumbers = table.rows.length;
			}

			drawTable(nodeId, tableContent, "save", row, "no");

			//amagar i mostrar botons

			var rowsNumbers = table.rows.length;
			var buttonEdit, buttonDelete, buttonInsert, buttonSave, buttonUp, buttonDown;
			for (var i = 1; i < rowsNumbers; i++) {
				buttonEdit = document.getElementById("buttonEdit" + i);
				buttonDelete = document.getElementById("buttonDelete" + i);
				buttonInsert = document.getElementById("buttonInsert" + i);
				buttonUp = document.getElementById("buttonUp" + i);
				buttonDown = document.getElementById("buttonDown" + i);

				buttonEdit.classList.remove("hidden");
				buttonDelete.classList.remove("hidden");
				buttonInsert.classList.remove("hidden");
				buttonUp.classList.remove("hidden");
				buttonDown.classList.remove("hidden");
			}
			var addButton = document.getElementById("addButton");
			addButton.disabled = false;
		}


		function editRow(row, nodeId) {
			event.preventDefault();
			var tableContent = readTableFilterRow(nodeId, 0);


			//Agafar les dades de la fila

			var editRowContent = readTableFilterRow(nodeId, row);
			console.log("editRowContent: " + editRowContent);

			//borrar taula
			var table = document.getElementById("tableResult_"+nodeId);
			var a = 1;
			var rowsNumbers = table.rows.length;
			while (rowsNumbers > 1) { //borrem la taula menys la primera fila
				table.deleteRow(a);
				rowsNumbers = table.rows.length;
			}
			//pintar la taula canviat els valors pels selects i tenint la seleccio del select posada al input
			drawTable(nodeId, tableContent, "edit", row, editRowContent);

			rowsNumbers = table.rows.length;

			//desabilitar el add
			var addButton = document.getElementById("addButton");
			addButton.disabled = true;

			//amagar els botons de edit,Insert, mostrar botÃ³ save i mantenir suprimir

			var buttonEdit, buttonDelete, buttonInsert, buttonSave, buttonUp, buttonDown;
			for (var i = 1; i < rowsNumbers; i++) {
				buttonEdit = document.getElementById("buttonEdit" + i);
				buttonDelete = document.getElementById("buttonDelete" + i);
				buttonInsert = document.getElementById("buttonInsert" + i);
				buttonUp = document.getElementById("buttonUp" + i);
				buttonDown = document.getElementById("buttonDown" + i);

				buttonEdit.classList.add("hidden");
				buttonDelete.classList.add("hidden");
				buttonInsert.classList.add("hidden");
				buttonUp.classList.add("hidden");
				buttonDown.classList.add("hidden");


				if (row == i) {
					buttonSave = document.getElementById("buttonSave" + i);
					buttonSave.classList.remove("hidden");
				}

			}
		}


		function deleteRow(row, nodeId) {
			event.preventDefault();
			var tableContent = readTableFilterRow(nodeId, 0); //agafar els valors de la taula

			var table = document.getElementById("tableResult_"+nodeId);
			var a = 1;
			var rowsNumbers2 = table.rows.length;

			while (rowsNumbers2 > 1) { //borrem la taula menys la primera fila
				table.deleteRow(a);
				rowsNumbers2 = table.rows.length;
			}


			//treure les dades de la fila eliminada de les dades guardades
			var tableContentNew = [];
			var contador = 1;

			for (var i = 0; i < tableContent.length; i += 4) {
				if (row != contador) {
					tableContentNew.push(tableContent[i]);
					tableContentNew.push(tableContent[i + 1]);
					tableContentNew.push(tableContent[i + 2]);
					tableContentNew.push(tableContent[i + 3]);
				}

				contador++;
			}

			console.log(tableContent);
			console.log(tableContentNew);
			contador = 1;
			//tornar a pintar la taula (drawTable)
			drawTable(nodeId, tableContentNew, "delete");



		}

		function GetSelectorsForRowFilter(nodeId) {
			var divSelectorStructure;
			divSelectorStructure = `<div id=selectorRowsContainer>
		
				<div id='divSelectorRowsFilter'></div></div>`;
			return divSelectorStructure;
		}

		function GetHTMLTable(data, rowNumbers, rowChecks) {
			var dataAttributes = getDataAttributes(data), cdns = [], needhref = [], record, cell;

			cdns.push("<table class='tablesmall'><tr>");
			if (rowNumbers)
				cdns.push("<th></th>");
			if (rowChecks)
				cdns.push("<th></th>");
			for (var a = 0; a < dataAttributes.length; a++) {
				cdns.push("<th>", dataAttributes[a].name, "</th>");
				needhref[a] = isAttributeAnyURI(dataAttributes[a].name);
			}

			cdns.push("</tr>");
			for (var i = 0; i < data.length; i++) {
				record = data[i];
				cdns.push("<tr>");
				if (rowNumbers)
					cdns.push("<td>", i + 1, "</td>");
				if (rowChecks)
					cdns.push("<td><input type='radio' name='SelectRowRadio' id='SelectRow_", record["@iot.id"] ? record["@iot.id"] : i, "' ", i == 0 ? "checked='checked'" : "", "/></td>");
				for (var a = 0; a < dataAttributes.length; a++) {
					cell = record[dataAttributes[a].name];
					cdns.push("<td>");
					if (typeof cell !== "undefined") {
						if (needhref[a] && cell.length)
							cdns.push("<a href='", cell, "' target='_blank'>", cell, "</a>");
						else if (typeof cell === "object")
							cdns.push(JSON.stringify(cell));
						else
							cdns.push(cell);
					}
					cdns.push("</td>");
				}
				cdns.push("</tr>");
			}
			cdns.push("</table>");
			return cdns.join("");
		}

		function ShowTableDialog(nodeId) {
			var data = networkNodes.get(nodeId).STAdata;

			if (!data || !data.length) {
				document.getElementById("DialogOKHTML").innerHTML = "No data to show.";
				return;
			}

			document.getElementById("DialogOKHTML").innerHTML = GetHTMLTable(data,
			document.getElementById("ShowTableRowNumberDialogOK").checked ? true : false,
				false);
		}

		function StringifyObjectElements(data) {
			var dataAttributes = getDataAttributes(data), jsonTable = [];

			for (var i = 0; i < data.length; i++) {
				jsonTable[i] = {};
				for (var a = 0; a < dataAttributes.length; a++) {
					if (typeof data[i][dataAttributes[a].name] === "object")  //"arrays" are also objects.
						jsonTable[i][dataAttributes[a].name] = JSON.stringify(data[i][dataAttributes[a].name]);
					else
						jsonTable[i][dataAttributes[a].name] = data[i][dataAttributes[a].name];
				}
			}
			return jsonTable;
		}


		function GetGeoJSON(data, selectedOptions) {
			var dataSorted = JSON.parse(JSON.stringify(data)), geojson = { "type": "FeatureCollection", "features": [] };

			//Sorted by place, variable and date (older first).
			dataSorted.sort(function (a, b) {
				if (a[selectedOptions.place] < b[selectedOptions.place])
					return -1;
				if (a[selectedOptions.place] > b[selectedOptions.place])
					return 1;
				if (a[selectedOptions.longitude] - b[selectedOptions.longitude] < -0.0000001)
					return -1;
				if (a[selectedOptions.longitude] - b[selectedOptions.longitude] > 0.0000001)
					return 1;
				if (a[selectedOptions.latitude] - b[selectedOptions.latitude] < -0.0000001)
					return -1;
				if (a[selectedOptions.latitude] - b[selectedOptions.latitude] > 0.0000001)
					return 1;
				if (a[selectedOptions.variable] < b[selectedOptions.variable])
					return -1;
				if (a[selectedOptions.variable] > b[selectedOptions.variable])
					return 1;
				if (a[selectedOptions.time] < b[selectedOptions.time])
					return -1;
				if (a[selectedOptions.time] > b[selectedOptions.time])
					return 1;
				return 0;
			});
			var a, b;
			for (var i = 0, f = -1; i < dataSorted.length; i++) {
				a = dataSorted[i], b = dataSorted[i == 0 ? 0 : i - 1];
				if (i == 0 || a[selectedOptions.place] != b[selectedOptions.place] ||
					a[selectedOptions.longitude] > b[selectedOptions.longitude] + 0.0000001 ||
					a[selectedOptions.latitude] < b[selectedOptions.latitude] - 0.0000001 ||
					a[selectedOptions.latitude] > b[selectedOptions.latitude] + 0.0000001) {
					f++;
					geojson.features[f] = {
						"type": "Feature",
						"geometry": {
							"type": "Point",
							"coordinates": [
								a[selectedOptions.longitude],
								a[selectedOptions.latitude]
							]
						},
						"properties": {
							"Place": a[selectedOptions.place],
						}
					};
				}
				geojson.features[f].properties[a[selectedOptions.variable] + "_" + a[selectedOptions.time]] = a[selectedOptions.value];
			}
			return geojson;
		}

		function GetGeoJSONSchema(data, selectedOptions) {
			return {
				"$id": "https://meaning.ad4gd.eu/meaning.schema.json",
				"$schema": "https://meaning.ad4gd.eu/json-meta/meaning",
				"type": "object",
				"properties": {
					"features": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"geometry": {
									"type": "object",
									"properties": {
										"type": { "type": "string" },
										"coordinates": { "type": "array" }
									}
								},
								"properties": {
									"type": "object",
									"properties": GetGeoJSONPropertiesSchema(data, selectedOptions)
								}
							}
						}
					}
				}
			};
		}

		function GetGeoJSONPropertiesSchema(data, selectedOptions) {
			var dataSorted = JSON.parse(JSON.stringify(data));

			var attributes = {
				"Place": {
					"description": "Place name",
					"mostrar": "si"
				}
			};

			//Sorted by variable.
			dataSorted.sort(function (a, b) {
				if (a[selectedOptions.variable] < b[selectedOptions.variable])
					return -1;
				if (a[selectedOptions.variable] > b[selectedOptions.variable])
					return 1;
				return 0;
			});
			var a, b, UoMSymbol;
			for (var i = 0; i < dataSorted.length; i++) {
				a = dataSorted[i], b = dataSorted[i == 0 ? 0 : i - 1];
				if (i == 0 || a[selectedOptions.variable] != b[selectedOptions.variable]) {
					UoMSymbol = a[selectedOptions.variableUoMSymbol];
					if (UoMSymbol == "ug/m3")
						UoMSymbol == "Âµg/mÂ³";
					attributes[a[selectedOptions.variable] + "_{time?f=ISO}"] = {
						"description": a[selectedOptions.variableDescription],
						"definition": a[selectedOptions.variableDefinition],
						"UoM": a[selectedOptions.variableUoM],
						"UoMSymbol": UoMSymbol,
						"UoMDefinition": a[selectedOptions.variableUoMDefinition],
						"mostrar": "si",
						"serieTemporal": {
							"color": "#ff0000"
						}
					};
				}
			}
			return attributes;
		}

		function GetGeoJSONMetaschema() {
			return {
				"title": "GeoJSON properties meaning schema",
				"$schema": "http://json-schema.org/draft/2019-09/schema#",
				"$id": "https://meaning.ad4gd.eu/json-meta/meaning",
				"$vocabulary": {
					"https://json-schema.org/draft/2019-09/vocab/core": true,
					"https://json-schema.org/draft/2019-09/vocab/applicator": true,
					"https://json-schema.org/draft/2019-09/vocab/validation": true,
					"https://json-schema.org/draft/2019-09/vocab/meta-data": true,
					"https://json-schema.org/draft/2019-09/vocab/format": false,
					"https://json-schema.org/draft/2019-09/vocab/content": true,
					"https://meaning.ad4gd.eu/json-meta/meaning": false
				},
				"$recursiveAnchor": true,
				"allOf": [
					{
						"$ref": "https://json-schema.org/draft/2019-09/schema"
					},
					{
						"$ref": "#/definitions/AttributeDescription"
					}
				],
				"definitions": {
					"AttributeDescription": {
						"title": "GeoJSON meaning vocabulary meta-schema",
						"type": "object",
						"$comment": "The name of the property is the name of the attribute. If the server is SOS there are 2 special names can be used __om_time__, __om_sensor__ and the rest match the field names of the table containing the data. The properties that define each attribute can be de ones defined below or properties from JSON schema itself if indicated in this comment. For the moment, only 'description' is implemented. Others from 'string' (https://json-schema.org/understanding-json-schema/reference/string.html) or number can be useful (https://json-schema.org/understanding-json-schema/reference/numeric.html).",
						"properties": {
							"originalName": {
								"description": "Name of the original attribute. Optional. If the attributes are taken from a CSV and are transformed into one or more attributes (because they are associated with time). In this case the nomOri maybe different from the property name.",
								"type": ["string", "null"]
							},
							"symbol": {
								"description": "Symbol of the attribute. Note that it is not the units of measurement symbol but the attribute itself. For example, the letter 'Ï' (sigma) usually represents the standard deviation. It will be used in the compact display (coordinates box) if defined. Created for statistical attributes, but can be used elsewhere.",
								"type": ["string", "null"]
							},
							"descripcio": {
								"description": "Description of the attribute in multiple languages. If you do not need multilanguage support, please use 'description'",
								"$ref": "#/definitions/StringOCadenaLang"
							},
							"definition": {
								"description": "A URI that defines the observedProperty or the variable. You may find the right definitions in https://qudt.org/2.1/vocab/quantitykind, http://vocabs.lter-europe.net/EnvThes or https://www.eea.europa.eu/help/glossary/eea-glossary.",
								"type": ["string", "null"],
								"format": "uri"
							},
							"UoM": {
								"description": "Units of measurement of the attribute. Formerly refered as 'unitats'",
								"type": ["string", "null"]
							},
							"UoMSymbol": {
								"description": "Symbol of the units of measurement of the atributte.",
								"type": ["string", "null"]
							},
							"UoMDefinition": {
								"description": "A URI that defines the units of measurement of the observedProperty or variable. You may find the right definitions in https://qudt.org/2.1/vocab/unit",
								"type": ["string", "null"],
								"format": "uri"
							},
							"calcul": {
								"description": "Mathematical formula to transform the values of one or more properties of another vector or raster 'capa'. To point to a raster 'capa', see the explanation in 'component'; to point to a vector 'capa', we should use {'i_capa': 2, 'prop': 'flower_name'} to refer to 'capa' 2 which is of 'model' ='vector'. Can only be used if there are capa.objectes on the given 'capa'. If you do not specify i_capa, this 'capa' is assumed. For each 'objecte' {'i_capa': 2, 'prop': 'flower_name'} (or the equivalent for raster 'capa' for each pixel) is transformed into the value and, once done, the formula is evaluated as JavaScript syntax.",
								"type": "string"
							},
							"FormulaConsulta": {
								"description": "Mathematical formula to transform the values of objectes[].feature[].properties of this 'capa' (or into values[]). To know about v[0] etc see the explanation under 'component'. Use p['name'] to indicate the name of the property inside properties. You can also specify nomPropId to refer to the feature identifier (e.g. the feature id, in case of GeoJSON). Can only be used if there is capa.valors or capa.objectes. If you want to choose a value from another 'capa' use 'calcul' instead. Internally, 'FormulaConsulta' is transformed into 'calcul'.",
								"type": "string"
							},
							"separador": {
								"description": "Separator of the next block of attributes",
								"$ref": "#/definitions/StringOCadenaLang"
							},
							"esLink": {
								"description": "Is the attribute value a link?",
								"type": "boolean"
							},
							"descLink": {
								"description": "Description of the link",
								"$ref": "#/definitions/StringOCadenaLang"
							},
							"esImatge": {
								"description": "Is the attribute value a image URI?. This forces the attribute to appear as an embedded image in the query box",
								"type": "boolean"
							},
							"FormatVideo": {
								"description": "If the attribute is a link to a video, this is the video format. This forces the attribute to appear as an embedded video with a play button in the query box. It should be a MIME type. Example: video/mp4. optional",
								"type": "string",
								"format": "uri"
							},
							"mostrar": {
								"description": "Should it be shown in the query box? Can be 'si' (always), 'no' (never), 'si_ple' (it will only be displayed if the attribute has content).",
								"enum": ["si", "no", "si_ple"]
							},
							"mida": {
								"description": "Implementation pending (maxLength should be used instead of 'mida'). Attribute size. Optional. Maximum width the field type can have. In the case of numerical types it is the maximum precision. In the case of strings it is the maximum length in characters. In the case of date-time it is the maximum length in characters of the representation of the date-time as text.",
								"type": "number"
							},
							"pDecimals": {
								"description": "Implementation pending. Number of decimals places of the attribute. It only applies if the attribute is of type 'number'. Optional. (Note: do not confused with NDecimals, which is the number of decimals to display in the screen).",
								"type": "number"
							},
							"presentation": {
								"description": "It is the format in which we receive the value from the server. Currently it is only used for a very specific thing in the interpretation of dates. In the future it could be combined with to the JSON schema 'type' to indicate whether string, date, number, float... and 'format'.",
								"enum": ["dd/mm/yyyy"]
							},
							"NDecimals": {
								"description": "Number of decimal places to be displayed in the screen. Optional, when not indicated, precision is not truncated.",
								"type": "number",
								"minimum": 0,
								"maximum": 20,
								"multipleOf": 1
							},
							"serieTemporal": {
								"description": "The values of this attribute form a time series that will be displayed as a graph.",
								"type": "object",
								"required": ["color"],
								"properties": {
									"color": {
										"description": "Line color in the graph",
										"type": "string"
									}
								}
							}
						}
					},
					"StringOCadenaLang": {
						"description": "String or multilanguage object.",
						"oneOf": [
							{
								"type": ["string", "null"]
							},
							{
								"type": "object",
								"properties": {
									"cat": {
										"description": "CatalÃ ",
										"type": ["string", "null"]
									},
									"spa": {
										"description": "EspaÃ±ol",
										"type": ["string", "null"]
									},
									"eng": {
										"description": "English",
										"type": ["string", "null"]
									},
									"fre": {
										"description": "FranÃ§ais",
										"type": ["string", "null"]
									},
									"cze": {
										"description": "ÄeÅ¡tina",
										"type": ["string", "null"]
									},
									"ger": {
										"description": "Deutsch",
										"type": ["string", "null"]
									}
								}
							}
						]
					}
				}
			};
		}

		function GetGeoJSONStyles(data, selectedOptions) {
			var dataSorted = JSON.parse(JSON.stringify(data)), estil = [];

			//Sorted by variable.
			dataSorted.sort(function (a, b) {
				if (a[selectedOptions.variable] < b[selectedOptions.variable])
					return -1;
				if (a[selectedOptions.variable] > b[selectedOptions.variable])
					return 1;
				return 0;
			});
			var a, b, maximum;
			for (var i = 0, f = -1; i < dataSorted.length; i++) {
				a = dataSorted[i], b = dataSorted[i == 0 ? 0 : i - 1];
				if (i == 0 || a[selectedOptions.variable] != b[selectedOptions.variable]) {
					if (f >= 0)
						estil[f].simbols[0].simbol[0].icona.r = maximum > 0.001 ? 10 / maximum : 1;
					f++;
					maximum = a[selectedOptions.value];
					estil[f] = {
						"nom": null,
						"desc": a[selectedOptions.variableDescription],
						"DescItems": a[selectedOptions.variableUoMSymbol],
						"TipusObj": "P",
						"ItemLleg": [
							{
								"color": "#ff0000",
								"DescColor": a[selectedOptions.variableDescription]
							}
						],
						"ncol": 1,
						"simbols": [
							{
								"NomCampFEscala": a[selectedOptions.variable] + "_{time?f=ISO}",
								"simbol": [
									{
										"icona": {
											"type": "circle",
											"r": 1
										}
									}
								]
							}
						],
						"formes": [{
							"vora": {
								"paleta": {
									"colors": [
										"#ff0000"
									]
								}
							},
							"interior": {
								"paleta": {
									"colors": [
										"rgba(255,0,0,0.4)"
									]
								}
							}
						}],
						"fonts": {
							"NomCampText": a[selectedOptions.variable] + "_{time?f=ISO}",
							"aspecte": [
								{
									"font": {
										"font": "12px Verdana",
										"color": "#B50000",
										"align": "center",
										"i": 0,
										"j": -5
									}
								}
							]
						}
					};
				}
				else {
					if (maximum < a[selectedOptions.value])
						maximum = a[selectedOptions.value];
				}
			}
			if (f >= 0)
				estil[f].simbols[0].simbol[0].icona.r = maximum > 0.001 ? 10 / maximum : 1;
			return estil;
		}

		function GetGeoJSONDates(data, selectedOptions) {
			var dataSorted = JSON.parse(JSON.stringify(data)), datetimes = [];

			//Sorted by date (older first).
			dataSorted.sort(function (a, b) {
				if (a[selectedOptions.time] < b[selectedOptions.time])
					return -1;
				if (a[selectedOptions.time] > b[selectedOptions.time])
					return 1;
				return 0;
			});
			var a, b;
			for (var i = 0; i < dataSorted.length; i++) {
				a = dataSorted[i], b = dataSorted[i == 0 ? 0 : i - 1];
				if (i == 0 || a[selectedOptions.time] != b[selectedOptions.time])
					datetimes.push(a[selectedOptions.time]);
			}
			return datetimes;
		}

		function ShowSaveTableDialog(nodeId) {
			;   //Nothing to do
		}

		function PopulateSelectSaveLayerDialog(id, dataAttributes, selectedOption) {
			var s = "<select id=\"" + id + "Select" + "\">";
			for (var a = 0; a < dataAttributes.length; a++)
				s += "<option value=\"" + dataAttributes[a].name + "\"" + (dataAttributes[a].name == selectedOption ? "selected=\"selected\"" : "") + ">" + dataAttributes[a].name + "</option>";
			s += "</select>";
			document.getElementById(id).innerHTML = s;
		}

		function ShowSaveLayerDialogSelects(nodeId, descripUoM) {
			var nodeids = network.getConnectedNodes(nodeId, "from");
			if (nodeids && nodeids.length) {
				var data = networkNodes.get(nodeids[0]).STAdata;
				var dataAttributes = getDataAttributes(data), s, elem;
				PopulateSelectSaveLayerDialog("DialogSaveLayerPlace", dataAttributes, "FeatureOfInterest/description");
				PopulateSelectSaveLayerDialog("DialogSaveLayerLongitude", dataAttributes, "FeatureOfInterest/feature/coordinates_0");
				PopulateSelectSaveLayerDialog("DialogSaveLayerLatitude", dataAttributes, "FeatureOfInterest/feature/coordinates_1");
				PopulateSelectSaveLayerDialog("DialogSaveLayerTime", dataAttributes, "PhenomenonTime");
				PopulateSelectSaveLayerDialog("DialogSaveLayerVariable", dataAttributes, "Datastream/ObservedProperty/name");
				if (descripUoM) {
					document.getElementById("DialogSaveLayerVariableDescriptionUoM").style.display = "block";
					PopulateSelectSaveLayerDialog("DialogSaveLayerVariableDescription", dataAttributes, "Datastream/ObservedProperty/description");
					PopulateSelectSaveLayerDialog("DialogSaveLayerVariableDefinition", dataAttributes, "Datastream/ObservedProperty/definition");
					PopulateSelectSaveLayerDialog("DialogSaveLayerVariableUoM", dataAttributes, "Datastream/unitOfMeasurement/name");
					PopulateSelectSaveLayerDialog("DialogSaveLayerVariableUoMSymbol", dataAttributes, "Datastream/unitOfMeasurement/symbol");
					PopulateSelectSaveLayerDialog("DialogSaveLayerVariableUoMDefinition", dataAttributes, "Datastream/unitOfMeasurement/definition");
				}
				else
					document.getElementById("DialogSaveLayerVariableDescriptionUoM").style.display = "none";

				PopulateSelectSaveLayerDialog("DialogSaveLayerValue", dataAttributes, "result");
			}
		}

		function GetSelectedOptionsSaveLayer(descripUoM) {
			var selectedOptions = {};
			selectedOptions.place = document.getElementById("DialogSaveLayerPlaceSelect").value;
			selectedOptions.longitude = document.getElementById("DialogSaveLayerLongitudeSelect").value;
			selectedOptions.latitude = document.getElementById("DialogSaveLayerLatitudeSelect").value;
			selectedOptions.time = document.getElementById("DialogSaveLayerTimeSelect").value;
			selectedOptions.variable = document.getElementById("DialogSaveLayerVariableSelect").value;
			if (descripUoM) {
				selectedOptions.variableDescription = document.getElementById("DialogSaveLayerVariableDescriptionSelect").value;
				selectedOptions.variableDefinition = document.getElementById("DialogSaveLayerVariableDefinitionSelect").value;
				selectedOptions.variableUoM = document.getElementById("DialogSaveLayerVariableUoMSelect").value;
				selectedOptions.variableUoMSymbol = document.getElementById("DialogSaveLayerVariableUoMSymbolSelect").value;
				selectedOptions.variableUoMDefinition = document.getElementById("DialogSaveLayerVariableUoMDefinitionSelect").value;
			}
			selectedOptions.value = document.getElementById("DialogSaveLayerValueSelect").value;
			return selectedOptions;
		}

		function ShowSaveLayerDialog(nodeId) {
			ShowSaveLayerDialogSelects(nodeId, true);
			document.getElementById("DialogSaveLayerTitle").innerHTML = "Save table as GeoJSON";
			document.getElementById("DialogSaveLayerSave").innerHTML = "<button value=\"default\" onClick=\"SaveLayer(event)\">Save GeoJSON</button> " +
				"<button onClick=\"SaveLayerSchema(event)\">Save JSON Schema</button> " +
				"<button onClick=\"SaveLayerMetaschema(event)\">Save JSON Metaschema</button>";
		}

		function ShowOpenMapDialog(nodeId) {
			ShowSaveLayerDialogSelects(nodeId, true);
			document.getElementById("DialogSaveLayerTitle").innerHTML = "Open in the Map Browser";
			document.getElementById("DialogSaveLayerSave").innerHTML = "<button value=\"default\" onClick=\"OpenMap(event)\">Open</button>";
		}

		function SaveTable(event) {
			event.preventDefault(); // We don't want to submit this form
			var delimiter = document.getElementById("DialogSaveTableDelimiter").value;
			document.getElementById("DialogSaveTable").close();
			var nodeids = network.getConnectedNodes(currentNode.id, "from");
			if (nodeids && nodeids.length) {
				if (networkNodes.get(nodeids[0]))
					SaveLocalDataFile(Papa.unparse(StringifyObjectElements(networkNodes.get(nodeids[0]).STAdata), { quotes: false, quoteChar: '"', escapeChar: '"', delimiter: (delimiter ? delimiter : ";"), header: true, newline: "\r\n", skipEmptyLines: "greedy" }),
						(IdOfSTAEntity(networkNodes.get(nodeids[0])) == -1) ? "table" : STAEntitiesArray[IdOfSTAEntity(networkNodes.get(nodeids[0]))], ".csv", "application/vnd.ms-excel");   //https://stackoverflow.com/questions/7076042/what-mime-type-should-i-use-for-csv
			}
		}

		//https://csvw.org/
		//https://w3c.github.io/csvw/metadata/#dialect-descriptions
		function CreateCSVW(data, delimiter) {
			var dataAttributes = getDataAttributes(data);
			var csvw = {
				tableSchema: {
					"columns": []
				},
				"dialect": {
					"header": true,
					"delimiter": delimiter
				}
			};
			for (var a = 0; a < dataAttributes.length; a++) {
				csvw.tableSchema.columns.push({
					"name": dataAttributes[a].name,
					"datatype": getCSVWTypeFromAttributeType(dataAttributes[a].type),
				});
			}
			return csvw;
		}


		function SaveCSVW(event) {
			event.preventDefault(); // We don't want to submit this form
			var delimiter = document.getElementById("DialogSaveTableDelimiter").value;
			document.getElementById("DialogSaveTable").close();
			var nodeids = network.getConnectedNodes(currentNode.id, "from");
			if (nodeids && nodeids.length) {
				if (networkNodes.get(nodeids[0]))
					SaveLocalDataFile(JSON.stringify(CreateCSVW(networkNodes.get(nodeids[0]).STAdata, delimiter ? delimiter : ";"), null, "\t"),
						(IdOfSTAEntity(networkNodes.get(nodeids[0])) == -1 ? "table" : STAEntitiesArray[IdOfSTAEntity(networkNodes.get(nodeids[0]))]) + "_csvw", ".json", "application/json");   //https://stackoverflow.com/questions/7076042/what-mime-type-should-i-use-for-csv
			}
		}


		function SaveLayer(event) {
			event.preventDefault(); // We don't want to submit this form
			document.getElementById("DialogSaveLayer").close();
			var nodeids = network.getConnectedNodes(currentNode.id, "from");
			if (nodeids && nodeids.length) {
				if (networkNodes.get(nodeids[0]))
					SaveLocalDataFile(JSON.stringify(GetGeoJSON(networkNodes.get(nodeids[0]).STAdata, GetSelectedOptionsSaveLayer(false)), null, "\t"), "GeoJSON", ".geojson", "application/geo+json");
			}
		}

		function SaveLayerSchema(event) {
			event.preventDefault(); // We don't want to submit this form
			document.getElementById("DialogSaveLayer").close();
			var nodeids = network.getConnectedNodes(currentNode.id, "from");
			if (nodeids && nodeids.length) {
				if (networkNodes.get(nodeids[0]))
					SaveLocalDataFile(JSON.stringify(GetGeoJSONSchema(networkNodes.get(nodeids[0]).STAdata, GetSelectedOptionsSaveLayer(true)), null, "\t"), "JSON", ".json", "application/json");
			}
		}

		function SaveLayerMetaschema(event) {
			event.preventDefault(); // We don't want to submit this form
			document.getElementById("DialogSaveLayer").close();
			var nodeids = network.getConnectedNodes(currentNode.id, "from");
			if (nodeids && nodeids.length) {
				if (networkNodes.get(nodeids[0]))
					SaveLocalDataFile(JSON.stringify(GetGeoJSONMetaschema(), null, "\t"), "JSON", ".json", "application/json");
			}
		}


		function OpenMap(event) {
			event.preventDefault(); // We don't want to submit this form
			document.getElementById("DialogSaveLayer").close();
			var nodeids = network.getConnectedNodes(currentNode.id, "from");
			if (nodeids && nodeids.length) {
				if (networkNodes.get(nodeids[0])) {
					var selectedOptionsSaveLayer = GetSelectedOptionsSaveLayer(true);
					OpenMapMMN(location.href.substring(0, location.href.lastIndexOf("/")) + "/" + MMNpath + (MMNpath.indexOf('?') > 0 ? "&" : "?") + "reset=1", GetGeoJSON(networkNodes.get(nodeids[0]).STAdata, selectedOptionsSaveLayer), GetGeoJSONPropertiesSchema(networkNodes.get(nodeids[0]).STAdata, selectedOptionsSaveLayer), GetGeoJSONStyles(networkNodes.get(nodeids[0]).STAdata, selectedOptionsSaveLayer), GetGeoJSONDates(networkNodes.get(nodeids[0]).STAdata, selectedOptionsSaveLayer));
				}
			}
		}

		var MiraMonMapBrowserVars = {};

		function DisplayMapMMN() {
			MiraMonMapBrowserVars.mmn.postMessage("CommandMMNAddGeoJSONLayer('SensorThings API data', " + JSON.stringify(MiraMonMapBrowserVars.geojson) + ", " + JSON.stringify(MiraMonMapBrowserVars.geojsonSchema) + ", " + JSON.stringify(MiraMonMapBrowserVars.geojsonStyle) + ", " + JSON.stringify(MiraMonMapBrowserVars.geojsonDates) + ")", GetCleanURLMiraMonMapBrowser(MiraMonMapBrowserVars.mmnURL));
		}

		function OpenMapMMN(url, geojson, geojsonSchema, geojsonStyle, geojsonDates) {
			MiraMonMapBrowserVars.geojson = geojson;
			MiraMonMapBrowserVars.geojsonSchema = geojsonSchema;
			MiraMonMapBrowserVars.geojsonStyle = geojsonStyle;
			MiraMonMapBrowserVars.geojsonDates = geojsonDates;
			if (MiraMonMapBrowserVars.mmn)
				DisplayMapMMN();
			else {
				window.addEventListener("message", ProcessMessageFromMiraMonMapBrowser);
				MiraMonMapBrowserVars.mmnURL = url;
				MiraMonMapBrowserVars.mmn = window.open(url, "_blank", "width=1000,height=800");
			}
		}

		function ProcessMessageFromMiraMonMapBrowser(event) {
			if (!IsTrustedMiraMonMapBrowser(event, MiraMonMapBrowserVars.mmnURL))
				return;

			try {
				var data = JSON.parse(event.data);
			}
			catch (e) {
				document.getElementById("clarification").innerHTML = "JSON message parse error: " + e + " The response was:\n" + event.data;
				return;
			}

			if (data.msg === MMN_PM_IsListening) {
				document.getElementById("clarification").innerHTML = "MiraMon Map Browser is open and ready to show layers.";
				DisplayMapMMN();
				return;
			}

			if (data.msg === MMN_PM_Closed) {
				document.getElementById("clarification").innerHTML = "MiraMon Map Browser has been closed.";
				MiraMonMapBrowserVars.mmn = null;
				MiraMonMapBrowserVars.mmnURL = null;
				return;
			}
			/*if (data.msg === MMN_PM_CurrentLocationText)
			{
				MiraMonMapBrowserVars.currentLocText=data.text;
				return;
			}*/
		}

		function ShowTableSelectColumnsDialog(parentNodeId, nodeId) {
			var data = networkNodes.get(parentNodeId).STAdata,
				selectedColumns = networkNodes.get(nodeId).STASelectedColumns;

			if (!data || !data.length) {
				document.getElementById("DialogSelectColumnsHTML").innerHTML = "No data to show.";
				return;
			}
			var dataAttributes = getDataAttributes(data);

			var s = "<table>";
			for (var a = 0; a < dataAttributes.length; a++)
				s += "<tr><td><label><input type='checkbox'" + ((!selectedColumns || a >= selectedColumns.length || selectedColumns[a]) ? "checked='checked'" : "") + " id='SelectColumn_" + a + "' /> " + dataAttributes[a].name + "</label></td></tr>";
			s += "</table>";
			document.getElementById("DialogSelectColumnsHTML").innerHTML = s;
		}

		function ShowTableSelectExpandsDialog(nodeId, expandCheckboxes) {
			var node = networkNodes.get(nodeId);
			if (expandCheckboxes) {
				var data = node.STAdata,
					entities = STAEntities[STAEntitiesArray[IdOfSTAEntity(node)]].entities,
					selectedExpands = node.STASelectedExpands;

				if (!data || !data.length) {
					document.getElementById("DialogSelectExpandsCheckBoxes").innerHTML = "No data to show.";
					return;
				}

				var dataAttributes = selectedExpands ? selectedExpands.dataAttributesUnexpanded : getDataAttributes(data);

				var s = "<table>";
				for (var a = 0; a < dataAttributes.length; a++) {
					if (dataAttributes[a].name.endsWith("@iot.navigationLink")) {
						var da = dataAttributes[a].name.substring(0, dataAttributes[a].name.length - "@iot.navigationLink".length);
						for (var e = 0; e < entities.length; e++) {
							if (entities[e] == da) {
								s += "<tr><td><label><input type='checkbox'" + ((selectedExpands && a < selectedExpands.selected.length && selectedExpands.selected[a]) ? "checked='checked'" : "") + " id='SelectExpand_" + a + "' /> " + da + "</label></td></tr>";
								break;
							}
						}
					}
				}
				s += "</table>";
				document.getElementById("DialogSelectExpandsCheckBoxes").innerHTML = s;
				document.getElementById("DialogSelectExpandsHTML").style.display = "block";
			}
			else
				document.getElementById("DialogSelectExpandsHTML").style.display = "none";
			document.getElementById("SelectExpandsNumberOfRecords").value = node.STAExpectedLength;

		}

		function ShowTableSelectRowsDialog(nodeId) {
			var data = networkNodes.get(nodeId).STAdata;

			if (!data || !data.length) {
				document.getElementById("DialogSelectColumnsHTML").innerHTML = "No data to show.";
				return;
			}

			document.getElementById("DialogSelectRowsTableRadio").checked = true;
			document.getElementById("DialogSelectRowsTable").innerHTML = GetHTMLTable(data, false, true);

			document.getElementById("DialogSelectRowsFilterRadio").checked = false;
			document.getElementById("DialogSelectRowsFilter").innerHTML = "";
		}

		function ShowTableFilterRowsDialog(nodeId) {
			var data = networkNodes.get(nodeId).STAdata;
			var dataAttributes = getDataAttributes(data);

			if (!data || !data.length) {
				document.getElementById("DialogSelectRowsTable").innerHTML = "No data to show.";
				return;
			}

			document.getElementById("DialogSelectRowsTableRadio").checked = false;
			document.getElementById("DialogSelectRowsTable").innerHTML = "";

			document.getElementById("DialogSelectRowsFilterRadio").checked = true;
			document.getElementById("DialogSelectRowsFilter").innerHTML = GetSelectorsForRowFilter(nodeId); //funciÃ³ al marcar el radiobutton del Filter

			createSelectorRowFilters(dataAttributes, nodeId);
		}

		function ChangeTableFilterRowsDialog(nodeId) {
			if (document.getElementById("DialogSelectRowsTableRadio").checked)
				ShowTableSelectRowsDialog(nodeId);
			else
				ShowTableFilterRowsDialog(nodeId);
		}

		function SeparatePropertyIfNeeded(record, property, baseName) {
			if (typeof property === "object" && property !== null)  //"arrays" and 'null' are also objects. 
			{
				if (Array.isArray(property)) {
					//Array: creating multifields
					for (var j = 0; j < property.length; j++) {
						if (typeof property[j] === "object") {
							if (Array.isArray(property[j])) {
								for (var jj = 0; jj < property[j].length; jj++)
									SeparatePropertyIfNeeded(record, property[j][jj], baseName + "_" + j + "_" + jj);
							}
							else {
								var subkeys = Object.keys(property[j]);
								for (var kk = 0; kk < subkeys.length; kk++)
									SeparatePropertyIfNeeded(record, property[j][subkeys[kk]], baseName + "/" + subkeys[kk] + "_" + j)
							}
						}
						else
							record[baseName + "_" + j] = property[j];
					}
				}
				else {
					//Object; lets separate it.
					var subkeys = Object.keys(property);
					for (var kk = 0; kk < subkeys.length; kk++)
						SeparatePropertyIfNeeded(record, property[subkeys[kk]], baseName + "/" + subkeys[kk])
				}
			}
			else
				record[baseName] = property;
		}

		function SeparateColumns(node, parentNode) {
			var data = parentNode.STAdata, record, recordParent;
			node.STAURL = parentNode.STAURL;
			node.STAExpectedLength = parentNode.STAExpectedLength;
			node.STAdata = [];
			for (var i = 0; i < data.length; i++) {
				record = node.STAdata[i] = {};
				recordParent = data[i]
				var keys = Object.keys(recordParent);
				for (var k = 0; k < keys.length; k++)
					SeparatePropertyIfNeeded(record, recordParent[keys[k]], keys[k]);
			}
			networkNodes.update(node);
		}

		function StartCircularImage(nodeTo, nodeFrom, calUnir) {
			if (nodeFrom.STAURL && IdOfSTAEntity(nodeTo) != -1) {
				nodeTo.STAURL = nodeFrom.STAURL + "/" + STAEntitiesArray[IdOfSTAEntity(nodeTo)];
				nodeTo.STAExpectedLength = nodeFrom.STAExpectedLength;

				networkNodes.update(nodeTo);
				if (calUnir)
					networkEdges.add([{ from: nodeFrom.id, to: nodeTo.id }]);
				LoadJSONData(nodeTo);
				return true;
			}
			if (nodeFrom.STAURL && IdOfSTASpecialQueries(nodeTo) != -1) {
				nodeTo.STAURL = nodeFrom.STAURL + "/" + STASpecialQueries[STASpecialQueriesArray[IdOfSTASpecialQueries(nodeTo)]].query;
				nodeTo.STAExpectedLength = nodeFrom.STAExpectedLength;
				networkNodes.update(nodeTo);
				if (calUnir)
					networkEdges.add([{ from: nodeFrom.id, to: nodeTo.id }]);
				LoadJSONData(nodeTo);
				return true;
			}
			if (nodeFrom.STAURL && (nodeTo.image == "SelectColumns.png" || nodeTo.image == "SelectRows.png")) {
				nodeTo.STAURL = nodeFrom.STAURL;
				nodeTo.STAExpectedLength = nodeFrom.STAExpectedLength;
				networkNodes.update(nodeTo);
				if (calUnir)
					networkEdges.add([{ from: nodeFrom.id, to: nodeTo.id }]);
				LoadJSONData(nodeTo);
				return true;
			}
			if (nodeFrom.STAURL && (nodeTo.image == "SeparateColumns.png")) {
				if (calUnir)
					networkEdges.add([{ from: nodeFrom.id, to: nodeTo.id }]);
				SeparateColumns(nodeTo, nodeFrom);
				return true;
			}
			return false;
		}

		// create an array with nodes
		var networkNodes = new vis.DataSet([]);

		// create an array with edges
		var networkEdges = new vis.DataSet([]);

		var network = new vis.Network(document.getElementById("mynetwork"), {
			nodes: networkNodes,
			edges: networkEdges
		},
			{
				interaction: { hover: true },
				manipulation: {  //https://stackoverflow.com/questions/39701703/add-edge-dynamically-visjs
					enabled: false,
					addEdge: function (data, callback) {
						console.log('add edge', data);
						if (data.from == data.to)
							alert("Connection to the same node is not allowed");
						else {
							networkEdges.add([{ from: data.from, to: data.to }]);
							StartCircularImage(networkNodes.get(data.to), networkNodes.get(data.from), false);
						}
						connectionInProcess = false;
						document.getElementById("clarification").innerHTML = "";
					}
				}
			});

		/*network.on("click", function (params) {
			params.event = "[original event]";
			document.getElementById("eventSpanHeading").innerText = "Click event:";
			document.getElementById("eventSpanContent").innerText = JSON.stringify(params, null, 4);
			console.log("click event, getNodeAt returns: " + this.getNodeAt(params.pointer.DOM));
		});*/
		network.on("doubleClick", function (params) {
			/*params.event = "[original event]";
			document.getElementById("eventSpanHeading").innerText = "doubleClick event:";
			document.getElementById("eventSpanContent").innerText = JSON.stringify(params, null, 4);*/
			if (params.nodes && params.nodes.length && !connectionInProcess) {
				currentNode = networkNodes.get(params.nodes[0])
				if (currentNode.image == "ogc.png") {
					document.getElementById("DialogSTAURLInput").value = currentNode.STAURL;
					document.getElementById("DialogSTAURLInput").readOnly = false;
					document.getElementById("DialogSTAURL").showModal();
				}
				else if (currentNode.image == "ViewQuery.png") {
					document.getElementById("DialogSTAURLInput").value = "";
					var nodeids = network.getConnectedNodes(currentNode.id, "from");
					if (nodeids && nodeids.length) {
						if (networkNodes.get(nodeids[0]))
							document.getElementById("DialogSTAURLInput").value = networkNodes.get(nodeids[0]).STAURL;
					}
					document.getElementById("DialogSTAURLInput").readOnly = true;
					document.getElementById("DialogSTAURL").showModal();
				}
				else if (currentNode.image == "Table.png") {
					///Determining the parent node.
					var nodeids = network.getConnectedNodes(currentNode.id, "from");
					if (nodeids && nodeids.length) {
						if (networkNodes.get(nodeids[0])) {
							var data = networkNodes.get(nodeids[0]).STAdata;
							if (data && data.length)
								document.getElementById("DialogOKOptions").innerHTML = "<label><input type='checkbox' checked='checked' id='ShowTableRowNumberDialogOK' onChange='ShowTableDialog(\"" + nodeids[0] + "\");'/> Show row numbers</label>";
							else
								document.getElementById("DialogOKOptions").innerHTML = "";
							ShowTableDialog(nodeids[0]);
						}
						document.getElementById("DialogOK").showModal();
					}
				}
				else if (currentNode.image == "SaveTable.png") {
					ShowSaveTableDialog(currentNode.id);
					document.getElementById("DialogSaveTable").showModal();
				}
				else if (currentNode.image == "SaveLayer.png") {
					ShowSaveLayerDialog(currentNode.id);
					document.getElementById("DialogSaveLayer").showModal();
				}
				else if (currentNode.image == "OpenMap.png") {
					ShowOpenMapDialog(currentNode.id);
					document.getElementById("DialogSaveLayer").showModal();
				}
				else if (currentNode.image == "SelectColumns.png") {
					//Determining the parent node.
					var nodeids = network.getConnectedNodes(currentNode.id, "from");
					if (nodeids && nodeids.length) {
						if (networkNodes.get(nodeids[0]) && networkNodes.get(nodeids[0]).STAURL)
							ShowTableSelectColumnsDialog(nodeids[0], currentNode.id);

						document.getElementById("DialogSelectColumns").showModal();
					}
				}
				else if (currentNode.image == "SelectRows.png") {
					//Determining the parent node.
					var nodeids = network.getConnectedNodes(currentNode.id, "from");
					if (nodeids && nodeids.length) {
						if (networkNodes.get(nodeids[0]) && networkNodes.get(nodeids[0]).STAURL) {
							document.getElementById("DialogSelectRowsTableInputSpan").innerHTML = "<label><input type='radio' name='DialogSelectRowsRadio' id='DialogSelectRowsTableRadio' checked='checked' onClick='ChangeTableFilterRowsDialog(\"" + nodeids[0] + "\")'/> Select an element:</label>";
							document.getElementById("DialogSelectRowsFilterInputSpan").innerHTML = "<label><input type='radio' name='DialogSelectRowsRadio' id='DialogSelectRowsFilterRadio' onClick='ChangeTableFilterRowsDialog(\"" + nodeids[0] + "\")'/>  Filter:</label>";
							ShowTableSelectRowsDialog(nodeids[0]);
						}
						document.getElementById("DialogSelectRows").showModal();
					}
				}
				else if (IdOfSTAEntity(currentNode) != -1) {
					//Offering expand
					ShowTableSelectExpandsDialog(currentNode.id, true);
					document.getElementById("DialogSelectExpands").showModal();
				}
				else if (IdOfSTASpecialQueries(currentNode) != -1) {
					ShowTableSelectExpandsDialog(currentNode.id, false);
					document.getElementById("DialogSelectExpands").showModal();
				}
			}
		});
		network.on("oncontext", function (params) {
			params.event.preventDefault();  //https://stackoverflow.com/questions/38258940/open-an-extension-popup-html-list-on-right-click-of-node-contextmenu-in-visj

			var nodeId = network.getNodeAt(params.pointer.DOM); //params.nodes is not useful here as params.nodes are the selected ones and not the ones rightclicked.
			if (nodeId) {
				startingNodeContextId = nodeId;
				document.getElementById("DialogContextMenu").showModal();
			}
			/*params.event = "[original event]";
			document.getElementById("eventSpanHeading").innerText = "oncontext (right click) event:";
			document.getElementById("eventSpanContent").innerText = JSON.stringify(params, null, 4);*/
		});
		/*network.on("dragStart", function (params) {
			// There's no point in displaying this event on screen, it gets immediately overwritten
			params.event = "[original event]";
			console.log("dragStart Event:", params);
			console.log("dragStart event, getNodeAt returns: " + this.getNodeAt(params.pointer.DOM));
		});
		network.on("dragging", function (params) {
			params.event = "[original event]";
			document.getElementById("eventSpanHeading").innerText = "dragging event:";
			document.getElementById("eventSpanContent").innerText = JSON.stringify(params, null, 4);
		});
		network.on("dragEnd", function (params) {
			params.event = "[original event]";
			document.getElementById("eventSpanHeading").innerText = "dragEnd event:";
			document.getElementById("eventSpanContent").innerText = JSON.stringify(params, null, 4);
			console.log("dragEnd Event:", params);
			console.log("dragEnd event, getNodeAt returns: " + this.getNodeAt(params.pointer.DOM));
		});
		network.on("controlNodeDragging", function (params) {
			params.event = "[original event]";
			document.getElementById("eventSpanHeading").innerText = "control node dragging event:";
			document.getElementById("eventSpanContent").innerText = JSON.stringify(params, null, 4);
		});
		network.on("controlNodeDragEnd", function (params) {
			params.event = "[original event]";
			document.getElementById("eventSpanHeading").innerText = "control node drag end event:";
			document.getElementById("eventSpanContent").innerText = JSON.stringify(params, null, 4);
			console.log("controlNodeDragEnd Event:", params);
		});
		network.on("zoom", function (params) {
			document.getElementById("eventSpanHeading").innerText = "zoom event:";
			document.getElementById("eventSpanContent").innerText = JSON.stringify(params, null, 4);
		});
		network.on("showPopup", function (params) {
			document.getElementById("eventSpanHeading").innerText = "showPopup event: ";
			document.getElementById("eventSpanContent").innerText = JSON.stringify(params, null, 4);
		});
		network.on("hidePopup", function () {
			console.log("hidePopup Event");
		});
		network.on("select", function (params) {
			console.log("select Event:", params);
		});
		network.on("selectNode", function (params) {
			console.log("selectNode Event:", params);
		});
		network.on("selectEdge", function (params) {
			console.log("selectEdge Event:", params);
		});
		network.on("deselectNode", function (params) {
			console.log("deselectNode Event:", params);
		});
		network.on("deselectEdge", function (params) {
			console.log("deselectEdge Event:", params);
		});
		network.on("hoverNode", function (params) {
			console.log("hoverNode Event:", params);
		});
		network.on("hoverEdge", function (params) {
			console.log("hoverEdge Event:", params);
		});
		network.on("blurNode", function (params) {
			console.log("blurNode Event:", params);
		});
		network.on("blurEdge", function (params) {
			console.log("blurEdge Event:", params);
		});*/


		function addCircularImage(event, dialog, label, image) {
			if (event)
				event.preventDefault(); // We don't want to submit this form
			if (dialog)
				document.getElementById(dialog).close();
			var newId = (Math.random() * 1e7).toString(32);
			var node = { id: newId, label: label, image: image, shape: "circularImage" };

			if (image == "ogc.png") {
				node.STAURL = STAurl;
				node.STAExpectedLength = 100;
				networkNodes.add(node);
				LoadJSONData(node);
			}
			else if (!startingNodeContextId || !StartCircularImage(node, networkNodes.get(startingNodeContextId), true)) {
				networkNodes.add(node);
				networkEdges.add([{ from: startingNodeContextId, to: newId }]);
			}

			if (startingNodeContextId)
				startingNodeContextId = null;

			network.selectNodes([newId]);
		}

		function removeCircularImage(event, dialog) {
			if (event)
				event.preventDefault(); // We don't want to submit this form
			if (dialog)
				document.getElementById(dialog).close();
			if (startingNodeContextId) {
				networkNodes.remove(startingNodeContextId);
				startingNodeContextId = null;
			}
		}

		function addEdge() {
			network.addEdgeMode();
			connectionInProcess = true;
			document.getElementById("clarification").innerHTML = "Press the mouse botton on the starting node, and drag and drop the mouse on the end node.";
		}
		function giveMeNodeInformation(event) {
			console.log(event);
			if (event)
				event.preventDefault(); // We don't want to submit this form
			document.getElementById("DialogSelectColumns").close();

			if (startingNodeContextId) {
				console.log(startingNodeContextId);
				console.log(currentNode);

			}
		}

		function giveMeNetworkInformation(event) {
			if (event)
				event.preventDefault(); // We don't want to submit this form
			document.getElementById("DialogSelectColumns").close();
			console.log(networkNodes);
		}

	</script>

</body>

</html>