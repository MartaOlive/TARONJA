<html>
<head>
<script>
"use strict"

////////////////////////////////////NOVA TAULAAAAAAAAAAAAAAAAAAAAA////////////////////
var conditionsFilter=[ //valors de la taula
	{property: "A"},
	{property: "B"},
	{property: "C"},
	{property: "D"},
	{property: "E"},
	{property: "F"}
]

var elemFilter={ //estctura de la taula
	elems: [
		{
			elems: [
				{
					elems: [0, 1],
					nexus: "or"
				},
				{
					elems: [2],
					nexus: null
				},
				{
					elems: [5],
					nexus: null
				}
			],
			nexus: "and"
		},
		{
			elems: [
				{
					elems: [3, 4],
					nexus: "or"
				}
			]
		}
	],
	nexus: "or"
}

function ChangeConditionFilterTable(elem, iConNew, iConCurrent)
{
	if (typeof elem === "object")
	{
		for (var i=0; i<elem.elems.length; i++)
			if (ChangeConditionFilterTable(elem.elems[i], iConNew, iConCurrent))
				elem.elems[i]=iConNew;
	}
	else
	{
		if (elem==iConCurrent)
			return true //doIt
	}
	return false;
}

function MoveDownFilterCondition(iCon)
{
	alert(GiveNextConditionNextBoxFilterTable(elemFilter, iCon));	
}

function GiveNextConditionNextBoxFilterTable(elem, iCon)
{
	LookForNextConditionNextBoxFilterTableFound=0;
	return LookForNextConditionNextBoxFilterTable(elem, iCon);
}

//DOwn button
var LookForNextConditionNextBoxFilterTableFound;
function LookForNextConditionNextBoxFilterTable(elem, iCon)
{
	var next;
	if (typeof elem === "object")
	{
		for (var i=0; i<elem.elems.length; i++){
			next=LookForNextConditionNextBoxFilterTable(elem.elems[i], iCon);
			if (-1!=next)
				return next;
			if (LookForNextConditionNextBoxFilterTableFound==1){
				LookForNextConditionNextBoxFilterTableFound=2;
				break;
			}
		}
	}
	else
	{
		if (elem==iCon)
			LookForNextConditionNextBoxFilterTableFound=1;
		else if (LookForNextConditionNextBoxFilterTableFound!=0)
			return elem;
	}
	return -1;
}

function GiveNextConditionFilterTable(elem, iCon)
{
	LookForNextConditionFilterTableFound=false;
	return LookForNextConditionFilterTable(elem, iCon);
}
 

var LookForNextConditionFilterTableFound;
function LookForNextConditionFilterTable(elem, iCon)
{
	var next;
	if (typeof elem === "object")
	{
		for (var i=0; i<elem.elems.length; i++){
			next=LookForNextConditionFilterTable(elem.elems[i], iCon);
			if (-1!=next)
				return next;
		}
	}
	else
	{
		if (elem==iCon)
			LookForNextConditionFilterTableFound=true;
		else if (LookForNextConditionFilterTableFound)
			return elem;
	}
	return -1;
}

function MoveUpFilterCondition(iCon)
{
	alert(GivePreviousConditionFilterTable(elemFilter, iCon));
}

function GivePreviousConditionFilterTable(elem, iCon)
{
	LookForPreviousConditionFilterTableFound=false;
	return LookForPreviousConditionFilterTable(elem, iCon);
}

//up button
var LookForPreviousConditionFilterTableFound; 
function LookForPreviousConditionFilterTable(elem, iCon)
{
	var prev;
	if (typeof elem === "object")
	{
		for (var i=elem.elems.length-1; i>=0; i--){
			prev=LookForPreviousConditionFilterTable(elem.elems[i], iCon);
			if (-1!=prev)
				return prev;
		}
	}
	else
	{
		if (elem==iCon)
			LookForPreviousConditionFilterTableFound=true;
		else if (LookForPreviousConditionFilterTableFound)
			return elem;
	}
	return -1;
}

function GetFilterCondition(elem)
{
	return conditionsFilter[elem].property + '<button onClick="MoveDownFilterCondition(' + elem + ')">Down</button> <button onClick="MoveUpFilterCondition(' + elem + ')">Up</button>';
}

function GetFilterTable(elem) //COnstrucio taula //El segon, serà cridat per el ShowFilter
{
	var s='<table border="1"><tr><td>';
	if (typeof elem === "object")
	{
		for (var i=0; i<elem.elems.length; i++){  	
			s+=GetFilterTable(elem.elems[i]);
		}
		if (elem.elems.length<2 && elem.nexus)
			alert("Wrong encoding, an array of one condition cannot have a nexus. Autocorrected.");
		else if (elem.nexus)
			s+='</td><td valign="middle">'+elem.nexus;
	}
	else
		s+=GetFilterCondition(elem);
	s+='</td></tr></table>';
	return s;
}

function ShowFilterTable() //posar la taula on sigui //El que inicia la taula
{
	document.getElementById("tableFilter").innerHTML=GetFilterTable(elemFilter);
}

</script>
</head>
 <body ></body>
	<!--onLoad="ShowFilterTable();"> -->
<div id="tableFilter"></div>
<div>
	<table>
		<tr>
			<td></tr>
		</tr>
	</table>
</div>
</body>
</html>



function addNewElement(elem, nodeId) {
	var elements = elem.elems;
	var lastNumber = conditionsFilter[conditionsFilter.length - 1].number;
	var nextNumber = parseInt(lastNumber) + 1; //per els que estan dins del 0_...
	if (elem.boxName.charAt(0) != 0) {//grups que no són el 0 i han de crear un grup i no un element
		var newBoxName = elem.boxName;
		var firstNumberBoxNameInside = parseInt(elem.boxName.charAt(0)) - 1; //primer número:grup interior
		//buscar, fer split , ordenar i lultim, mes un i afegir al boxNames
		//console.log(boxNames)
		var boxNamesFiltered = boxNames.filter(element => element.charAt(0) == firstNumberBoxNameInside); //filtrar ls que exsteixen ja del grup que es crearà
		//console.log(boxNamesFiltered);//!!!!!!!!!!!!!!!!!!!!!!!!!!
		var nextBoxNumber = parseInt(boxNamesFiltered[boxNamesFiltered.length - 1].charAt(2)) + 1; //agafes l'ultim i li sumes un per fer el seguent
		var newBoxName = firstNumberBoxNameInside + "_" + nextBoxNumber;
		//console.log(newBoxName)
		if (elem.boxName.charAt(0) != 1) {
			elements.push( //lhe de posar a la mateixa altura
				{
					elems: [],
					nexus: null,
					boxName: newBoxName,
				}
			);
		} else { //1 farà un 0 i per tant pot crear un nou
			elements.push( //lhe de posar a la mateixa altura
				{
					elems: [nextNumber], //nivell 1
					nexus: null,
					boxName: newBoxName,
				})
		}
		boxNames.push(newBoxName)
		//console.log(boxNames)
		//Si es el segon sha de crear un nivell superior i canvia el nexus q no sigui null
	}
	else { //dins de grup 0_...
		elements.push(nextNumber); //add to elem array
	}
	if (elements.length == 2) { //change nexus if pass from one to two
		elem.nexus = "and"
	}
	conditionsFilter.push({ //add to conditionsFilter
		property: "<div id='optionsRow_" + nextNumber + "'></div>",
		number: nextNumber
	})
	//agafar els valors dels selectors i actualitzar una variable externa 
	takeSelectInformation(nodeId);
	//console.log(elemFilter)
	//tornar a pintar els selects
	drawTableAgain(nodeId)
}
