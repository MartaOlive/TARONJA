<!DOCTYPE html>
<html lang="en">

<head>

	<title>TAPIS: Tables from APIs for Sensors (Sensor Things API plus Explorer)</title>
	<script type="text/javascript" src="vis.min.js"></script>
	<style type="text/css">
		#mynetwork {
			width: 600px;
			height: 400px;
			border: 1px solid lightgray;
		}

		body {
			font-family: Arial
		}

		.tablesmall {
			font-size: 0.5em;
			border-collapse: collapse;
			border-spacing: 0px;
		}

		.th_compact {
			padding-top: 1px;
			padding-bottom: 1px;
		}

		.td_compact {
			padding-top: 1px;
			padding-bottom: 1px;
		}

		.tr_compact:nth-child(even) {
			background-color: #DCDCCA;
		}

		.tr_compact:nth-child(odd) {
			background-color: #EEEEEB;
		}

		.center {
			margin: 0 auto;
			text-align: center;
		}
        
		.divSelectorRowsFilter {
			margin-top: 20px;
			width: 300px;
			height: 300px;
		}
	</style>
	<link rel="stylesheet" href="vis.min.css">


</head>

<body onLoad="StartSTAPage();">
	<h2>TAPIS: Tables from APIs for Sensors (Sensor Things API plus Explorer)</h2>

	<button onclick='addCircularImage(null, null, "STAplus", "ogc.png");'><img src="ogc.png" height="20"
		valign="middle"> Add a STA service</button><br>
	<span id="ButtonsSTAObjects"></span>
	<button onclick="addEdge();">Connect two nodes</button><br>

	<div id="clarification"></div>

	<div id="mynetwork"></div>

	<dialog id="DialogSTAURL">
		<form>
			<p>
				<label>STA service URL:
					<input type="text" id="DialogSTAURLInput" size="100"></input>
				</label>
			</p>
			<div class="center">
				<button value="default" onClick="GetSTAURL(event)">OK</button>
				<button value="cancel" formmethod="dialog">Cancel</button>
			</div>
		</form>
	</dialog>

	<dialog id="DialogSelectColumns">
		<form>
			Select Columns:
			<span id="DialogSelectColumnsHTML">
			</span>
			<div class="center">
				<button value="default" onClick="GetSelectColumns(event)">OK</button>
				<button value="cancel" formmethod="dialog">Cancel</button>
			</div>
		</form>
	</dialog>

	<dialog id="DialogSelectRows">
		<form>
			<span id="DialogSelectRowsTableInputSpan">
			</span>
			<span id="DialogSelectRowsTable">
			</span>
			<br>
			<span id="DialogSelectRowsFilterInputSpan">
			</span>
			<span id="DialogSelectRowsFilter">
			</span>
			<div class="center">
				<button value="default" onClick="GetSelectRows(event)">OK</button>
				<button value="cancel" formmethod="dialog">Cancel</button>
			</div>
		</form>
	</dialog>

	<dialog id="DialogContextMenu">
		<form>
			<p>
				<button onclick='addCircularImage(event, "DialogContextMenu", "STAplus", "ogc.png");'><img src="ogc.png"
						height="20" valign="middle"> Add a STA service</button><br>
				<span id="ButtonsContextMenuObjects"></span>
				<button onclick='removeCircularImage(event, "DialogContextMenu")'>Remove</button><br>
                <button onclick='giveMeNodeInformation(event, "DialogContextMenu")'>Node Info</button><br>
				<button onclick='giveMeNetworkInformation(event, "DialogContextMenu")'>Network Info</button><br>
            </p>
			<div class="center">
				<button value="cancel" onClick="startingNodeContextId=null;" formmethod="dialog">Cancel</button>
			</div>
		</form>
	</dialog>


	<dialog id="DialogOK">
		<form>
			<span id="DialogOKOptions"></span><br>
			<span id="DialogOKHTML">
			</span>
			<div class="center">
				<button value="cancel" formmethod="dialog">OK</button>
			</div>
		</form>
	</dialog>

	<h2 id="eventSpanHeading"></h2>
	<pre id="eventSpanContent"></pre>

	<script type="text/javascript">

		"use strict"

		window.onbeforeunload = function () { return "Your work will be lost."; }

		var currentNode = null, connectionInProcess = false, startingNodeContextId = null;
		const STAObjects = ["ObservedProperties", "Sensors", "Observations", "FeaturesOfInterest", "Things", "Locations", "HistoricalLocations", "Projects", "Licenses", "Parties", "Groups", "Relations", "Datastreams", "MultiDatastreams"];
		const TableOperations = ["Table", "SelectColumns", "SelectRows", "ViewQuery"];
		const TableOperationsDesc = ["View Table", "Select Columns", "Select Rows", "View Query"];

		function StartSTAPage()  //Creates the buttons for the main page and the context menu. 
		{
			var s = "";

			for (var i = 0; i < STAObjects.length; i++)
				s += "<button onclick='addCircularImage(null, null, \"" + STAObjects[i] + "\", \"" + STAObjects[i] + ".png\");'><img src='" + STAObjects[i] + ".png' height='20' valign='middle'> " + STAObjects[i] + "</button> ";
			s += "<br>";
			for (var i = 0; i < TableOperations.length; i++)
				s += "<button onclick='addCircularImage(null, null, \"" + TableOperations[i] + "\", \"" + TableOperations[i] + ".png\");'><img src='" + TableOperations[i] + ".png' height='20' valign='middle'> " + TableOperationsDesc[i] + "</button> ";
			s += "<br>";

			document.getElementById("ButtonsSTAObjects").innerHTML = s;

			s = "";
			for (var i = 0; i < STAObjects.length; i++)
				s += "<button onclick='addCircularImage(event, \"DialogContextMenu\", \"" + STAObjects[i] + "\", \"" + STAObjects[i] + ".png\");'><img src='" + STAObjects[i] + ".png' height='20' valign='middle'> " + STAObjects[i] + "</button><br>";
			s += "<br>";
			for (var i = 0; i < TableOperations.length; i++)
				s += "<button onclick='addCircularImage(event, \"DialogContextMenu\", \"" + TableOperations[i] + "\", \"" + TableOperations[i] + ".png\");'><img src='" + TableOperations[i] + ".png' height='20' valign='middle'> " + TableOperationsDesc[i] + "</button><br>";

			document.getElementById("ButtonsContextMenuObjects").innerHTML = s;
		}

		//https://web.dev/fetch-api-error-handling/
		async function LoadJSONData(node) {
			var response, jsonData;
			try {
				response = await fetch(node.STAURL);
			}
			catch (error) {
				document.getElementById("clarification").innerHTML = 'Error getting ' + node.STAURL + ": " + error.message;
				console.log('There was an error', error);
				node.STAdata = null;
				networkNodes.update(node);
				return;
			}
			// Uses the 'optional chaining' operator
			if (!(response?.ok)) {  //With this operator is response is not defined it also works
				document.getElementById("clarification").innerHTML = "HTTP Response Code: " + response?.status + " reading <small>" + node.STAURL + "</small>: " + response?.statusText;
				console.log("HTTP Response Code: " + response?.status + ": " + response?.statusText);
				node.STAdata = null;
				networkNodes.update(node);
				return;
			}
			try {
				jsonData = await response.json();
			} catch (error) {
				if (error instanceof SyntaxError) {
					document.getElementById("clarification").innerHTML = 'Syntax error reading ' + node.STAURL + ": " + error.message;
					console.log('There was a SyntaxError', error);
					node.STAdata = null;
					networkNodes.update(node);
					return;
				}
				else {
					document.getElementById("clarification").innerHTML = 'Error interpreting ' + node.STAURL + ": " + error.message;
					console.log('There was an error', error);
					node.STAdata = null;
					networkNodes.update(node);
					return;
				}
			}
			node.STAdata = (jsonData.value) ? jsonData.value : [jsonData];
			networkNodes.update(node);
		}

		function GetSTAURL(event) {
			event.preventDefault(); // We don't want to submit this form
			document.getElementById("DialogSTAURL").close(document.getElementById("DialogSTAURLInput").value);

			if (currentNode.STAURL == document.getElementById("DialogSTAURLInput").value)
				return;

			currentNode.STAURL = document.getElementById("DialogSTAURLInput").value; // Have to send the select box value here.
			if (currentNode.STAURL.charAt(currentNode.STAURL.length - 1) == '/')
				currentNode.STAURL = currentNode.STAURL.slice(0, -1);  //remove last character
			networkNodes.update(currentNode);	//https://visjs.github.io/vis-data/data/dataset.html#Data_Manipulation
			LoadJSONData(currentNode);

			//if childen nodes have also STAURL
			UpdateChildenSTAURL(currentNode);
		}

		function GetSelectColumns(event) {
			event.preventDefault(); // We don't want to submit this form
			document.getElementById("DialogSelectColumns").close();

			var nodeids = network.getConnectedNodes(currentNode.id, "from");
			if (nodeids && nodeids.length && networkNodes.get(nodeids[0])) {
				var node = networkNodes.get(nodeids[0]);
				if (node.STAURL)
					currentNode.STAURL = node.STAURL;
				if (node.STAdata)
					currentNode.STAdata = node.STAdata;
			}
			currentNode.STASelectedColumns=[];
			var dataAttributes = getDataAttributes(currentNode.STAdata);
			for (var a = 0; a < dataAttributes.length; a++) {
				if (!document.getElementById("SelectColumn_" + a).checked)
					break;
			}
			if (a < dataAttributes.length) //A checked attribute has been found ("for" breaks before ending).
			{
				var s;
				currentNode.STAURL += "?$select="
				for (var a = 0; a < dataAttributes.length; a++) {
					if (document.getElementById("SelectColumn_" + a).checked) {
						if (dataAttributes[a].startsWith("@iot."))
							s = dataAttributes[a].substring(5);
						else
							s = dataAttributes[a].replace("@iot.", "/");  //Changes Datastreams@iot.navigationLink to Datastreams/navigationLink
						currentNode.STAURL += s + ",";
						currentNode.STASelectedColumns[a]=true;
					}
					else
						currentNode.STASelectedColumns[a]=false;
				}
				currentNode.STAURL = currentNode.STAURL.slice(0, -1); //remove the last coma.	
				networkNodes.update(currentNode);
				LoadJSONData(currentNode);
				UpdateChildenSTAURL(currentNode);
			}
			else   //If no selected collumn has been found, no filter is done and all collumns are selected
			{
				for (var a = 0; a < dataAttributes.length; a++) {
					currentNode.STASelectedColumns[a]=true;
				}
			}
		}

		function isNumeric(str) {
			if (typeof str != "string") return false // we only process strings!  	
			return !isNaN(str) && // use type coercion to parse the _entirety_ of the string (`parseFloat` alone does not do this)...
				!isNaN(parseFloat(str)) // ...and ensure strings of whitespace fail
		}

		function GetSelectRows(event) {
			event.preventDefault(); // We don't want to submit this form
			document.getElementById("DialogSelectRows").close();

			var nodeids = network.getConnectedNodes(currentNode.id, "from");
			if (nodeids && nodeids.length && networkNodes.get(nodeids[0])) {
				var node = networkNodes.get(nodeids[0]);
				if (node.STAURL)
					currentNode.STAURL = node.STAURL;
				if (node.STAdata)
					currentNode.STAdata = node.STAdata;
			}

			if (document.getElementById("DialogSelectRowsTableRadio").checked) {
				var elems = document.getElementsByName("SelectRowRadio");
				for (var i = 0; i < elems.length; i++) {
					if (elems[i].checked)
						break;
				}
				if (i < elems.length) {
					const s = elems[i].id.substring("SelectRow_".length);
					const n = Number(s);
					if (Number.isInteger(n))
						currentNode.STAURL += "(" + n + ")";
					else
						currentNode.STAURL += "(\"" + s + "\")";
				}
			}
			else {
				alert("TBD");
			}
			networkNodes.update(currentNode);
			LoadJSONData(currentNode);
			UpdateChildenSTAURL(currentNode);
		}


		function IdOfSTAObject(node) {
			for (var i = 0; i < STAObjects.length; i++) {
				if (node.image == STAObjects[i] + ".png")
					return i;
			}
			return -1;
		}

		function UpdateChildenSTAURL(parentNode) {
			var nodeIds = network.getConnectedNodes(parentNode.id, 'to');
			for (var i = 0; i < nodeIds.length; i++) {
				var node = networkNodes.get(nodeIds[i])
				if (node.STAURL) {
					if (IdOfSTAObject(node) != -1) {
						node.STAURL = parentNode.STAURL + "/" + STAObjects[IdOfSTAObject(node)];
						networkNodes.update(node);
						LoadJSONData(node);
					}
				}
				UpdateChildenSTAURL(node);
			}
		}

		function getDataAttributes(data) {
			var dataAttributes = [], s;

			for (var i = 0; i < data.length; i++) {
				var keys = Object.keys(data[i]);
				for (var k = 0; k < keys.length; k++) {
					for (var a = 0; a < dataAttributes.length; a++) {
						if (dataAttributes[a] == keys[k])
							break;
					}
					if (a == dataAttributes.length)
						dataAttributes.push(keys[k]);
				}
			}
			return dataAttributes;
		}

		function GetHTMLTable(data, rowNumbers, rowChecks) {
			var dataAttributes = getDataAttributes(data);

			var s = "<table class='tablesmall'><tr>";
			if (rowNumbers)
				s += "<th class='th_compact'></th>";
			if (rowChecks)
				s += "<th class='th_compact'></th>";
			for (var a = 0; a < dataAttributes.length; a++)
				s += "<th class='th_compact'>" + dataAttributes[a] + "</th>";
			s += "</tr>";
			for (var i = 0; i < data.length; i++) {
				s += "<tr class='tr_compact'>";
				if (rowNumbers)
					s += "<td class='td_compact'>" + (i + 1) + "</td>";
				if (rowChecks)
					s += "<td class='td_compact'><input type='radio' name='SelectRowRadio' id='SelectRow_" + (data[i]["@iot.id"] ? data[i]["@iot.id"] : i) + "' " + (i == 0 ? "checked='checked'" : "") + "/></td>";
				for (var a = 0; a < dataAttributes.length; a++) {
					s += "<td class='td_compact'>"
					if (typeof data[i][dataAttributes[a]] !== "undefined") {
						if ((dataAttributes[a] == "url" || dataAttributes[a] == "definition" ||
							dataAttributes[a].endsWith("@iot.selfLink") ||
							dataAttributes[a].endsWith("@iot.navigationLink")) && data[i][dataAttributes[a]].length)
							s += "<a href='" + data[i][dataAttributes[a]] + "' target='_blank'>" + data[i][dataAttributes[a]] + "</a>";
						else
							s += JSON.stringify(data[i][dataAttributes[a]]);
					}
					s += "</td>"
				}
				s += "</tr>"
			}
			s += "</table>";
			return s;
		}

		function ShowTableDialog(nodeId) {
			var data = networkNodes.get(nodeId).STAdata;

			if (!data || !data.length) {
				document.getElementById("DialogOKHTML").innerHTML = "No data to show.";
				return;
			}

			document.getElementById("DialogOKHTML").innerHTML = GetHTMLTable(data,
				document.getElementById("ShowTableRowNumberDialogOK").checked ? true : false,
				false);
		}

		function ShowTableSelectColumnsDialog(nodeParentId,nodeId) {
			var data = networkNodes.get(nodeParentId).STAdata, selectedColumns=networkNodes.get(nodeId).STASelectedColumns;

			if (!data || !data.length) {
				document.getElementById("DialogSelectColumnsHTML").innerHTML = "No data to show.";
				return;
			}
			var dataAttributes = getDataAttributes(data);

			var s = "<table>";
			for (var a = 0; a < dataAttributes.length; a++)
				s += "<tr><td><label><input type='checkbox'" + ((!selectedColumns || a>=selectedColumns.length || selectedColumns[a]) ? "checked='checked'" : "") + " id='SelectColumn_" + a + "' /> " + dataAttributes[a] + "</label></td></tr>";
			s += "</table>";
			document.getElementById("DialogSelectColumnsHTML").innerHTML = s;
		}

		function ShowTableSelectRowsDialog(nodeId) {
			var data = networkNodes.get(nodeId).STAdata;

			if (!data || !data.length) {
				document.getElementById("DialogSelectColumnsHTML").innerHTML = "No data to show.";
				return;
			}

			document.getElementById("DialogSelectRowsTableRadio").checked = true;
			document.getElementById("DialogSelectRowsTable").innerHTML = GetHTMLTable(data, false, true);

			document.getElementById("DialogSelectRowsFilterRadio").checked = false;
			document.getElementById("DialogSelectRowsFilter").innerHTML = "";
		}

		function ShowTableFilterRowsDialog(nodeId) {
			var data = networkNodes.get(nodeId).STAdata;

			if (!data || !data.length) {
				document.getElementById("DialogSelectColumnsHTML").innerHTML = "No data to show.";
				return;
			}

			document.getElementById("DialogSelectRowsTableRadio").checked = false;
			document.getElementById("DialogSelectRowsTable").innerHTML = "";

			document.getElementById("DialogSelectRowsFilterRadio").checked = true;
			document.getElementById("DialogSelectRowsFilter").innerHTML = "";

		}

		function ChangeTableFilterRowsDialog(nodeId) {
			if (document.getElementById("DialogSelectRowsTableRadio").checked)
				ShowTableSelectRowsDialog(nodeId);
			else
				ShowTableFilterRowsDialog(nodeId);
		}


		// create an array with nodes	
		var networkNodes = new vis.DataSet([]);

		// create an array with edges	
		var networkEdges = new vis.DataSet([]);

		var network = new vis.Network(document.getElementById("mynetwork"), {
			nodes: networkNodes,
			edges: networkEdges
		},
			{
				interaction: { hover: true },
				manipulation: {  //https://stackoverflow.com/questions/39701703/add-edge-dynamically-visjs
					enabled: false,
					addEdge: function (data, callback) {
						console.log('add edge', data);
						if (data.from == data.to)
							alert("Connection to the same node is not allowed");
						else {
							networkEdges.add([{ from: data.from, to: data.to }]);
							var nodeTo = networkNodes.get(data.to);
							var nodeFrom = networkNodes.get(data.from);
							if (nodeFrom.STAURL && IdOfSTAObject(nodeTo) != -1) {
								var startingNode = networkNodes.get(startingNodeContextId);
								nodeTo.STAURL = nodeFrom.STAURL + "/" + STAObjects[IdOfSTAObject(nodeTo)];
								networkNodes.update(nodeTo);
								LoadJSONData(nodeTo);
							}
							else if (nodeFrom.STAURL && (nodeTo.image == "SelectColumns.png" || nodeTo.image == "SelectRows.png")) {
								nodeTo.STAURL = nodeFrom.STAURL;
								networkNodes.update(nodeTo);
								LoadJSONData(nodeTo);
							}
						}
						connectionInProcess = false;
						document.getElementById("clarification").innerHTML = "";
					}
				}
			});

		network.on("click", function (params) {
			params.event = "[original event]";
			document.getElementById("eventSpanHeading").innerText = "Click event:";
			document.getElementById("eventSpanContent").innerText = JSON.stringify(params, null, 4);
			console.log("click event, getNodeAt returns: " + this.getNodeAt(params.pointer.DOM));
		});
		network.on("doubleClick", function (params) {
			params.event = "[original event]";
			document.getElementById("eventSpanHeading").innerText = "doubleClick event:";
			document.getElementById("eventSpanContent").innerText = JSON.stringify(params, null, 4);
			if (params.nodes && params.nodes.length && !connectionInProcess) {
				currentNode = networkNodes.get(params.nodes[0])
				if (currentNode.image == "ogc.png") {
					document.getElementById("DialogSTAURLInput").value = currentNode.STAURL;
					document.getElementById("DialogSTAURLInput").readOnly = false;
					document.getElementById("DialogSTAURL").showModal();
				}
				else if (currentNode.image == "ViewQuery.png") {
					document.getElementById("DialogSTAURLInput").value="";
					var nodeids = network.getConnectedNodes(currentNode.id, "from");
					if (nodeids && nodeids.length) {
						if (networkNodes.get(nodeids[0])) 
							document.getElementById("DialogSTAURLInput").value = networkNodes.get(nodeids[0]).STAURL;
					}
					document.getElementById("DialogSTAURLInput").readOnly = true;
					document.getElementById("DialogSTAURL").showModal();
				}
				else if (currentNode.image == "Table.png") {
					//Determino de quin node depèn.
					var nodeids = network.getConnectedNodes(currentNode.id, "from");
					if (nodeids && nodeids.length) {
						if (networkNodes.get(nodeids[0])) {
							var data = networkNodes.get(nodeids[0]).STAdata;
							if (data && data.length)
								document.getElementById("DialogOKOptions").innerHTML = "<label><input type='checkbox' checked='checked' id='ShowTableRowNumberDialogOK' onChange='ShowTableDialog(\"" + nodeids[0] + "\");'/> Show row numbers</label>";
							else
								document.getElementById("DialogOKOptions").innerHTML = "";
							ShowTableDialog(nodeids[0]);
						}
						document.getElementById("DialogOK").showModal();
					}
				}
				else if (currentNode.image == "SelectColumns.png") {
					//Determino de quin node depèn.
					var nodeids = network.getConnectedNodes(currentNode.id, "from");
					if (nodeids && nodeids.length) {
						if (networkNodes.get(nodeids[0]) && networkNodes.get(nodeids[0]).STAURL)
							ShowTableSelectColumnsDialog(nodeids[0], currentNode.id);

						document.getElementById("DialogSelectColumns").showModal();
					}
				}
				else if (currentNode.image == "SelectRows.png") {
					//Determino de quin node depèn.
					var nodeids = network.getConnectedNodes(currentNode.id, "from");
					if (nodeids && nodeids.length) {
						if (networkNodes.get(nodeids[0]) && networkNodes.get(nodeids[0]).STAURL) {
							document.getElementById("DialogSelectRowsTableInputSpan").innerHTML = "<label><input type='radio' name='DialogSelectRowsRadio' id='DialogSelectRowsTableRadio' checked='checked' onClick='ChangeTableFilterRowsDialog(\"" + nodeids[0] + "\")'/> Select an element:</label>";
							document.getElementById("DialogSelectRowsFilterInputSpan").innerHTML = "<label><input type='radio' name='DialogSelectRowsRadio' id='DialogSelectRowsFilterRadio' onClick='ChangeTableFilterRowsDialog(\"" + nodeids[0] + "\")'/>  Filter:</label>";
							ShowTableSelectRowsDialog(nodeids[0]);
						}
						document.getElementById("DialogSelectRows").showModal();
					}
				}
			}
		});
		network.on("oncontext", function (params) {
			params.event.preventDefault();  //https://stackoverflow.com/questions/38258940/open-an-extension-popup-html-list-on-right-click-of-node-contextmenu-in-visj

			var nodeId = network.getNodeAt(params.pointer.DOM); //params.nodes is not useful here as params.nodes are the selected ones and not the ones rightclicked.
			if (nodeId) {
				startingNodeContextId = nodeId;
				document.getElementById("DialogContextMenu").showModal();
			}
			params.event = "[original event]";
			document.getElementById("eventSpanHeading").innerText = "oncontext (right click) event:";
			document.getElementById("eventSpanContent").innerText = JSON.stringify(params, null, 4);
		});
		network.on("dragStart", function (params) {
			// There's no point in displaying this event on screen, it gets immediately overwritten
			params.event = "[original event]";
			console.log("dragStart Event:", params);
			console.log("dragStart event, getNodeAt returns: " + this.getNodeAt(params.pointer.DOM));
		});
		network.on("dragging", function (params) {
			params.event = "[original event]";
			document.getElementById("eventSpanHeading").innerText = "dragging event:";
			document.getElementById("eventSpanContent").innerText = JSON.stringify(params, null, 4);
		});
		network.on("dragEnd", function (params) {
			params.event = "[original event]";
			document.getElementById("eventSpanHeading").innerText = "dragEnd event:";
			document.getElementById("eventSpanContent").innerText = JSON.stringify(params, null, 4);
			console.log("dragEnd Event:", params);
			console.log("dragEnd event, getNodeAt returns: " + this.getNodeAt(params.pointer.DOM));
		});
		network.on("controlNodeDragging", function (params) {
			params.event = "[original event]";
			document.getElementById("eventSpanHeading").innerText = "control node dragging event:";
			document.getElementById("eventSpanContent").innerText = JSON.stringify(params, null, 4);
		});
		network.on("controlNodeDragEnd", function (params) {
			params.event = "[original event]";
			document.getElementById("eventSpanHeading").innerText = "control node drag end event:";
			document.getElementById("eventSpanContent").innerText = JSON.stringify(params, null, 4);
			console.log("controlNodeDragEnd Event:", params);
		});
		network.on("zoom", function (params) {
			document.getElementById("eventSpanHeading").innerText = "zoom event:";
			document.getElementById("eventSpanContent").innerText = JSON.stringify(params, null, 4);
		});
		network.on("showPopup", function (params) {
			document.getElementById("eventSpanHeading").innerText = "showPopup event: ";
			document.getElementById("eventSpanContent").innerText = JSON.stringify(params, null, 4);
		});
		/*network.on("hidePopup", function () {
			console.log("hidePopup Event");
		});
		network.on("select", function (params) {
			console.log("select Event:", params);
		});
		network.on("selectNode", function (params) {
			console.log("selectNode Event:", params);
		});
		network.on("selectEdge", function (params) {
			console.log("selectEdge Event:", params);
		});
		network.on("deselectNode", function (params) {
			console.log("deselectNode Event:", params);
		});
		network.on("deselectEdge", function (params) {
			console.log("deselectEdge Event:", params);
		});
		network.on("hoverNode", function (params) {
			console.log("hoverNode Event:", params);
		});
		network.on("hoverEdge", function (params) {
			console.log("hoverEdge Event:", params);
		});
		network.on("blurNode", function (params) {
			console.log("blurNode Event:", params);
		});
		network.on("blurEdge", function (params) {
			console.log("blurEdge Event:", params);
		});*/


		function addCircularImage(event, dialog, label, image) {
			if (event)
				event.preventDefault(); // We don't want to submit this form
			if (dialog)
				document.getElementById(dialog).close();
			var newId = (Math.random() * 1e7).toString(32);
			var node = { id: newId, label: label, image: image, shape: "circularImage" };
			if (image == "ogc.png")
				node.STAURL = "https://cos4cloud.demo.secure-dimensions.de/staplus/v1.1";
			else if (startingNodeContextId && IdOfSTAObject(node) != -1) {
				var startingNode = networkNodes.get(startingNodeContextId);
				node.STAURL = startingNode.STAURL + "/" + STAObjects[IdOfSTAObject(node)];
			}
			else if (image == "SelectColumns.png" || image == "SelectRows.png") {
				var startingNode = networkNodes.get(startingNodeContextId);
				node.STAURL = startingNode.STAURL;
			}
			networkNodes.add(node);

			if (image == "ogc.png")
				LoadJSONData(node);
			if (startingNodeContextId) {
				networkEdges.add([{ from: startingNodeContextId, to: newId }]);
				if (IdOfSTAObject(node) != -1 || image == "SelectColumns.png" || image == "SelectRows.png")
					LoadJSONData(node);
				startingNodeContextId = null;
			}
			network.selectNodes([newId]);
		}

		function removeCircularImage(event, dialog) {
			if (event)
				event.preventDefault(); // We don't want to submit this form
			if (dialog)
				document.getElementById(dialog).close();
			if (startingNodeContextId) {
				networkNodes.remove(startingNodeContextId);
				startingNodeContextId = null;
			}
		}

		function addEdge() {
			network.addEdgeMode();
			connectionInProcess = true;
			document.getElementById("clarification").innerHTML = "Press the mouse botton on the starting node, and drag and drop the mouse on the end node.";
		}

	</script>

</body>

</html>